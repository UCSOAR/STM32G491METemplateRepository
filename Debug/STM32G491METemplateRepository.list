
STM32G491METemplateRepository.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b84  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005d64  08005d64  00006d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de4  08005de4  00007078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005de4  08005de4  00007078  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005de4  08005de4  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005de4  08005de4  00006de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005dec  08005dec  00006dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08005df0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a004  20000078  08005e68  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a07c  08005e68  0000707c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a47e  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000495f  00000000  00000000  00021526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  00025e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001288  00000000  00000000  000276f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014463  00000000  00000000  00028978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008623  00000000  00000000  0003cddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000453fe  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000066f0  00000000  00000000  00045444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000068  00000000  00000000  0004bb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005d4c 	.word	0x08005d4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08005d4c 	.word	0x08005d4c

08000220 <cpp_USART2_IRQHandler>:
#include "RunInterface.hpp"

extern "C" {
void run_interface() { run_main(); }

void cpp_USART2_IRQHandler() {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
		Driver::usart2.HandleIRQ_UART();
 8000224:	4802      	ldr	r0, [pc, #8]	@ (8000230 <cpp_USART2_IRQHandler+0x10>)
 8000226:	f005 fc6d 	bl	8005b04 <_ZN10UARTDriver14HandleIRQ_UARTEv>
	}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	20000094 	.word	0x20000094

08000234 <_ZN10UARTDriverC1EP13USART_TypeDef>:
 *	      based on the STM32 LL Library
 */
class UARTDriver
{
public:
	UARTDriver(USART_TypeDef* uartInstance) :
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
		kUart_(uartInstance),
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	601a      	str	r2, [r3, #0]
		rxCharBuf_(nullptr),
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2200      	movs	r2, #0
 8000248:	605a      	str	r2, [r3, #4]
		rxReceiver_(nullptr) {}
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4618      	mov	r0, r3
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
	...

08000260 <_Z41__static_initialization_and_destruction_0v>:
  while (1)
  {
    osDelay(100);
    HAL_NVIC_SystemReset();
  }
}
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  UARTDriver usart2(USART2);
 8000264:	4902      	ldr	r1, [pc, #8]	@ (8000270 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8000266:	4803      	ldr	r0, [pc, #12]	@ (8000274 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8000268:	f7ff ffe4 	bl	8000234 <_ZN10UARTDriverC1EP13USART_TypeDef>
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40004400 	.word	0x40004400
 8000274:	20000094 	.word	0x20000094

08000278 <_GLOBAL__sub_I__ZN6Driver6usart2E>:
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
 800027c:	f7ff fff0 	bl	8000260 <_Z41__static_initialization_and_destruction_0v>
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <__NVIC_GetPriorityGrouping+0x18>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	0a1b      	lsrs	r3, r3, #8
 800028e:	f003 0307 	and.w	r3, r3, #7
}
 8000292:	4618      	mov	r0, r3
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db0b      	blt.n	80002ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f003 021f 	and.w	r2, r3, #31
 80002b8:	4907      	ldr	r1, [pc, #28]	@ (80002d8 <__NVIC_EnableIRQ+0x38>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	095b      	lsrs	r3, r3, #5
 80002c0:	2001      	movs	r0, #1
 80002c2:	fa00 f202 	lsl.w	r2, r0, r2
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e100 	.word	0xe000e100

080002dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	6039      	str	r1, [r7, #0]
 80002e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	db0a      	blt.n	8000306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	490c      	ldr	r1, [pc, #48]	@ (8000328 <__NVIC_SetPriority+0x4c>)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	0112      	lsls	r2, r2, #4
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	440b      	add	r3, r1
 8000300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000304:	e00a      	b.n	800031c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4908      	ldr	r1, [pc, #32]	@ (800032c <__NVIC_SetPriority+0x50>)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3b04      	subs	r3, #4
 8000314:	0112      	lsls	r2, r2, #4
 8000316:	b2d2      	uxtb	r2, r2
 8000318:	440b      	add	r3, r1
 800031a:	761a      	strb	r2, [r3, #24]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000330:	b480      	push	{r7}
 8000332:	b089      	sub	sp, #36	@ 0x24
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	f003 0307 	and.w	r3, r3, #7
 8000342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000344:	69fb      	ldr	r3, [r7, #28]
 8000346:	f1c3 0307 	rsb	r3, r3, #7
 800034a:	2b04      	cmp	r3, #4
 800034c:	bf28      	it	cs
 800034e:	2304      	movcs	r3, #4
 8000350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000352:	69fb      	ldr	r3, [r7, #28]
 8000354:	3304      	adds	r3, #4
 8000356:	2b06      	cmp	r3, #6
 8000358:	d902      	bls.n	8000360 <NVIC_EncodePriority+0x30>
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	3b03      	subs	r3, #3
 800035e:	e000      	b.n	8000362 <NVIC_EncodePriority+0x32>
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	f04f 32ff 	mov.w	r2, #4294967295
 8000368:	69bb      	ldr	r3, [r7, #24]
 800036a:	fa02 f303 	lsl.w	r3, r2, r3
 800036e:	43da      	mvns	r2, r3
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	401a      	ands	r2, r3
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000378:	f04f 31ff 	mov.w	r1, #4294967295
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	43d9      	mvns	r1, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000388:	4313      	orrs	r3, r2
         );
}
 800038a:	4618      	mov	r0, r3
 800038c:	3724      	adds	r7, #36	@ 0x24
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f043 0201 	orr.w	r2, r3, #1
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	601a      	str	r2, [r3, #0]
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b089      	sub	sp, #36	@ 0x24
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3308      	adds	r3, #8
 80003e4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	e853 3f00 	ldrex	r3, [r3]
 80003ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	075b      	lsls	r3, r3, #29
 80003f8:	4313      	orrs	r3, r2
 80003fa:	61fb      	str	r3, [r7, #28]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3308      	adds	r3, #8
 8000400:	69fa      	ldr	r2, [r7, #28]
 8000402:	61ba      	str	r2, [r7, #24]
 8000404:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000406:	6979      	ldr	r1, [r7, #20]
 8000408:	69ba      	ldr	r2, [r7, #24]
 800040a:	e841 2300 	strex	r3, r2, [r1]
 800040e:	613b      	str	r3, [r7, #16]
   return(result);
 8000410:	693b      	ldr	r3, [r7, #16]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1e4      	bne.n	80003e0 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8000416:	bf00      	nop
 8000418:	bf00      	nop
 800041a:	3724      	adds	r7, #36	@ 0x24
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000424:	b480      	push	{r7}
 8000426:	b089      	sub	sp, #36	@ 0x24
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3308      	adds	r3, #8
 8000432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	e853 3f00 	ldrex	r3, [r3]
 800043a:	60bb      	str	r3, [r7, #8]
   return(result);
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	065b      	lsls	r3, r3, #25
 8000446:	4313      	orrs	r3, r2
 8000448:	61fb      	str	r3, [r7, #28]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3308      	adds	r3, #8
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	61ba      	str	r2, [r7, #24]
 8000452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000454:	6979      	ldr	r1, [r7, #20]
 8000456:	69ba      	ldr	r2, [r7, #24]
 8000458:	e841 2300 	strex	r3, r2, [r1]
 800045c:	613b      	str	r3, [r7, #16]
   return(result);
 800045e:	693b      	ldr	r3, [r7, #16]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d1e4      	bne.n	800042e <LL_USART_SetRXFIFOThreshold+0xa>
}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	3724      	adds	r7, #36	@ 0x24
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	609a      	str	r2, [r3, #8]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80004b2:	d101      	bne.n	80004b8 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80004b4:	2301      	movs	r3, #1
 80004b6:	e000      	b.n	80004ba <LL_USART_IsActiveFlag_TEACK+0x1c>
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80004da:	d101      	bne.n	80004e0 <LL_USART_IsActiveFlag_REACK+0x1a>
 80004dc:	2301      	movs	r3, #1
 80004de:	e000      	b.n	80004e2 <LL_USART_IsActiveFlag_REACK+0x1c>
 80004e0:	2300      	movs	r3, #0
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
	...

080004f0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004f8:	4b08      	ldr	r3, [pc, #32]	@ (800051c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004fc:	4907      	ldr	r1, [pc, #28]	@ (800051c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4313      	orrs	r3, r2
 8000502:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4013      	ands	r3, r2
 800050c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000

08000520 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <LL_APB1_GRP1_EnableClock+0x2c>)
 800052a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800052c:	4907      	ldr	r1, [pc, #28]	@ (800054c <LL_APB1_GRP1_EnableClock+0x2c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4313      	orrs	r3, r2
 8000532:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000536:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4013      	ands	r3, r2
 800053c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053e:	68fb      	ldr	r3, [r7, #12]
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	40021000 	.word	0x40021000

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fa7e 	bl	8000a56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f825 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 f927 	bl	80007b0 <MX_GPIO_Init>
  MX_CRC_Init();
 8000562:	f000 f861 	bl	8000628 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f881 	bl	800066c <MX_USART2_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800056a:	f002 fd77 	bl	800305c <MX_FATFS_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <main+0x28>
    Error_Handler();
 8000574:	f000 f94b 	bl	800080e <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 196);
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <main+0x50>)
 800057a:	1d3c      	adds	r4, r7, #4
 800057c:	461d      	mov	r5, r3
 800057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000582:	682b      	ldr	r3, [r5, #0]
 8000584:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fe50 	bl	8003230 <osThreadCreate>
 8000590:	4603      	mov	r3, r0
 8000592:	4a04      	ldr	r2, [pc, #16]	@ (80005a4 <main+0x54>)
 8000594:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000596:	f002 fe44 	bl	8003222 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059a:	bf00      	nop
 800059c:	e7fd      	b.n	800059a <main+0x4a>
 800059e:	bf00      	nop
 80005a0:	08005d70 	.word	0x08005d70
 80005a4:	200000c4 	.word	0x200000c4

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	@ 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	2238      	movs	r2, #56	@ 0x38
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 fad7 	bl	8005b6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ce:	f000 fc4b 	bl	8000e68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2340      	movs	r3, #64	@ 0x40
 80005de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0318 	add.w	r3, r7, #24
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fcf1 	bl	8000fd0 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005f4:	f000 f90b 	bl	800080e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005fc:	2301      	movs	r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f000 ffef 	bl	80015f4 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800061c:	f000 f8f7 	bl	800080e <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	@ 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800062c:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <MX_CRC_Init+0x3c>)
 800062e:	4a0e      	ldr	r2, [pc, #56]	@ (8000668 <MX_CRC_Init+0x40>)
 8000630:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MX_CRC_Init+0x3c>)
 8000634:	2200      	movs	r2, #0
 8000636:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_CRC_Init+0x3c>)
 800063a:	2200      	movs	r2, #0
 800063c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_CRC_Init+0x3c>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_CRC_Init+0x3c>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_CRC_Init+0x3c>)
 800064c:	2201      	movs	r2, #1
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <MX_CRC_Init+0x3c>)
 8000652:	f000 fb17 	bl	8000c84 <HAL_CRC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800065c:	f000 f8d7 	bl	800080e <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200000a0 	.word	0x200000a0
 8000668:	40023000 	.word	0x40023000

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0a2      	sub	sp, #136	@ 0x88
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000672:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000676:	2220      	movs	r2, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 fa75 	bl	8005b6a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
 8000690:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2250      	movs	r2, #80	@ 0x50
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f005 fa66 	bl	8005b6a <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800069e:	2302      	movs	r3, #2
 80006a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a6:	463b      	mov	r3, r7
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 f9db 	bl	8001a64 <HAL_RCCEx_PeriphCLKConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_USART2_UART_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f8ab 	bl	800080e <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80006b8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80006bc:	f7ff ff30 	bl	8000520 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff ff15 	bl	80004f0 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80006c6:	2304      	movs	r3, #4
 80006c8:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006ca:	2302      	movs	r3, #2
 80006cc:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006d6:	2300      	movs	r3, #0
 80006d8:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80006da:	2307      	movs	r3, #7
 80006dc:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e8:	f002 f87d 	bl	80027e6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80006ec:	2308      	movs	r3, #8
 80006ee:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006f0:	2302      	movs	r3, #2
 80006f2:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006fc:	2300      	movs	r3, #0
 80006fe:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000700:	2307      	movs	r3, #7
 8000702:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000708:	4619      	mov	r1, r3
 800070a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070e:	f002 f86a 	bl	80027e6 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000712:	f7ff fdb7 	bl	8000284 <__NVIC_GetPriorityGrouping>
 8000716:	4603      	mov	r3, r0
 8000718:	2200      	movs	r2, #0
 800071a:	2105      	movs	r1, #5
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fe07 	bl	8000330 <NVIC_EncodePriority>
 8000722:	4603      	mov	r3, r0
 8000724:	4619      	mov	r1, r3
 8000726:	2026      	movs	r0, #38	@ 0x26
 8000728:	f7ff fdd8 	bl	80002dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800072c:	2026      	movs	r0, #38	@ 0x26
 800072e:	f7ff fdb7 	bl	80002a0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	66bb      	str	r3, [r7, #104]	@ 0x68
  USART_InitStruct.BaudRate = 115200;
 8000736:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800073a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800073c:	2300      	movs	r3, #0
 800073e:	673b      	str	r3, [r7, #112]	@ 0x70
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000740:	2300      	movs	r3, #0
 8000742:	677b      	str	r3, [r7, #116]	@ 0x74
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	67bb      	str	r3, [r7, #120]	@ 0x78
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000748:	230c      	movs	r3, #12
 800074a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800074c:	2300      	movs	r3, #0
 800074e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000752:	2300      	movs	r3, #0
 8000754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  LL_USART_Init(USART2, &USART_InitStruct);
 8000758:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800075c:	4619      	mov	r1, r3
 800075e:	4813      	ldr	r0, [pc, #76]	@ (80007ac <MX_USART2_UART_Init+0x140>)
 8000760:	f002 fbf6 	bl	8002f50 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000764:	2100      	movs	r1, #0
 8000766:	4811      	ldr	r0, [pc, #68]	@ (80007ac <MX_USART2_UART_Init+0x140>)
 8000768:	f7ff fe35 	bl	80003d6 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 800076c:	2100      	movs	r1, #0
 800076e:	480f      	ldr	r0, [pc, #60]	@ (80007ac <MX_USART2_UART_Init+0x140>)
 8000770:	f7ff fe58 	bl	8000424 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000774:	480d      	ldr	r0, [pc, #52]	@ (80007ac <MX_USART2_UART_Init+0x140>)
 8000776:	f7ff fe1e 	bl	80003b6 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 800077a:	480c      	ldr	r0, [pc, #48]	@ (80007ac <MX_USART2_UART_Init+0x140>)
 800077c:	f7ff fe79 	bl	8000472 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000780:	480a      	ldr	r0, [pc, #40]	@ (80007ac <MX_USART2_UART_Init+0x140>)
 8000782:	f7ff fe08 	bl	8000396 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000786:	bf00      	nop
 8000788:	4808      	ldr	r0, [pc, #32]	@ (80007ac <MX_USART2_UART_Init+0x140>)
 800078a:	f7ff fe88 	bl	800049e <LL_USART_IsActiveFlag_TEACK>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f9      	beq.n	8000788 <MX_USART2_UART_Init+0x11c>
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_USART2_UART_Init+0x140>)
 8000796:	f7ff fe96 	bl	80004c6 <LL_USART_IsActiveFlag_REACK>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0f3      	beq.n	8000788 <MX_USART2_UART_Init+0x11c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3788      	adds	r7, #136	@ 0x88
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_GPIO_Init+0x2c>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <MX_GPIO_Init+0x2c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_GPIO_Init+0x2c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f002 fd48 	bl	800327e <osDelay>
 80007ee:	e7fb      	b.n	80007e8 <StartDefaultTask+0x8>

080007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000802:	f000 f941 	bl	8000a88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000812:	b672      	cpsid	i
}
 8000814:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000816:	bf00      	nop
 8000818:	e7fd      	b.n	8000816 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_MspInit+0x50>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000826:	4a11      	ldr	r2, [pc, #68]	@ (800086c <HAL_MspInit+0x50>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6613      	str	r3, [r2, #96]	@ 0x60
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <HAL_MspInit+0x50>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <HAL_MspInit+0x50>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083e:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <HAL_MspInit+0x50>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000844:	6593      	str	r3, [r2, #88]	@ 0x58
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_MspInit+0x50>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	210f      	movs	r1, #15
 8000856:	f06f 0001 	mvn.w	r0, #1
 800085a:	f000 f9eb 	bl	8000c34 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800085e:	f000 fba7 	bl	8000fb0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0a      	ldr	r2, [pc, #40]	@ (80008a8 <HAL_CRC_MspInit+0x38>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d10b      	bne.n	800089a <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <HAL_CRC_MspInit+0x3c>)
 8000884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000886:	4a09      	ldr	r2, [pc, #36]	@ (80008ac <HAL_CRC_MspInit+0x3c>)
 8000888:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800088c:	6493      	str	r3, [r2, #72]	@ 0x48
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <HAL_CRC_MspInit+0x3c>)
 8000890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000892:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40023000 	.word	0x40023000
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	@ 0x30
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <HAL_InitTick+0xc8>)
 80008c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c4:	4a2c      	ldr	r2, [pc, #176]	@ (8000978 <HAL_InitTick+0xc8>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80008cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <HAL_InitTick+0xc8>)
 80008ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d8:	f107 020c 	add.w	r2, r7, #12
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 f846 	bl	8001974 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008e8:	f001 f82e 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 80008ec:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008f0:	4a22      	ldr	r2, [pc, #136]	@ (800097c <HAL_InitTick+0xcc>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	0c9b      	lsrs	r3, r3, #18
 80008f8:	3b01      	subs	r3, #1
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80008fc:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_InitTick+0xd0>)
 80008fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000902:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000904:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <HAL_InitTick+0xd0>)
 8000906:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800090a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800090c:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_InitTick+0xd0>)
 800090e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000910:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000912:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <HAL_InitTick+0xd0>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <HAL_InitTick+0xd0>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 800091e:	4818      	ldr	r0, [pc, #96]	@ (8000980 <HAL_InitTick+0xd0>)
 8000920:	f001 fadc 	bl	8001edc <HAL_TIM_Base_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800092a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800092e:	2b00      	cmp	r3, #0
 8000930:	d11b      	bne.n	800096a <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000932:	4813      	ldr	r0, [pc, #76]	@ (8000980 <HAL_InitTick+0xd0>)
 8000934:	f001 fb34 	bl	8001fa0 <HAL_TIM_Base_Start_IT>
 8000938:	4603      	mov	r3, r0
 800093a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800093e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000942:	2b00      	cmp	r3, #0
 8000944:	d111      	bne.n	800096a <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000946:	201c      	movs	r0, #28
 8000948:	f000 f98e 	bl	8000c68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b0f      	cmp	r3, #15
 8000950:	d808      	bhi.n	8000964 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000952:	2200      	movs	r2, #0
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	201c      	movs	r0, #28
 8000958:	f000 f96c 	bl	8000c34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800095c:	4a09      	ldr	r2, [pc, #36]	@ (8000984 <HAL_InitTick+0xd4>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	e002      	b.n	800096a <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800096a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800096e:	4618      	mov	r0, r3
 8000970:	3730      	adds	r7, #48	@ 0x30
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	431bde83 	.word	0x431bde83
 8000980:	200000c8 	.word	0x200000c8
 8000984:	20000004 	.word	0x20000004

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <MemManage_Handler+0x4>

080009a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <UsageFault_Handler+0x4>

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <TIM2_IRQHandler+0x10>)
 80009c6:	f001 fb5b 	bl	8002080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000c8 	.word	0x200000c8

080009d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	  cpp_USART2_IRQHandler();
 80009d8:	f7ff fc22 	bl	8000220 <cpp_USART2_IRQHandler>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	@ (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a04:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a06:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a08:	f7ff ffea 	bl	80009e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	@ (8000a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <LoopForever+0xe>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	@ (8000a50 <LoopForever+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a32:	f005 f901 	bl	8005c38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a36:	f7ff fd8b 	bl	8000550 <main>

08000a3a <LoopForever>:

LoopForever:
    b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
  ldr   r0, =_estack
 8000a3c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a48:	08005df0 	.word	0x08005df0
  ldr r2, =_sbss
 8000a4c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a50:	2000a07c 	.word	0x2000a07c

08000a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_2_IRQHandler>

08000a56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f8dc 	bl	8000c1e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a66:	200f      	movs	r0, #15
 8000a68:	f7ff ff22 	bl	80008b0 <HAL_InitTick>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	e001      	b.n	8000a7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a78:	f7ff fed0 	bl	800081c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <HAL_IncTick+0x1c>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <HAL_IncTick+0x20>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a03      	ldr	r2, [pc, #12]	@ (8000aa4 <HAL_IncTick+0x1c>)
 8000a98:	6013      	str	r3, [r2, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	20000114 	.word	0x20000114
 8000aa8:	20000008 	.word	0x20000008

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000114 	.word	0x20000114

08000ac4 <__NVIC_SetPriorityGrouping>:
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af6:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_GetPriorityGrouping>:
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4907      	ldr	r1, [pc, #28]	@ (8000b60 <__NVIC_EnableIRQ+0x38>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <__NVIC_SetPriority>:
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	@ (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	@ (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	@ 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	4313      	orrs	r3, r2
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	@ 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ff4c 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c42:	f7ff ff63 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	68b9      	ldr	r1, [r7, #8]
 8000c4c:	6978      	ldr	r0, [r7, #20]
 8000c4e:	f7ff ffb3 	bl	8000bb8 <NVIC_EncodePriority>
 8000c52:	4602      	mov	r2, r0
 8000c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff82 	bl	8000b64 <__NVIC_SetPriority>
}
 8000c60:	bf00      	nop
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff56 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e054      	b.n	8000d40 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7f5b      	ldrb	r3, [r3, #29]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d105      	bne.n	8000cac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff fde2 	bl	8000870 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2202      	movs	r2, #2
 8000cb0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	791b      	ldrb	r3, [r3, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10c      	bne.n	8000cd4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a22      	ldr	r2, [pc, #136]	@ (8000d48 <HAL_CRC_Init+0xc4>)
 8000cc0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0218 	bic.w	r2, r2, #24
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	e00c      	b.n	8000cee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6899      	ldr	r1, [r3, #8]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 f834 	bl	8000d4c <HAL_CRCEx_Polynomial_Set>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e028      	b.n	8000d40 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	795b      	ldrb	r3, [r3, #5]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d105      	bne.n	8000d02 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	e004      	b.n	8000d0c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	6912      	ldr	r2, [r2, #16]
 8000d0a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695a      	ldr	r2, [r3, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	699a      	ldr	r2, [r3, #24]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	04c11db7 	.word	0x04c11db7

08000d4c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000d5c:	231f      	movs	r3, #31
 8000d5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	75fb      	strb	r3, [r7, #23]
 8000d6e:	e063      	b.n	8000e38 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000d70:	bf00      	nop
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	613a      	str	r2, [r7, #16]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d009      	beq.n	8000d90 <HAL_CRCEx_Polynomial_Set+0x44>
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	f003 031f 	and.w	r3, r3, #31
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	fa22 f303 	lsr.w	r3, r2, r3
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0f0      	beq.n	8000d72 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b18      	cmp	r3, #24
 8000d94:	d846      	bhi.n	8000e24 <HAL_CRCEx_Polynomial_Set+0xd8>
 8000d96:	a201      	add	r2, pc, #4	@ (adr r2, 8000d9c <HAL_CRCEx_Polynomial_Set+0x50>)
 8000d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9c:	08000e2b 	.word	0x08000e2b
 8000da0:	08000e25 	.word	0x08000e25
 8000da4:	08000e25 	.word	0x08000e25
 8000da8:	08000e25 	.word	0x08000e25
 8000dac:	08000e25 	.word	0x08000e25
 8000db0:	08000e25 	.word	0x08000e25
 8000db4:	08000e25 	.word	0x08000e25
 8000db8:	08000e25 	.word	0x08000e25
 8000dbc:	08000e19 	.word	0x08000e19
 8000dc0:	08000e25 	.word	0x08000e25
 8000dc4:	08000e25 	.word	0x08000e25
 8000dc8:	08000e25 	.word	0x08000e25
 8000dcc:	08000e25 	.word	0x08000e25
 8000dd0:	08000e25 	.word	0x08000e25
 8000dd4:	08000e25 	.word	0x08000e25
 8000dd8:	08000e25 	.word	0x08000e25
 8000ddc:	08000e0d 	.word	0x08000e0d
 8000de0:	08000e25 	.word	0x08000e25
 8000de4:	08000e25 	.word	0x08000e25
 8000de8:	08000e25 	.word	0x08000e25
 8000dec:	08000e25 	.word	0x08000e25
 8000df0:	08000e25 	.word	0x08000e25
 8000df4:	08000e25 	.word	0x08000e25
 8000df8:	08000e25 	.word	0x08000e25
 8000dfc:	08000e01 	.word	0x08000e01
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d913      	bls.n	8000e2e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000e0a:	e010      	b.n	8000e2e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	2b07      	cmp	r3, #7
 8000e10:	d90f      	bls.n	8000e32 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000e16:	e00c      	b.n	8000e32 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	d90b      	bls.n	8000e36 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000e22:	e008      	b.n	8000e36 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	75fb      	strb	r3, [r7, #23]
        break;
 8000e28:	e006      	b.n	8000e38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000e2a:	bf00      	nop
 8000e2c:	e004      	b.n	8000e38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000e2e:	bf00      	nop
 8000e30:	e002      	b.n	8000e38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000e32:	bf00      	nop
 8000e34:	e000      	b.n	8000e38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000e36:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10d      	bne.n	8000e5a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f023 0118 	bic.w	r1, r3, #24
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	371c      	adds	r7, #28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d141      	bne.n	8000efa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e76:	4b4b      	ldr	r3, [pc, #300]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e82:	d131      	bne.n	8000ee8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e84:	4b47      	ldr	r3, [pc, #284]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e8a:	4a46      	ldr	r2, [pc, #280]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e94:	4b43      	ldr	r3, [pc, #268]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e9c:	4a41      	ldr	r2, [pc, #260]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ea2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ea4:	4b40      	ldr	r3, [pc, #256]	@ (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2232      	movs	r2, #50	@ 0x32
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	4a3f      	ldr	r2, [pc, #252]	@ (8000fac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb4:	0c9b      	lsrs	r3, r3, #18
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eba:	e002      	b.n	8000ec2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec2:	4b38      	ldr	r3, [pc, #224]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ece:	d102      	bne.n	8000ed6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f2      	bne.n	8000ebc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ed6:	4b33      	ldr	r3, [pc, #204]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ee2:	d158      	bne.n	8000f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e057      	b.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eee:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000ef8:	e04d      	b.n	8000f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f00:	d141      	bne.n	8000f86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f02:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f0e:	d131      	bne.n	8000f74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f10:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f16:	4a23      	ldr	r2, [pc, #140]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f20:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f28:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2232      	movs	r2, #50	@ 0x32
 8000f36:	fb02 f303 	mul.w	r3, r2, r3
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f40:	0c9b      	lsrs	r3, r3, #18
 8000f42:	3301      	adds	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f46:	e002      	b.n	8000f4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f5a:	d102      	bne.n	8000f62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f2      	bne.n	8000f48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f6e:	d112      	bne.n	8000f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e011      	b.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000f84:	e007      	b.n	8000f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f86:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40007000 	.word	0x40007000
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	431bde83 	.word	0x431bde83

08000fb0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbe:	6093      	str	r3, [r2, #8]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40007000 	.word	0x40007000

08000fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e2fe      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d075      	beq.n	80010da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fee:	4b97      	ldr	r3, [pc, #604]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ff8:	4b94      	ldr	r3, [pc, #592]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2b0c      	cmp	r3, #12
 8001006:	d102      	bne.n	800100e <HAL_RCC_OscConfig+0x3e>
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b03      	cmp	r3, #3
 800100c:	d002      	beq.n	8001014 <HAL_RCC_OscConfig+0x44>
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	2b08      	cmp	r3, #8
 8001012:	d10b      	bne.n	800102c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001014:	4b8d      	ldr	r3, [pc, #564]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d05b      	beq.n	80010d8 <HAL_RCC_OscConfig+0x108>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d157      	bne.n	80010d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e2d9      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001034:	d106      	bne.n	8001044 <HAL_RCC_OscConfig+0x74>
 8001036:	4b85      	ldr	r3, [pc, #532]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a84      	ldr	r2, [pc, #528]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e01d      	b.n	8001080 <HAL_RCC_OscConfig+0xb0>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800104c:	d10c      	bne.n	8001068 <HAL_RCC_OscConfig+0x98>
 800104e:	4b7f      	ldr	r3, [pc, #508]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a7e      	ldr	r2, [pc, #504]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	4b7c      	ldr	r3, [pc, #496]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a7b      	ldr	r2, [pc, #492]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e00b      	b.n	8001080 <HAL_RCC_OscConfig+0xb0>
 8001068:	4b78      	ldr	r3, [pc, #480]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a77      	ldr	r2, [pc, #476]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 800106e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b75      	ldr	r3, [pc, #468]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a74      	ldr	r2, [pc, #464]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 800107a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800107e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d013      	beq.n	80010b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001088:	f7ff fd10 	bl	8000aac <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001090:	f7ff fd0c 	bl	8000aac <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b64      	cmp	r3, #100	@ 0x64
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e29e      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010a2:	4b6a      	ldr	r3, [pc, #424]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f0      	beq.n	8001090 <HAL_RCC_OscConfig+0xc0>
 80010ae:	e014      	b.n	80010da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b0:	f7ff fcfc 	bl	8000aac <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b8:	f7ff fcf8 	bl	8000aac <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b64      	cmp	r3, #100	@ 0x64
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e28a      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ca:	4b60      	ldr	r3, [pc, #384]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f0      	bne.n	80010b8 <HAL_RCC_OscConfig+0xe8>
 80010d6:	e000      	b.n	80010da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d075      	beq.n	80011d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010e6:	4b59      	ldr	r3, [pc, #356]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010f0:	4b56      	ldr	r3, [pc, #344]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	2b0c      	cmp	r3, #12
 80010fe:	d102      	bne.n	8001106 <HAL_RCC_OscConfig+0x136>
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d002      	beq.n	800110c <HAL_RCC_OscConfig+0x13c>
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	2b04      	cmp	r3, #4
 800110a:	d11f      	bne.n	800114c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800110c:	4b4f      	ldr	r3, [pc, #316]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_OscConfig+0x154>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e25d      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	4b49      	ldr	r3, [pc, #292]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	061b      	lsls	r3, r3, #24
 8001132:	4946      	ldr	r1, [pc, #280]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001138:	4b45      	ldr	r3, [pc, #276]	@ (8001250 <HAL_RCC_OscConfig+0x280>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fbb7 	bl	80008b0 <HAL_InitTick>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d043      	beq.n	80011d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e249      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d023      	beq.n	800119c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001154:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a3c      	ldr	r2, [pc, #240]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 800115a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800115e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001160:	f7ff fca4 	bl	8000aac <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001168:	f7ff fca0 	bl	8000aac <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e232      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800117a:	4b34      	ldr	r3, [pc, #208]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001186:	4b31      	ldr	r3, [pc, #196]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	061b      	lsls	r3, r3, #24
 8001194:	492d      	ldr	r1, [pc, #180]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
 800119a:	e01a      	b.n	80011d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119c:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a2a      	ldr	r2, [pc, #168]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 80011a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fc80 	bl	8000aac <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc7c 	bl	8000aac <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e20e      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011c2:	4b22      	ldr	r3, [pc, #136]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x1e0>
 80011ce:	e000      	b.n	80011d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d041      	beq.n	8001262 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d01c      	beq.n	8001220 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e6:	4b19      	ldr	r3, [pc, #100]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 80011e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011ec:	4a17      	ldr	r2, [pc, #92]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f6:	f7ff fc59 	bl	8000aac <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fe:	f7ff fc55 	bl	8000aac <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e1e7      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0ef      	beq.n	80011fe <HAL_RCC_OscConfig+0x22e>
 800121e:	e020      	b.n	8001262 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001220:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001226:	4a09      	ldr	r2, [pc, #36]	@ (800124c <HAL_RCC_OscConfig+0x27c>)
 8001228:	f023 0301 	bic.w	r3, r3, #1
 800122c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001230:	f7ff fc3c 	bl	8000aac <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001236:	e00d      	b.n	8001254 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc38 	bl	8000aac <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d906      	bls.n	8001254 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1ca      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001254:	4b8c      	ldr	r3, [pc, #560]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1ea      	bne.n	8001238 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80a6 	beq.w	80013bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001274:	4b84      	ldr	r3, [pc, #528]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_RCC_OscConfig+0x2b4>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <HAL_RCC_OscConfig+0x2b6>
 8001284:	2300      	movs	r3, #0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00d      	beq.n	80012a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b7f      	ldr	r3, [pc, #508]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128e:	4a7e      	ldr	r2, [pc, #504]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001294:	6593      	str	r3, [r2, #88]	@ 0x58
 8001296:	4b7c      	ldr	r3, [pc, #496]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012a2:	2301      	movs	r3, #1
 80012a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a6:	4b79      	ldr	r3, [pc, #484]	@ (800148c <HAL_RCC_OscConfig+0x4bc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d118      	bne.n	80012e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012b2:	4b76      	ldr	r3, [pc, #472]	@ (800148c <HAL_RCC_OscConfig+0x4bc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a75      	ldr	r2, [pc, #468]	@ (800148c <HAL_RCC_OscConfig+0x4bc>)
 80012b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012be:	f7ff fbf5 	bl	8000aac <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c6:	f7ff fbf1 	bl	8000aac <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e183      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d8:	4b6c      	ldr	r3, [pc, #432]	@ (800148c <HAL_RCC_OscConfig+0x4bc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d108      	bne.n	80012fe <HAL_RCC_OscConfig+0x32e>
 80012ec:	4b66      	ldr	r3, [pc, #408]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 80012ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012f2:	4a65      	ldr	r2, [pc, #404]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012fc:	e024      	b.n	8001348 <HAL_RCC_OscConfig+0x378>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b05      	cmp	r3, #5
 8001304:	d110      	bne.n	8001328 <HAL_RCC_OscConfig+0x358>
 8001306:	4b60      	ldr	r3, [pc, #384]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800130c:	4a5e      	ldr	r2, [pc, #376]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001316:	4b5c      	ldr	r3, [pc, #368]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800131c:	4a5a      	ldr	r2, [pc, #360]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001326:	e00f      	b.n	8001348 <HAL_RCC_OscConfig+0x378>
 8001328:	4b57      	ldr	r3, [pc, #348]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 800132a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800132e:	4a56      	ldr	r2, [pc, #344]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001338:	4b53      	ldr	r3, [pc, #332]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 800133a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800133e:	4a52      	ldr	r2, [pc, #328]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001340:	f023 0304 	bic.w	r3, r3, #4
 8001344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d016      	beq.n	800137e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fbac 	bl	8000aac <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001356:	e00a      	b.n	800136e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001358:	f7ff fba8 	bl	8000aac <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001366:	4293      	cmp	r3, r2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e138      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800136e:	4b46      	ldr	r3, [pc, #280]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0ed      	beq.n	8001358 <HAL_RCC_OscConfig+0x388>
 800137c:	e015      	b.n	80013aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137e:	f7ff fb95 	bl	8000aac <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fb91 	bl	8000aac <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001394:	4293      	cmp	r3, r2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e121      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800139c:	4b3a      	ldr	r3, [pc, #232]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 800139e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1ed      	bne.n	8001386 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013aa:	7ffb      	ldrb	r3, [r7, #31]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d105      	bne.n	80013bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b0:	4b35      	ldr	r3, [pc, #212]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b4:	4a34      	ldr	r2, [pc, #208]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 80013b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0320 	and.w	r3, r3, #32
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d03c      	beq.n	8001442 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d01c      	beq.n	800140a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 80013d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80013d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e0:	f7ff fb64 	bl	8000aac <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e8:	f7ff fb60 	bl	8000aac <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e0f2      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013fa:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 80013fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0ef      	beq.n	80013e8 <HAL_RCC_OscConfig+0x418>
 8001408:	e01b      	b.n	8001442 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800140a:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 800140c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001410:	4a1d      	ldr	r2, [pc, #116]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141a:	f7ff fb47 	bl	8000aac <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001422:	f7ff fb43 	bl	8000aac <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e0d5      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001434:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001436:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1ef      	bne.n	8001422 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80c9 	beq.w	80015de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800144c:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	2b0c      	cmp	r3, #12
 8001456:	f000 8083 	beq.w	8001560 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d15e      	bne.n	8001520 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a08      	ldr	r2, [pc, #32]	@ (8001488 <HAL_RCC_OscConfig+0x4b8>)
 8001468:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800146c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fb1d 	bl	8000aac <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001474:	e00c      	b.n	8001490 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fb19 	bl	8000aac <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d905      	bls.n	8001490 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e0ab      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
 8001488:	40021000 	.word	0x40021000
 800148c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001490:	4b55      	ldr	r3, [pc, #340]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ec      	bne.n	8001476 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800149c:	4b52      	ldr	r3, [pc, #328]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	4b52      	ldr	r3, [pc, #328]	@ (80015ec <HAL_RCC_OscConfig+0x61c>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6a11      	ldr	r1, [r2, #32]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014ac:	3a01      	subs	r2, #1
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	4311      	orrs	r1, r2
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80014b6:	0212      	lsls	r2, r2, #8
 80014b8:	4311      	orrs	r1, r2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80014be:	0852      	lsrs	r2, r2, #1
 80014c0:	3a01      	subs	r2, #1
 80014c2:	0552      	lsls	r2, r2, #21
 80014c4:	4311      	orrs	r1, r2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80014ca:	0852      	lsrs	r2, r2, #1
 80014cc:	3a01      	subs	r2, #1
 80014ce:	0652      	lsls	r2, r2, #25
 80014d0:	4311      	orrs	r1, r2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80014d6:	06d2      	lsls	r2, r2, #27
 80014d8:	430a      	orrs	r2, r1
 80014da:	4943      	ldr	r1, [pc, #268]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e0:	4b41      	ldr	r3, [pc, #260]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a40      	ldr	r2, [pc, #256]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 80014e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014ec:	4b3e      	ldr	r3, [pc, #248]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a3d      	ldr	r2, [pc, #244]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 80014f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fad8 	bl	8000aac <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001500:	f7ff fad4 	bl	8000aac <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e066      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001512:	4b35      	ldr	r3, [pc, #212]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x530>
 800151e:	e05e      	b.n	80015de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001520:	4b31      	ldr	r3, [pc, #196]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a30      	ldr	r2, [pc, #192]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 8001526:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800152a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fabe 	bl	8000aac <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff faba 	bl	8000aac <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e04c      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001546:	4b28      	ldr	r3, [pc, #160]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001552:	4b25      	ldr	r3, [pc, #148]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	4924      	ldr	r1, [pc, #144]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 8001558:	4b25      	ldr	r3, [pc, #148]	@ (80015f0 <HAL_RCC_OscConfig+0x620>)
 800155a:	4013      	ands	r3, r2
 800155c:	60cb      	str	r3, [r1, #12]
 800155e:	e03e      	b.n	80015de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e039      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800156c:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <HAL_RCC_OscConfig+0x618>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f003 0203 	and.w	r2, r3, #3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	429a      	cmp	r2, r3
 800157e:	d12c      	bne.n	80015da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158a:	3b01      	subs	r3, #1
 800158c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d123      	bne.n	80015da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d11b      	bne.n	80015da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d113      	bne.n	80015da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	3b01      	subs	r3, #1
 80015c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d109      	bne.n	80015da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	3b01      	subs	r3, #1
 80015d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000
 80015ec:	019f800c 	.word	0x019f800c
 80015f0:	feeefffc 	.word	0xfeeefffc

080015f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e11e      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800160c:	4b91      	ldr	r3, [pc, #580]	@ (8001854 <HAL_RCC_ClockConfig+0x260>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d910      	bls.n	800163c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b8e      	ldr	r3, [pc, #568]	@ (8001854 <HAL_RCC_ClockConfig+0x260>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 020f 	bic.w	r2, r3, #15
 8001622:	498c      	ldr	r1, [pc, #560]	@ (8001854 <HAL_RCC_ClockConfig+0x260>)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b8a      	ldr	r3, [pc, #552]	@ (8001854 <HAL_RCC_ClockConfig+0x260>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e106      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d073      	beq.n	8001730 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d129      	bne.n	80016a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001650:	4b81      	ldr	r3, [pc, #516]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0f4      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001660:	f000 f9ba 	bl	80019d8 <RCC_GetSysClockFreqFromPLLSource>
 8001664:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4a7c      	ldr	r2, [pc, #496]	@ (800185c <HAL_RCC_ClockConfig+0x268>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d93f      	bls.n	80016ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800166e:	4b7a      	ldr	r3, [pc, #488]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001682:	2b00      	cmp	r3, #0
 8001684:	d033      	beq.n	80016ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800168a:	2b00      	cmp	r3, #0
 800168c:	d12f      	bne.n	80016ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800168e:	4b72      	ldr	r3, [pc, #456]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001696:	4a70      	ldr	r2, [pc, #448]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800169e:	2380      	movs	r3, #128	@ 0x80
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e024      	b.n	80016ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0c6      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016bc:	4b66      	ldr	r3, [pc, #408]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0be      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80016cc:	f000 f8ce 	bl	800186c <HAL_RCC_GetSysClockFreq>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4a61      	ldr	r2, [pc, #388]	@ (800185c <HAL_RCC_ClockConfig+0x268>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d909      	bls.n	80016ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016da:	4b5f      	ldr	r3, [pc, #380]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80016e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f023 0203 	bic.w	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4957      	ldr	r1, [pc, #348]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001700:	f7ff f9d4 	bl	8000aac <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	e00a      	b.n	800171e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f7ff f9d0 	bl	8000aac <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e095      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	4b4e      	ldr	r3, [pc, #312]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 020c 	and.w	r2, r3, #12
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	429a      	cmp	r2, r3
 800172e:	d1eb      	bne.n	8001708 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d023      	beq.n	8001784 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b43      	ldr	r3, [pc, #268]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a42      	ldr	r2, [pc, #264]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 800174e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001752:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001760:	4b3d      	ldr	r3, [pc, #244]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001768:	4a3b      	ldr	r2, [pc, #236]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 800176a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800176e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b39      	ldr	r3, [pc, #228]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4936      	ldr	r1, [pc, #216]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
 8001782:	e008      	b.n	8001796 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b80      	cmp	r3, #128	@ 0x80
 8001788:	d105      	bne.n	8001796 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800178a:	4b33      	ldr	r3, [pc, #204]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	4a32      	ldr	r2, [pc, #200]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001790:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001794:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001796:	4b2f      	ldr	r3, [pc, #188]	@ (8001854 <HAL_RCC_ClockConfig+0x260>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d21d      	bcs.n	80017e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <HAL_RCC_ClockConfig+0x260>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 020f 	bic.w	r2, r3, #15
 80017ac:	4929      	ldr	r1, [pc, #164]	@ (8001854 <HAL_RCC_ClockConfig+0x260>)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017b4:	f7ff f97a 	bl	8000aac <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017bc:	f7ff f976 	bl	8000aac <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e03b      	b.n	800184a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <HAL_RCC_ClockConfig+0x260>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1ed      	bne.n	80017bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4917      	ldr	r1, [pc, #92]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180a:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	490f      	ldr	r1, [pc, #60]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800181e:	f000 f825 	bl	800186c <HAL_RCC_GetSysClockFreq>
 8001822:	4602      	mov	r2, r0
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <HAL_RCC_ClockConfig+0x264>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	490c      	ldr	r1, [pc, #48]	@ (8001860 <HAL_RCC_ClockConfig+0x26c>)
 8001830:	5ccb      	ldrb	r3, [r1, r3]
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <HAL_RCC_ClockConfig+0x270>)
 800183c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_RCC_ClockConfig+0x274>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f834 	bl	80008b0 <HAL_InitTick>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40022000 	.word	0x40022000
 8001858:	40021000 	.word	0x40021000
 800185c:	04c4b400 	.word	0x04c4b400
 8001860:	08005d9c 	.word	0x08005d9c
 8001864:	20000000 	.word	0x20000000
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001872:	4b2c      	ldr	r3, [pc, #176]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d102      	bne.n	8001884 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800187e:	4b2a      	ldr	r3, [pc, #168]	@ (8001928 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	e047      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001884:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d102      	bne.n	8001896 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001890:	4b26      	ldr	r3, [pc, #152]	@ (800192c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	e03e      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001896:	4b23      	ldr	r3, [pc, #140]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d136      	bne.n	8001910 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018a2:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3301      	adds	r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d10c      	bne.n	80018da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018c0:	4a1a      	ldr	r2, [pc, #104]	@ (800192c <HAL_RCC_GetSysClockFreq+0xc0>)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	4a16      	ldr	r2, [pc, #88]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ca:	68d2      	ldr	r2, [r2, #12]
 80018cc:	0a12      	lsrs	r2, r2, #8
 80018ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
      break;
 80018d8:	e00c      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018da:	4a13      	ldr	r2, [pc, #76]	@ (8001928 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4a10      	ldr	r2, [pc, #64]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018e4:	68d2      	ldr	r2, [r2, #12]
 80018e6:	0a12      	lsrs	r2, r2, #8
 80018e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	617b      	str	r3, [r7, #20]
      break;
 80018f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0e5b      	lsrs	r3, r3, #25
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	e001      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001914:	693b      	ldr	r3, [r7, #16]
}
 8001916:	4618      	mov	r0, r3
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	00f42400 	.word	0x00f42400
 800192c:	007a1200 	.word	0x007a1200

08001930 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <HAL_RCC_GetHCLKFreq+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800194c:	f7ff fff0 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001950:	4602      	mov	r2, r0
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4904      	ldr	r1, [pc, #16]	@ (8001970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800195e:	5ccb      	ldrb	r3, [r1, r3]
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	08005dac 	.word	0x08005dac

08001974 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	220f      	movs	r2, #15
 8001982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001990:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800199c:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <HAL_RCC_GetClockConfig+0x60>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 020f 	and.w	r2, r3, #15
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	601a      	str	r2, [r3, #0]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40022000 	.word	0x40022000

080019d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019de:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3301      	adds	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d10c      	bne.n	8001a16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019fc:	4a17      	ldr	r2, [pc, #92]	@ (8001a5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a04:	4a14      	ldr	r2, [pc, #80]	@ (8001a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a06:	68d2      	ldr	r2, [r2, #12]
 8001a08:	0a12      	lsrs	r2, r2, #8
 8001a0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	617b      	str	r3, [r7, #20]
    break;
 8001a14:	e00c      	b.n	8001a30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a16:	4a12      	ldr	r2, [pc, #72]	@ (8001a60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a20:	68d2      	ldr	r2, [r2, #12]
 8001a22:	0a12      	lsrs	r2, r2, #8
 8001a24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	617b      	str	r3, [r7, #20]
    break;
 8001a2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0e5b      	lsrs	r3, r3, #25
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001a4a:	687b      	ldr	r3, [r7, #4]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	007a1200 	.word	0x007a1200
 8001a60:	00f42400 	.word	0x00f42400

08001a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a70:	2300      	movs	r3, #0
 8001a72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 8098 	beq.w	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b43      	ldr	r3, [pc, #268]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10d      	bne.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b40      	ldr	r3, [pc, #256]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a96:	4a3f      	ldr	r2, [pc, #252]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aae:	4b3a      	ldr	r3, [pc, #232]	@ (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a39      	ldr	r2, [pc, #228]	@ (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001aba:	f7fe fff7 	bl	8000aac <HAL_GetTick>
 8001abe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ac0:	e009      	b.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac2:	f7fe fff3 	bl	8000aac <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d902      	bls.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	74fb      	strb	r3, [r7, #19]
        break;
 8001ad4:	e005      	b.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ad6:	4b30      	ldr	r3, [pc, #192]	@ (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0ef      	beq.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ae2:	7cfb      	ldrb	r3, [r7, #19]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d159      	bne.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001af2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01e      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d019      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b04:	4b23      	ldr	r3, [pc, #140]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b10:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b16:	4a1f      	ldr	r2, [pc, #124]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b20:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b26:	4a1b      	ldr	r2, [pc, #108]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b30:	4a18      	ldr	r2, [pc, #96]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d016      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7fe ffb3 	bl	8000aac <HAL_GetTick>
 8001b46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b48:	e00b      	b.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7fe ffaf 	bl	8000aac <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d902      	bls.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	74fb      	strb	r3, [r7, #19]
            break;
 8001b60:	e006      	b.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0ec      	beq.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001b70:	7cfb      	ldrb	r3, [r7, #19]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10b      	bne.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	4903      	ldr	r1, [pc, #12]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b8e:	7cfb      	ldrb	r3, [r7, #19]
 8001b90:	74bb      	strb	r3, [r7, #18]
 8001b92:	e005      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b9c:	7cfb      	ldrb	r3, [r7, #19]
 8001b9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ba0:	7c7b      	ldrb	r3, [r7, #17]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d105      	bne.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba6:	4ba7      	ldr	r3, [pc, #668]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	4aa6      	ldr	r2, [pc, #664]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00a      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bbe:	4ba1      	ldr	r3, [pc, #644]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bc4:	f023 0203 	bic.w	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	499d      	ldr	r1, [pc, #628]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001be0:	4b98      	ldr	r3, [pc, #608]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001be6:	f023 020c 	bic.w	r2, r3, #12
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	4995      	ldr	r1, [pc, #596]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00a      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c02:	4b90      	ldr	r3, [pc, #576]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	498c      	ldr	r1, [pc, #560]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00a      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c24:	4b87      	ldr	r3, [pc, #540]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	4984      	ldr	r1, [pc, #528]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00a      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c46:	4b7f      	ldr	r3, [pc, #508]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	497b      	ldr	r1, [pc, #492]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00a      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c68:	4b76      	ldr	r3, [pc, #472]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	4973      	ldr	r1, [pc, #460]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00a      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	496a      	ldr	r1, [pc, #424]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00a      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cac:	4b65      	ldr	r3, [pc, #404]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4962      	ldr	r1, [pc, #392]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00a      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001cce:	4b5d      	ldr	r3, [pc, #372]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	4959      	ldr	r1, [pc, #356]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00a      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cf0:	4b54      	ldr	r3, [pc, #336]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cf6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	4951      	ldr	r1, [pc, #324]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d015      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d12:	4b4c      	ldr	r3, [pc, #304]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d18:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	4948      	ldr	r1, [pc, #288]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d30:	d105      	bne.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d32:	4b44      	ldr	r3, [pc, #272]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	4a43      	ldr	r2, [pc, #268]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d3c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d015      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d58:	493a      	ldr	r1, [pc, #232]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d68:	d105      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d6a:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	4a35      	ldr	r2, [pc, #212]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d74:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d015      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001d82:	4b30      	ldr	r3, [pc, #192]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d88:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d90:	492c      	ldr	r1, [pc, #176]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da0:	d105      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001da2:	4b28      	ldr	r3, [pc, #160]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4a27      	ldr	r2, [pc, #156]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dac:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d015      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dba:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dc8:	491e      	ldr	r1, [pc, #120]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001dd8:	d105      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dda:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001de0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001de4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d015      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001df2:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e00:	4910      	ldr	r1, [pc, #64]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001e10:	d105      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	4a0b      	ldr	r2, [pc, #44]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e1c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d018      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e30:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	4902      	ldr	r1, [pc, #8]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	e001      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001e50:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4a20      	ldr	r2, [pc, #128]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d015      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001e68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	4918      	ldr	r1, [pc, #96]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e86:	d105      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e92:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d015      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ea6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eae:	490a      	ldr	r1, [pc, #40]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ebe:	d105      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ec0:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001eca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001ecc:	7cbb      	ldrb	r3, [r7, #18]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000

08001edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e049      	b.n	8001f82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f841 	bl	8001f8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3304      	adds	r3, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f000 fa28 	bl	8002370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d001      	beq.n	8001fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e04f      	b.n	8002058 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a23      	ldr	r2, [pc, #140]	@ (8002064 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01d      	beq.n	8002016 <HAL_TIM_Base_Start_IT+0x76>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fe2:	d018      	beq.n	8002016 <HAL_TIM_Base_Start_IT+0x76>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8002068 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_TIM_Base_Start_IT+0x76>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800206c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00e      	beq.n	8002016 <HAL_TIM_Base_Start_IT+0x76>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8002070 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d009      	beq.n	8002016 <HAL_TIM_Base_Start_IT+0x76>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <HAL_TIM_Base_Start_IT+0xd4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d004      	beq.n	8002016 <HAL_TIM_Base_Start_IT+0x76>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	@ (8002078 <HAL_TIM_Base_Start_IT+0xd8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d115      	bne.n	8002042 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4b17      	ldr	r3, [pc, #92]	@ (800207c <HAL_TIM_Base_Start_IT+0xdc>)
 800201e:	4013      	ands	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b06      	cmp	r3, #6
 8002026:	d015      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0xb4>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202e:	d011      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002040:	e008      	b.n	8002054 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e000      	b.n	8002056 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002054:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	40012c00 	.word	0x40012c00
 8002068:	40000400 	.word	0x40000400
 800206c:	40000800 	.word	0x40000800
 8002070:	40013400 	.word	0x40013400
 8002074:	40014000 	.word	0x40014000
 8002078:	40015000 	.word	0x40015000
 800207c:	00010007 	.word	0x00010007

08002080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d020      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0202 	mvn.w	r2, #2
 80020b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f931 	bl	8002332 <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f923 	bl	800231e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f934 	bl	8002346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d020      	beq.n	8002130 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01b      	beq.n	8002130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0204 	mvn.w	r2, #4
 8002100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2202      	movs	r2, #2
 8002106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f90b 	bl	8002332 <HAL_TIM_IC_CaptureCallback>
 800211c:	e005      	b.n	800212a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f8fd 	bl	800231e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f90e 	bl	8002346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d020      	beq.n	800217c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01b      	beq.n	800217c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0208 	mvn.w	r2, #8
 800214c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2204      	movs	r2, #4
 8002152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8e5 	bl	8002332 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8d7 	bl	800231e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f8e8 	bl	8002346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d020      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01b      	beq.n	80021c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0210 	mvn.w	r2, #16
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2208      	movs	r2, #8
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8bf 	bl	8002332 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8b1 	bl	800231e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f8c2 	bl	8002346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00c      	beq.n	80021ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0201 	mvn.w	r2, #1
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7fe fb02 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d104      	bne.n	8002200 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00c      	beq.n	800221a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f95f 	bl	80024d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00c      	beq.n	800223e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f957 	bl	80024ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00c      	beq.n	8002262 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800225a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f87c 	bl	800235a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00c      	beq.n	8002286 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f06f 0220 	mvn.w	r2, #32
 800227e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f91f 	bl	80024c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00c      	beq.n	80022aa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d007      	beq.n	80022aa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80022a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f92b 	bl	8002500 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00c      	beq.n	80022ce <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80022c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f923 	bl	8002514 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00c      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80022ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f91b 	bl	8002528 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00c      	beq.n	8002316 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800230e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f913 	bl	800253c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a48      	ldr	r2, [pc, #288]	@ (80024a4 <TIM_Base_SetConfig+0x134>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d013      	beq.n	80023b0 <TIM_Base_SetConfig+0x40>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800238e:	d00f      	beq.n	80023b0 <TIM_Base_SetConfig+0x40>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a45      	ldr	r2, [pc, #276]	@ (80024a8 <TIM_Base_SetConfig+0x138>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00b      	beq.n	80023b0 <TIM_Base_SetConfig+0x40>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a44      	ldr	r2, [pc, #272]	@ (80024ac <TIM_Base_SetConfig+0x13c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d007      	beq.n	80023b0 <TIM_Base_SetConfig+0x40>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a43      	ldr	r2, [pc, #268]	@ (80024b0 <TIM_Base_SetConfig+0x140>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d003      	beq.n	80023b0 <TIM_Base_SetConfig+0x40>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a42      	ldr	r2, [pc, #264]	@ (80024b4 <TIM_Base_SetConfig+0x144>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d108      	bne.n	80023c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a37      	ldr	r2, [pc, #220]	@ (80024a4 <TIM_Base_SetConfig+0x134>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01f      	beq.n	800240a <TIM_Base_SetConfig+0x9a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d0:	d01b      	beq.n	800240a <TIM_Base_SetConfig+0x9a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a34      	ldr	r2, [pc, #208]	@ (80024a8 <TIM_Base_SetConfig+0x138>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d017      	beq.n	800240a <TIM_Base_SetConfig+0x9a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a33      	ldr	r2, [pc, #204]	@ (80024ac <TIM_Base_SetConfig+0x13c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <TIM_Base_SetConfig+0x9a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a32      	ldr	r2, [pc, #200]	@ (80024b0 <TIM_Base_SetConfig+0x140>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00f      	beq.n	800240a <TIM_Base_SetConfig+0x9a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a32      	ldr	r2, [pc, #200]	@ (80024b8 <TIM_Base_SetConfig+0x148>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00b      	beq.n	800240a <TIM_Base_SetConfig+0x9a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a31      	ldr	r2, [pc, #196]	@ (80024bc <TIM_Base_SetConfig+0x14c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <TIM_Base_SetConfig+0x9a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a30      	ldr	r2, [pc, #192]	@ (80024c0 <TIM_Base_SetConfig+0x150>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d003      	beq.n	800240a <TIM_Base_SetConfig+0x9a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a2b      	ldr	r2, [pc, #172]	@ (80024b4 <TIM_Base_SetConfig+0x144>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d108      	bne.n	800241c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a18      	ldr	r2, [pc, #96]	@ (80024a4 <TIM_Base_SetConfig+0x134>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <TIM_Base_SetConfig+0x100>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a19      	ldr	r2, [pc, #100]	@ (80024b0 <TIM_Base_SetConfig+0x140>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00f      	beq.n	8002470 <TIM_Base_SetConfig+0x100>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a19      	ldr	r2, [pc, #100]	@ (80024b8 <TIM_Base_SetConfig+0x148>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00b      	beq.n	8002470 <TIM_Base_SetConfig+0x100>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a18      	ldr	r2, [pc, #96]	@ (80024bc <TIM_Base_SetConfig+0x14c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d007      	beq.n	8002470 <TIM_Base_SetConfig+0x100>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a17      	ldr	r2, [pc, #92]	@ (80024c0 <TIM_Base_SetConfig+0x150>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d003      	beq.n	8002470 <TIM_Base_SetConfig+0x100>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <TIM_Base_SetConfig+0x144>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d103      	bne.n	8002478 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f023 0201 	bic.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	611a      	str	r2, [r3, #16]
  }
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40000800 	.word	0x40000800
 80024b0:	40013400 	.word	0x40013400
 80024b4:	40015000 	.word	0x40015000
 80024b8:	40014000 	.word	0x40014000
 80024bc:	40014400 	.word	0x40014400
 80024c0:	40014800 	.word	0x40014800

080024c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002550:	b480      	push	{r7}
 8002552:	b08b      	sub	sp, #44	@ 0x2c
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	613b      	str	r3, [r7, #16]
  return result;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002576:	2320      	movs	r3, #32
 8002578:	e003      	b.n	8002582 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2103      	movs	r1, #3
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	401a      	ands	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	61fb      	str	r3, [r7, #28]
  return result;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80025a4:	2320      	movs	r3, #32
 80025a6:	e003      	b.n	80025b0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	431a      	orrs	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	601a      	str	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	372c      	adds	r7, #44	@ 0x2c
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	43db      	mvns	r3, r3
 80025de:	401a      	ands	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b08b      	sub	sp, #44	@ 0x2c
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	613b      	str	r3, [r7, #16]
  return result;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e003      	b.n	800262c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2103      	movs	r1, #3
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	401a      	ands	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	61fb      	str	r3, [r7, #28]
  return result;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800264e:	2320      	movs	r3, #32
 8002650:	e003      	b.n	800265a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	431a      	orrs	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002668:	bf00      	nop
 800266a:	372c      	adds	r7, #44	@ 0x2c
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002674:	b480      	push	{r7}
 8002676:	b08b      	sub	sp, #44	@ 0x2c
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	613b      	str	r3, [r7, #16]
  return result;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e003      	b.n	80026a6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2103      	movs	r1, #3
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	401a      	ands	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	61fb      	str	r3, [r7, #28]
  return result;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80026c8:	2320      	movs	r3, #32
 80026ca:	e003      	b.n	80026d4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	60da      	str	r2, [r3, #12]
}
 80026e2:	bf00      	nop
 80026e4:	372c      	adds	r7, #44	@ 0x2c
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b08b      	sub	sp, #44	@ 0x2c
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a1a      	ldr	r2, [r3, #32]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	613b      	str	r3, [r7, #16]
  return result;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e003      	b.n	8002720 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	210f      	movs	r1, #15
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	401a      	ands	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	61fb      	str	r3, [r7, #28]
  return result;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e003      	b.n	800274e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	431a      	orrs	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800275c:	bf00      	nop
 800275e:	372c      	adds	r7, #44	@ 0x2c
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002768:	b480      	push	{r7}
 800276a:	b08b      	sub	sp, #44	@ 0x2c
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	613b      	str	r3, [r7, #16]
  return result;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002790:	2320      	movs	r3, #32
 8002792:	e003      	b.n	800279c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	210f      	movs	r1, #15
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	401a      	ands	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	61fb      	str	r3, [r7, #28]
  return result;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e003      	b.n	80027cc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80027c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	431a      	orrs	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80027da:	bf00      	nop
 80027dc:	372c      	adds	r7, #44	@ 0x2c
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b088      	sub	sp, #32
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	60fb      	str	r3, [r7, #12]
  return result;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <LL_GPIO_Init+0x26>
    return 32U;
 8002808:	2320      	movs	r3, #32
 800280a:	e003      	b.n	8002814 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002816:	e048      	b.n	80028aa <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d03a      	beq.n	80028a4 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d003      	beq.n	800283e <LL_GPIO_Init+0x58>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d10e      	bne.n	800285c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	461a      	mov	r2, r3
 8002844:	69b9      	ldr	r1, [r7, #24]
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fed7 	bl	80025fa <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6819      	ldr	r1, [r3, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	461a      	mov	r2, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff feb7 	bl	80025ca <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	461a      	mov	r2, r3
 8002862:	69b9      	ldr	r1, [r7, #24]
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff05 	bl	8002674 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d111      	bne.n	8002896 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2bff      	cmp	r3, #255	@ 0xff
 8002876:	d807      	bhi.n	8002888 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	461a      	mov	r2, r3
 800287e:	69b9      	ldr	r1, [r7, #24]
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff34 	bl	80026ee <LL_GPIO_SetAFPin_0_7>
 8002886:	e006      	b.n	8002896 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	461a      	mov	r2, r3
 800288e:	69b9      	ldr	r1, [r7, #24]
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ff69 	bl	8002768 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	461a      	mov	r2, r3
 800289c:	69b9      	ldr	r1, [r7, #24]
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fe56 	bl	8002550 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	3301      	adds	r3, #1
 80028a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1af      	bne.n	8002818 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80028c8:	4b07      	ldr	r3, [pc, #28]	@ (80028e8 <LL_RCC_HSI_IsReady+0x24>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d4:	d101      	bne.n	80028da <LL_RCC_HSI_IsReady+0x16>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <LL_RCC_HSI_IsReady+0x18>
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000

080028ec <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028f0:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <LL_RCC_LSE_IsReady+0x24>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d101      	bne.n	8002902 <LL_RCC_LSE_IsReady+0x16>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <LL_RCC_LSE_IsReady+0x18>
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000

08002914 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002918:	4b04      	ldr	r3, [pc, #16]	@ (800292c <LL_RCC_GetSysClkSource+0x18>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000

08002930 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <LL_RCC_GetAHBPrescaler+0x18>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000

0800294c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002950:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000

08002968 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <LL_RCC_GetAPB2Prescaler+0x18>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000

08002984 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800298c:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <LL_RCC_GetUSARTClockSource+0x24>)
 800298e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	401a      	ands	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	4313      	orrs	r3, r2
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40021000 	.word	0x40021000

080029ac <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <LL_RCC_GetUARTClockSource+0x24>)
 80029b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	401a      	ands	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	041b      	lsls	r3, r3, #16
 80029c2:	4313      	orrs	r3, r2
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40021000 	.word	0x40021000

080029d4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <LL_RCC_PLL_GetMainSource+0x18>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0303 	and.w	r3, r3, #3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000

080029f0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029f4:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <LL_RCC_PLL_GetN+0x18>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	0a1b      	lsrs	r3, r3, #8
 80029fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	40021000 	.word	0x40021000

08002a0c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002a10:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <LL_RCC_PLL_GetR+0x18>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000

08002a28 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <LL_RCC_PLL_GetDivider+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000

08002a44 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d132      	bne.n	8002abc <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ff94 	bl	8002984 <LL_RCC_GetUSARTClockSource>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8002a62:	d016      	beq.n	8002a92 <LL_RCC_GetUSARTClockFreq+0x4e>
 8002a64:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8002a68:	d81c      	bhi.n	8002aa4 <LL_RCC_GetUSARTClockFreq+0x60>
 8002a6a:	4a51      	ldr	r2, [pc, #324]	@ (8002bb0 <LL_RCC_GetUSARTClockFreq+0x16c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d003      	beq.n	8002a78 <LL_RCC_GetUSARTClockFreq+0x34>
 8002a70:	4a50      	ldr	r2, [pc, #320]	@ (8002bb4 <LL_RCC_GetUSARTClockFreq+0x170>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <LL_RCC_GetUSARTClockFreq+0x3c>
 8002a76:	e015      	b.n	8002aa4 <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002a78:	f000 f92e 	bl	8002cd8 <RCC_GetSystemClockFreq>
 8002a7c:	60f8      	str	r0, [r7, #12]
        break;
 8002a7e:	e092      	b.n	8002ba6 <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002a80:	f7ff ff20 	bl	80028c4 <LL_RCC_HSI_IsReady>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8082 	beq.w	8002b90 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb8 <LL_RCC_GetUSARTClockFreq+0x174>)
 8002a8e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002a90:	e07e      	b.n	8002b90 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002a92:	f7ff ff2b 	bl	80028ec <LL_RCC_LSE_IsReady>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d07b      	beq.n	8002b94 <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 8002a9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aa0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002aa2:	e077      	b.n	8002b94 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002aa4:	f000 f918 	bl	8002cd8 <RCC_GetSystemClockFreq>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f93a 	bl	8002d24 <RCC_GetHCLKClockFreq>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f964 	bl	8002d80 <RCC_GetPCLK2ClockFreq>
 8002ab8:	60f8      	str	r0, [r7, #12]
        break;
 8002aba:	e074      	b.n	8002ba6 <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d131      	bne.n	8002b26 <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ff5e 	bl	8002984 <LL_RCC_GetUSARTClockSource>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8002ace:	d015      	beq.n	8002afc <LL_RCC_GetUSARTClockFreq+0xb8>
 8002ad0:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8002ad4:	d81b      	bhi.n	8002b0e <LL_RCC_GetUSARTClockFreq+0xca>
 8002ad6:	4a39      	ldr	r2, [pc, #228]	@ (8002bbc <LL_RCC_GetUSARTClockFreq+0x178>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d003      	beq.n	8002ae4 <LL_RCC_GetUSARTClockFreq+0xa0>
 8002adc:	4a38      	ldr	r2, [pc, #224]	@ (8002bc0 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <LL_RCC_GetUSARTClockFreq+0xa8>
 8002ae2:	e014      	b.n	8002b0e <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002ae4:	f000 f8f8 	bl	8002cd8 <RCC_GetSystemClockFreq>
 8002ae8:	60f8      	str	r0, [r7, #12]
        break;
 8002aea:	e05c      	b.n	8002ba6 <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002aec:	f7ff feea 	bl	80028c4 <LL_RCC_HSI_IsReady>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d050      	beq.n	8002b98 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 8002af6:	4b30      	ldr	r3, [pc, #192]	@ (8002bb8 <LL_RCC_GetUSARTClockFreq+0x174>)
 8002af8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002afa:	e04d      	b.n	8002b98 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002afc:	f7ff fef6 	bl	80028ec <LL_RCC_LSE_IsReady>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d04a      	beq.n	8002b9c <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 8002b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b0a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002b0c:	e046      	b.n	8002b9c <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002b0e:	f000 f8e3 	bl	8002cd8 <RCC_GetSystemClockFreq>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f905 	bl	8002d24 <RCC_GetHCLKClockFreq>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f919 	bl	8002d54 <RCC_GetPCLK1ClockFreq>
 8002b22:	60f8      	str	r0, [r7, #12]
        break;
 8002b24:	e03f      	b.n	8002ba6 <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b30      	cmp	r3, #48	@ 0x30
 8002b2a:	d13c      	bne.n	8002ba6 <LL_RCC_GetUSARTClockFreq+0x162>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff29 	bl	8002984 <LL_RCC_GetUSARTClockSource>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8002b38:	d015      	beq.n	8002b66 <LL_RCC_GetUSARTClockFreq+0x122>
 8002b3a:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8002b3e:	d81b      	bhi.n	8002b78 <LL_RCC_GetUSARTClockFreq+0x134>
 8002b40:	4a20      	ldr	r2, [pc, #128]	@ (8002bc4 <LL_RCC_GetUSARTClockFreq+0x180>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <LL_RCC_GetUSARTClockFreq+0x10a>
 8002b46:	4a20      	ldr	r2, [pc, #128]	@ (8002bc8 <LL_RCC_GetUSARTClockFreq+0x184>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <LL_RCC_GetUSARTClockFreq+0x112>
 8002b4c:	e014      	b.n	8002b78 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8002b4e:	f000 f8c3 	bl	8002cd8 <RCC_GetSystemClockFreq>
 8002b52:	60f8      	str	r0, [r7, #12]
          break;
 8002b54:	e027      	b.n	8002ba6 <LL_RCC_GetUSARTClockFreq+0x162>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8002b56:	f7ff feb5 	bl	80028c4 <LL_RCC_HSI_IsReady>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01f      	beq.n	8002ba0 <LL_RCC_GetUSARTClockFreq+0x15c>
          {
            usart_frequency = HSI_VALUE;
 8002b60:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <LL_RCC_GetUSARTClockFreq+0x174>)
 8002b62:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002b64:	e01c      	b.n	8002ba0 <LL_RCC_GetUSARTClockFreq+0x15c>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8002b66:	f7ff fec1 	bl	80028ec <LL_RCC_LSE_IsReady>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d019      	beq.n	8002ba4 <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = LSE_VALUE;
 8002b70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b74:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002b76:	e015      	b.n	8002ba4 <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002b78:	f000 f8ae 	bl	8002cd8 <RCC_GetSystemClockFreq>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f8d0 	bl	8002d24 <RCC_GetHCLKClockFreq>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f8e4 	bl	8002d54 <RCC_GetPCLK1ClockFreq>
 8002b8c:	60f8      	str	r0, [r7, #12]
          break;
 8002b8e:	e00a      	b.n	8002ba6 <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8002b90:	bf00      	nop
 8002b92:	e008      	b.n	8002ba6 <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8002b94:	bf00      	nop
 8002b96:	e006      	b.n	8002ba6 <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8002b98:	bf00      	nop
 8002b9a:	e004      	b.n	8002ba6 <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8002b9c:	bf00      	nop
 8002b9e:	e002      	b.n	8002ba6 <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 8002ba0:	bf00      	nop
 8002ba2:	e000      	b.n	8002ba6 <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 8002ba4:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	00030001 	.word	0x00030001
 8002bb4:	00030002 	.word	0x00030002
 8002bb8:	00f42400 	.word	0x00f42400
 8002bbc:	000c0004 	.word	0x000c0004
 8002bc0:	000c0008 	.word	0x000c0008
 8002bc4:	00300010 	.word	0x00300010
 8002bc8:	00300020 	.word	0x00300020

08002bcc <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bdc:	d134      	bne.n	8002c48 <LL_RCC_GetUARTClockFreq+0x7c>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fee4 	bl	80029ac <LL_RCC_GetUARTClockSource>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8002bea:	d015      	beq.n	8002c18 <LL_RCC_GetUARTClockFreq+0x4c>
 8002bec:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8002bf0:	d81b      	bhi.n	8002c2a <LL_RCC_GetUARTClockFreq+0x5e>
 8002bf2:	4a34      	ldr	r2, [pc, #208]	@ (8002cc4 <LL_RCC_GetUARTClockFreq+0xf8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d003      	beq.n	8002c00 <LL_RCC_GetUARTClockFreq+0x34>
 8002bf8:	4a33      	ldr	r2, [pc, #204]	@ (8002cc8 <LL_RCC_GetUARTClockFreq+0xfc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <LL_RCC_GetUARTClockFreq+0x3c>
 8002bfe:	e014      	b.n	8002c2a <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002c00:	f000 f86a 	bl	8002cd8 <RCC_GetSystemClockFreq>
 8002c04:	60f8      	str	r0, [r7, #12]
        break;
 8002c06:	e01f      	b.n	8002c48 <LL_RCC_GetUARTClockFreq+0x7c>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002c08:	f7ff fe5c 	bl	80028c4 <LL_RCC_HSI_IsReady>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d017      	beq.n	8002c42 <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = HSI_VALUE;
 8002c12:	4b2e      	ldr	r3, [pc, #184]	@ (8002ccc <LL_RCC_GetUARTClockFreq+0x100>)
 8002c14:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002c16:	e014      	b.n	8002c42 <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002c18:	f7ff fe68 	bl	80028ec <LL_RCC_LSE_IsReady>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d011      	beq.n	8002c46 <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = LSE_VALUE;
 8002c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c26:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002c28:	e00d      	b.n	8002c46 <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002c2a:	f000 f855 	bl	8002cd8 <RCC_GetSystemClockFreq>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 f877 	bl	8002d24 <RCC_GetHCLKClockFreq>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 f88b 	bl	8002d54 <RCC_GetPCLK1ClockFreq>
 8002c3e:	60f8      	str	r0, [r7, #12]
        break;
 8002c40:	e002      	b.n	8002c48 <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 8002c42:	bf00      	nop
 8002c44:	e000      	b.n	8002c48 <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 8002c46:	bf00      	nop
    }
  }

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c4e:	d134      	bne.n	8002cba <LL_RCC_GetUARTClockFreq+0xee>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff feab 	bl	80029ac <LL_RCC_GetUARTClockSource>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8002c5c:	d015      	beq.n	8002c8a <LL_RCC_GetUARTClockFreq+0xbe>
 8002c5e:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8002c62:	d81b      	bhi.n	8002c9c <LL_RCC_GetUARTClockFreq+0xd0>
 8002c64:	4a1a      	ldr	r2, [pc, #104]	@ (8002cd0 <LL_RCC_GetUARTClockFreq+0x104>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d003      	beq.n	8002c72 <LL_RCC_GetUARTClockFreq+0xa6>
 8002c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002cd4 <LL_RCC_GetUARTClockFreq+0x108>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d004      	beq.n	8002c7a <LL_RCC_GetUARTClockFreq+0xae>
 8002c70:	e014      	b.n	8002c9c <LL_RCC_GetUARTClockFreq+0xd0>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002c72:	f000 f831 	bl	8002cd8 <RCC_GetSystemClockFreq>
 8002c76:	60f8      	str	r0, [r7, #12]
        break;
 8002c78:	e01f      	b.n	8002cba <LL_RCC_GetUARTClockFreq+0xee>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002c7a:	f7ff fe23 	bl	80028c4 <LL_RCC_HSI_IsReady>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d017      	beq.n	8002cb4 <LL_RCC_GetUARTClockFreq+0xe8>
        {
          uart_frequency = HSI_VALUE;
 8002c84:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <LL_RCC_GetUARTClockFreq+0x100>)
 8002c86:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002c88:	e014      	b.n	8002cb4 <LL_RCC_GetUARTClockFreq+0xe8>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002c8a:	f7ff fe2f 	bl	80028ec <LL_RCC_LSE_IsReady>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d011      	beq.n	8002cb8 <LL_RCC_GetUARTClockFreq+0xec>
        {
          uart_frequency = LSE_VALUE;
 8002c94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c98:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002c9a:	e00d      	b.n	8002cb8 <LL_RCC_GetUARTClockFreq+0xec>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002c9c:	f000 f81c 	bl	8002cd8 <RCC_GetSystemClockFreq>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f83e 	bl	8002d24 <RCC_GetHCLKClockFreq>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f852 	bl	8002d54 <RCC_GetPCLK1ClockFreq>
 8002cb0:	60f8      	str	r0, [r7, #12]
        break;
 8002cb2:	e002      	b.n	8002cba <LL_RCC_GetUARTClockFreq+0xee>
        break;
 8002cb4:	bf00      	nop
 8002cb6:	e000      	b.n	8002cba <LL_RCC_GetUARTClockFreq+0xee>
        break;
 8002cb8:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	00c00040 	.word	0x00c00040
 8002cc8:	00c00080 	.word	0x00c00080
 8002ccc:	00f42400 	.word	0x00f42400
 8002cd0:	03000100 	.word	0x03000100
 8002cd4:	03000200 	.word	0x03000200

08002cd8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002cde:	f7ff fe19 	bl	8002914 <LL_RCC_GetSysClkSource>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d00c      	beq.n	8002d02 <RCC_GetSystemClockFreq+0x2a>
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d80e      	bhi.n	8002d0a <RCC_GetSystemClockFreq+0x32>
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d002      	beq.n	8002cf6 <RCC_GetSystemClockFreq+0x1e>
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d003      	beq.n	8002cfc <RCC_GetSystemClockFreq+0x24>
 8002cf4:	e009      	b.n	8002d0a <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002cf6:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <RCC_GetSystemClockFreq+0x44>)
 8002cf8:	607b      	str	r3, [r7, #4]
      break;
 8002cfa:	e009      	b.n	8002d10 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002cfc:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <RCC_GetSystemClockFreq+0x48>)
 8002cfe:	607b      	str	r3, [r7, #4]
      break;
 8002d00:	e006      	b.n	8002d10 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002d02:	f000 f853 	bl	8002dac <RCC_PLL_GetFreqDomain_SYS>
 8002d06:	6078      	str	r0, [r7, #4]
      break;
 8002d08:	e002      	b.n	8002d10 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 8002d0a:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <RCC_GetSystemClockFreq+0x44>)
 8002d0c:	607b      	str	r3, [r7, #4]
      break;
 8002d0e:	bf00      	nop
  }

  return frequency;
 8002d10:	687b      	ldr	r3, [r7, #4]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	00f42400 	.word	0x00f42400
 8002d20:	007a1200 	.word	0x007a1200

08002d24 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002d2c:	f7ff fe00 	bl	8002930 <LL_RCC_GetAHBPrescaler>
 8002d30:	4603      	mov	r3, r0
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	4a05      	ldr	r2, [pc, #20]	@ (8002d50 <RCC_GetHCLKClockFreq+0x2c>)
 8002d3a:	5cd3      	ldrb	r3, [r2, r3]
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	08005d9c 	.word	0x08005d9c

08002d54 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002d5c:	f7ff fdf6 	bl	800294c <LL_RCC_GetAPB1Prescaler>
 8002d60:	4603      	mov	r3, r0
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	4a05      	ldr	r2, [pc, #20]	@ (8002d7c <RCC_GetPCLK1ClockFreq+0x28>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	08005dac 	.word	0x08005dac

08002d80 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002d88:	f7ff fdee 	bl	8002968 <LL_RCC_GetAPB2Prescaler>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	0adb      	lsrs	r3, r3, #11
 8002d90:	4a05      	ldr	r2, [pc, #20]	@ (8002da8 <RCC_GetPCLK2ClockFreq+0x28>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	08005dac 	.word	0x08005dac

08002dac <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002db2:	f7ff fe0f 	bl	80029d4 <LL_RCC_PLL_GetMainSource>
 8002db6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d003      	beq.n	8002dc6 <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d003      	beq.n	8002dcc <RCC_PLL_GetFreqDomain_SYS+0x20>
 8002dc4:	e005      	b.n	8002dd2 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002dc6:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002dc8:	607b      	str	r3, [r7, #4]
      break;
 8002dca:	e005      	b.n	8002dd8 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002dcc:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8002dce:	607b      	str	r3, [r7, #4]
      break;
 8002dd0:	e002      	b.n	8002dd8 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002dd4:	607b      	str	r3, [r7, #4]
      break;
 8002dd6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002dd8:	f7ff fe0a 	bl	80029f0 <LL_RCC_PLL_GetN>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	fb03 f402 	mul.w	r4, r3, r2
 8002de4:	f7ff fe20 	bl	8002a28 <LL_RCC_PLL_GetDivider>
 8002de8:	4603      	mov	r3, r0
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	3301      	adds	r3, #1
 8002dee:	fbb4 f4f3 	udiv	r4, r4, r3
 8002df2:	f7ff fe0b 	bl	8002a0c <LL_RCC_PLL_GetR>
 8002df6:	4603      	mov	r3, r0
 8002df8:	0e5b      	lsrs	r3, r3, #25
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd90      	pop	{r4, r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	00f42400 	.word	0x00f42400
 8002e10:	007a1200 	.word	0x007a1200

08002e14 <LL_USART_IsEnabled>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <LL_USART_IsEnabled+0x18>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <LL_USART_IsEnabled+0x1a>
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_USART_SetPrescaler>:
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	f023 030f 	bic.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_USART_SetStopBitsLength>:
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	605a      	str	r2, [r3, #4]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_USART_SetHWFlowCtrl>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <LL_USART_SetBaudRate>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b0b      	cmp	r3, #11
 8002ec2:	d83c      	bhi.n	8002f3e <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d039      	beq.n	8002f3e <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed0:	d122      	bne.n	8002f18 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <LL_USART_SetBaudRate+0x9c>)
 8002eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	005a      	lsls	r2, r3, #1
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	441a      	add	r2, r3
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	60da      	str	r2, [r3, #12]
}
 8002f16:	e012      	b.n	8002f3e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <LL_USART_SetBaudRate+0x9c>)
 8002f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	441a      	add	r2, r3
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	60da      	str	r2, [r3, #12]
}
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	08005db4 	.word	0x08005db4

08002f50 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ff56 	bl	8002e14 <LL_USART_IsEnabled>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d165      	bne.n	800303a <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b34      	ldr	r3, [pc, #208]	@ (8003044 <LL_USART_Init+0xf4>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	6891      	ldr	r1, [r2, #8]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	6912      	ldr	r2, [r2, #16]
 8002f7e:	4311      	orrs	r1, r2
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	6952      	ldr	r2, [r2, #20]
 8002f84:	4311      	orrs	r1, r2
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	69d2      	ldr	r2, [r2, #28]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff62 	bl	8002e62 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ff6f 	bl	8002e88 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a26      	ldr	r2, [pc, #152]	@ (8003048 <LL_USART_Init+0xf8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d104      	bne.n	8002fbc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002fb2:	2003      	movs	r0, #3
 8002fb4:	f7ff fd46 	bl	8002a44 <LL_RCC_GetUSARTClockFreq>
 8002fb8:	60b8      	str	r0, [r7, #8]
 8002fba:	e023      	b.n	8003004 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a23      	ldr	r2, [pc, #140]	@ (800304c <LL_USART_Init+0xfc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d104      	bne.n	8002fce <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002fc4:	200c      	movs	r0, #12
 8002fc6:	f7ff fd3d 	bl	8002a44 <LL_RCC_GetUSARTClockFreq>
 8002fca:	60b8      	str	r0, [r7, #8]
 8002fcc:	e01a      	b.n	8003004 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a1f      	ldr	r2, [pc, #124]	@ (8003050 <LL_USART_Init+0x100>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d104      	bne.n	8002fe0 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002fd6:	2030      	movs	r0, #48	@ 0x30
 8002fd8:	f7ff fd34 	bl	8002a44 <LL_RCC_GetUSARTClockFreq>
 8002fdc:	60b8      	str	r0, [r7, #8]
 8002fde:	e011      	b.n	8003004 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8003054 <LL_USART_Init+0x104>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d104      	bne.n	8002ff2 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002fe8:	20c0      	movs	r0, #192	@ 0xc0
 8002fea:	f7ff fdef 	bl	8002bcc <LL_RCC_GetUARTClockFreq>
 8002fee:	60b8      	str	r0, [r7, #8]
 8002ff0:	e008      	b.n	8003004 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a18      	ldr	r2, [pc, #96]	@ (8003058 <LL_USART_Init+0x108>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d104      	bne.n	8003004 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002ffa:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8002ffe:	f7ff fde5 	bl	8002bcc <LL_RCC_GetUARTClockFreq>
 8003002:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d011      	beq.n	800302e <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00d      	beq.n	800302e <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	460b      	mov	r3, r1
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff41 	bl	8002eb0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff00 	bl	8002e3a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800303a:	7bfb      	ldrb	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	efff69f3 	.word	0xefff69f3
 8003048:	40013800 	.word	0x40013800
 800304c:	40004400 	.word	0x40004400
 8003050:	40004800 	.word	0x40004800
 8003054:	40004c00 	.word	0x40004c00
 8003058:	40005000 	.word	0x40005000

0800305c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8003060:	4907      	ldr	r1, [pc, #28]	@ (8003080 <MX_FATFS_Init+0x24>)
 8003062:	4808      	ldr	r0, [pc, #32]	@ (8003084 <MX_FATFS_Init+0x28>)
 8003064:	f000 f8b6 	bl	80031d4 <FATFS_LinkDriver>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	e003      	b.n	800307c <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8003074:	4b04      	ldr	r3, [pc, #16]	@ (8003088 <MX_FATFS_Init+0x2c>)
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800307a:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000118 	.word	0x20000118
 8003084:	20000010 	.word	0x20000010
 8003088:	2000011c 	.word	0x2000011c

0800308c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <USER_initialize+0x24>)
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800309c:	4b04      	ldr	r3, [pc, #16]	@ (80030b0 <USER_initialize+0x24>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	2000000c 	.word	0x2000000c

080030b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80030be:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <USER_status+0x24>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80030c4:	4b04      	ldr	r3, [pc, #16]	@ (80030d8 <USER_status+0x24>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	2000000c 	.word	0x2000000c

080030dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4603      	mov	r3, r0
 80030ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80030ec:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b085      	sub	sp, #20
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	4603      	mov	r3, r0
 8003108:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800310a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	603a      	str	r2, [r7, #0]
 8003122:	71fb      	strb	r3, [r7, #7]
 8003124:	460b      	mov	r3, r1
 8003126:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
    return res;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	4613      	mov	r3, r2
 8003148:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8003152:	4b1f      	ldr	r3, [pc, #124]	@ (80031d0 <FATFS_LinkDriverEx+0x94>)
 8003154:	7a5b      	ldrb	r3, [r3, #9]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d131      	bne.n	80031c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800315c:	4b1c      	ldr	r3, [pc, #112]	@ (80031d0 <FATFS_LinkDriverEx+0x94>)
 800315e:	7a5b      	ldrb	r3, [r3, #9]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	4b1a      	ldr	r3, [pc, #104]	@ (80031d0 <FATFS_LinkDriverEx+0x94>)
 8003166:	2100      	movs	r1, #0
 8003168:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800316a:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <FATFS_LinkDriverEx+0x94>)
 800316c:	7a5b      	ldrb	r3, [r3, #9]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4a17      	ldr	r2, [pc, #92]	@ (80031d0 <FATFS_LinkDriverEx+0x94>)
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800317a:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <FATFS_LinkDriverEx+0x94>)
 800317c:	7a5b      	ldrb	r3, [r3, #9]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	4b13      	ldr	r3, [pc, #76]	@ (80031d0 <FATFS_LinkDriverEx+0x94>)
 8003184:	4413      	add	r3, r2
 8003186:	79fa      	ldrb	r2, [r7, #7]
 8003188:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800318a:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <FATFS_LinkDriverEx+0x94>)
 800318c:	7a5b      	ldrb	r3, [r3, #9]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	b2d1      	uxtb	r1, r2
 8003194:	4a0e      	ldr	r2, [pc, #56]	@ (80031d0 <FATFS_LinkDriverEx+0x94>)
 8003196:	7251      	strb	r1, [r2, #9]
 8003198:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800319a:	7dbb      	ldrb	r3, [r7, #22]
 800319c:	3330      	adds	r3, #48	@ 0x30
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	3301      	adds	r3, #1
 80031a8:	223a      	movs	r2, #58	@ 0x3a
 80031aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	3302      	adds	r3, #2
 80031b0:	222f      	movs	r2, #47	@ 0x2f
 80031b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	3303      	adds	r3, #3
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000120 	.word	0x20000120

080031d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	6839      	ldr	r1, [r7, #0]
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffaa 	bl	800313c <FATFS_LinkDriverEx>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b085      	sub	sp, #20
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003204:	2b84      	cmp	r3, #132	@ 0x84
 8003206:	d005      	beq.n	8003214 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003208:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	3303      	adds	r3, #3
 8003212:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003214:	68fb      	ldr	r3, [r7, #12]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003226:	f000 ff25 	bl	8004074 <vTaskStartScheduler>
  
  return osOK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}

08003230 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003232:	b087      	sub	sp, #28
 8003234:	af02      	add	r7, sp, #8
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685c      	ldr	r4, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003246:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ffcf 	bl	80031f2 <makeFreeRtosPriority>
 8003254:	4602      	mov	r2, r0
 8003256:	f107 030c 	add.w	r3, r7, #12
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	9200      	str	r2, [sp, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	4632      	mov	r2, r6
 8003262:	4629      	mov	r1, r5
 8003264:	4620      	mov	r0, r4
 8003266:	f000 fd83 	bl	8003d70 <xTaskCreate>
 800326a:	4603      	mov	r3, r0
 800326c:	2b01      	cmp	r3, #1
 800326e:	d001      	beq.n	8003274 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003274:	68fb      	ldr	r3, [r7, #12]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800327e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <osDelay+0x16>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	e000      	b.n	8003296 <osDelay+0x18>
 8003294:	2301      	movs	r3, #1
 8003296:	4618      	mov	r0, r3
 8003298:	f000 feb6 	bl	8004008 <vTaskDelay>
  
  return osOK;
 800329c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f103 0208 	add.w	r2, r3, #8
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f04f 32ff 	mov.w	r2, #4294967295
 80032be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f103 0208 	add.w	r2, r3, #8
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f103 0208 	add.w	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	601a      	str	r2, [r3, #0]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d103      	bne.n	8003368 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e00c      	b.n	8003382 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3308      	adds	r3, #8
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	e002      	b.n	8003376 <vListInsert+0x2e>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	d2f6      	bcs.n	8003370 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	601a      	str	r2, [r3, #0]
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6892      	ldr	r2, [r2, #8]
 80033d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6852      	ldr	r2, [r2, #4]
 80033da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d103      	bne.n	80033ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	1e5a      	subs	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10b      	bne.n	800343c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003436:	bf00      	nop
 8003438:	bf00      	nop
 800343a:	e7fd      	b.n	8003438 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800343c:	f001 ff9c 	bl	8005378 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003448:	68f9      	ldr	r1, [r7, #12]
 800344a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	441a      	add	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346c:	3b01      	subs	r3, #1
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	441a      	add	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	22ff      	movs	r2, #255	@ 0xff
 8003480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	22ff      	movs	r2, #255	@ 0xff
 8003488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d114      	bne.n	80034bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01a      	beq.n	80034d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3310      	adds	r3, #16
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 f86c 	bl	800457c <xTaskRemoveFromEventList>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d012      	beq.n	80034d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034aa:	4b0d      	ldr	r3, [pc, #52]	@ (80034e0 <xQueueGenericReset+0xd0>)
 80034ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	e009      	b.n	80034d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3310      	adds	r3, #16
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fef0 	bl	80032a6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3324      	adds	r3, #36	@ 0x24
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff feeb 	bl	80032a6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034d0:	f001 ff84 	bl	80053dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034d4:	2301      	movs	r3, #1
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	e000ed04 	.word	0xe000ed04

080034e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	@ 0x28
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	4613      	mov	r3, r2
 80034f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10b      	bne.n	8003510 <xQueueGenericCreate+0x2c>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	613b      	str	r3, [r7, #16]
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	fb02 f303 	mul.w	r3, r2, r3
 8003518:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3348      	adds	r3, #72	@ 0x48
 800351e:	4618      	mov	r0, r3
 8003520:	f002 f84c 	bl	80055bc <pvPortMalloc>
 8003524:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	3348      	adds	r3, #72	@ 0x48
 8003534:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003536:	79fa      	ldrb	r2, [r7, #7]
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f805 	bl	8003552 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003548:	69bb      	ldr	r3, [r7, #24]
	}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e002      	b.n	8003574 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003580:	2101      	movs	r1, #1
 8003582:	69b8      	ldr	r0, [r7, #24]
 8003584:	f7ff ff44 	bl	8003410 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08e      	sub	sp, #56	@ 0x38
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800359e:	2300      	movs	r3, #0
 80035a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <xQueueGenericSend+0x34>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d103      	bne.n	80035d2 <xQueueGenericSend+0x42>
 80035ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <xQueueGenericSend+0x46>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <xQueueGenericSend+0x48>
 80035d6:	2300      	movs	r3, #0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <xQueueGenericSend+0x64>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d103      	bne.n	8003602 <xQueueGenericSend+0x72>
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <xQueueGenericSend+0x76>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <xQueueGenericSend+0x78>
 8003606:	2300      	movs	r3, #0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <xQueueGenericSend+0x94>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	623b      	str	r3, [r7, #32]
}
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	e7fd      	b.n	8003620 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003624:	f001 f950 	bl	80048c8 <xTaskGetSchedulerState>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <xQueueGenericSend+0xa4>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <xQueueGenericSend+0xa8>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <xQueueGenericSend+0xaa>
 8003638:	2300      	movs	r3, #0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10b      	bne.n	8003656 <xQueueGenericSend+0xc6>
	__asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	61fb      	str	r3, [r7, #28]
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	e7fd      	b.n	8003652 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003656:	f001 fe8f 	bl	8005378 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800365e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <xQueueGenericSend+0xdc>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d129      	bne.n	80036c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003672:	f000 fa0f 	bl	8003a94 <prvCopyDataToQueue>
 8003676:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003682:	3324      	adds	r3, #36	@ 0x24
 8003684:	4618      	mov	r0, r3
 8003686:	f000 ff79 	bl	800457c <xTaskRemoveFromEventList>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003690:	4b3f      	ldr	r3, [pc, #252]	@ (8003790 <xQueueGenericSend+0x200>)
 8003692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	e00a      	b.n	80036b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036a8:	4b39      	ldr	r3, [pc, #228]	@ (8003790 <xQueueGenericSend+0x200>)
 80036aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036b8:	f001 fe90 	bl	80053dc <vPortExitCritical>
				return pdPASS;
 80036bc:	2301      	movs	r3, #1
 80036be:	e063      	b.n	8003788 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d103      	bne.n	80036ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036c6:	f001 fe89 	bl	80053dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e05c      	b.n	8003788 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 ffb3 	bl	8004644 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036de:	2301      	movs	r3, #1
 80036e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036e2:	f001 fe7b 	bl	80053dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036e6:	f000 fd1d 	bl	8004124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036ea:	f001 fe45 	bl	8005378 <vPortEnterCritical>
 80036ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036f4:	b25b      	sxtb	r3, r3
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fa:	d103      	bne.n	8003704 <xQueueGenericSend+0x174>
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800370a:	b25b      	sxtb	r3, r3
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d103      	bne.n	800371a <xQueueGenericSend+0x18a>
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800371a:	f001 fe5f 	bl	80053dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800371e:	1d3a      	adds	r2, r7, #4
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f000 ffa2 	bl	8004670 <xTaskCheckForTimeOut>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d124      	bne.n	800377c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003732:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003734:	f000 faa6 	bl	8003c84 <prvIsQueueFull>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d018      	beq.n	8003770 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	3310      	adds	r3, #16
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fec6 	bl	80044d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800374c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800374e:	f000 fa31 	bl	8003bb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003752:	f000 fcf5 	bl	8004140 <xTaskResumeAll>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	f47f af7c 	bne.w	8003656 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800375e:	4b0c      	ldr	r3, [pc, #48]	@ (8003790 <xQueueGenericSend+0x200>)
 8003760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	e772      	b.n	8003656 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003770:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003772:	f000 fa1f 	bl	8003bb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003776:	f000 fce3 	bl	8004140 <xTaskResumeAll>
 800377a:	e76c      	b.n	8003656 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800377c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800377e:	f000 fa19 	bl	8003bb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003782:	f000 fcdd 	bl	8004140 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003788:	4618      	mov	r0, r3
 800378a:	3738      	adds	r7, #56	@ 0x38
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	@ 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80037a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80037be:	bf00      	nop
 80037c0:	bf00      	nop
 80037c2:	e7fd      	b.n	80037c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <xQueueGenericSendFromISR+0x3e>
 80037ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <xQueueGenericSendFromISR+0x42>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <xQueueGenericSendFromISR+0x44>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10b      	bne.n	80037f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d103      	bne.n	8003802 <xQueueGenericSendFromISR+0x6e>
 80037fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <xQueueGenericSendFromISR+0x72>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <xQueueGenericSendFromISR+0x74>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	623b      	str	r3, [r7, #32]
}
 800381e:	bf00      	nop
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003824:	f001 fe88 	bl	8005538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003828:	f3ef 8211 	mrs	r2, BASEPRI
 800382c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	61fa      	str	r2, [r7, #28]
 800383e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003840:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003842:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384c:	429a      	cmp	r2, r3
 800384e:	d302      	bcc.n	8003856 <xQueueGenericSendFromISR+0xc2>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d12f      	bne.n	80038b6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003858:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800385c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003864:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800386c:	f000 f912 	bl	8003a94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003870:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d112      	bne.n	80038a0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800387a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003884:	3324      	adds	r3, #36	@ 0x24
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fe78 	bl	800457c <xTaskRemoveFromEventList>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00e      	beq.n	80038b0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e007      	b.n	80038b0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80038a4:	3301      	adds	r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	b25a      	sxtb	r2, r3
 80038aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80038b0:	2301      	movs	r3, #1
 80038b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80038b4:	e001      	b.n	80038ba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038bc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3740      	adds	r7, #64	@ 0x40
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08c      	sub	sp, #48	@ 0x30
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038dc:	2300      	movs	r3, #0
 80038de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10b      	bne.n	8003902 <xQueueReceive+0x32>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	623b      	str	r3, [r7, #32]
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	e7fd      	b.n	80038fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d103      	bne.n	8003910 <xQueueReceive+0x40>
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <xQueueReceive+0x44>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <xQueueReceive+0x46>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <xQueueReceive+0x62>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	61fb      	str	r3, [r7, #28]
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	e7fd      	b.n	800392e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003932:	f000 ffc9 	bl	80048c8 <xTaskGetSchedulerState>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <xQueueReceive+0x72>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <xQueueReceive+0x76>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <xQueueReceive+0x78>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <xQueueReceive+0x94>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	61bb      	str	r3, [r7, #24]
}
 800395e:	bf00      	nop
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003964:	f001 fd08 	bl	8005378 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01f      	beq.n	80039b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003978:	f000 f8f6 	bl	8003b68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	1e5a      	subs	r2, r3, #1
 8003980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003982:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00f      	beq.n	80039ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800398c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398e:	3310      	adds	r3, #16
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fdf3 	bl	800457c <xTaskRemoveFromEventList>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800399c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a90 <xQueueReceive+0x1c0>)
 800399e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039ac:	f001 fd16 	bl	80053dc <vPortExitCritical>
				return pdPASS;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e069      	b.n	8003a88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d103      	bne.n	80039c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039ba:	f001 fd0f 	bl	80053dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039be:	2300      	movs	r3, #0
 80039c0:	e062      	b.n	8003a88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039c8:	f107 0310 	add.w	r3, r7, #16
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fe39 	bl	8004644 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039d2:	2301      	movs	r3, #1
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039d6:	f001 fd01 	bl	80053dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039da:	f000 fba3 	bl	8004124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039de:	f001 fccb 	bl	8005378 <vPortEnterCritical>
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039e8:	b25b      	sxtb	r3, r3
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ee:	d103      	bne.n	80039f8 <xQueueReceive+0x128>
 80039f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039fe:	b25b      	sxtb	r3, r3
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d103      	bne.n	8003a0e <xQueueReceive+0x13e>
 8003a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a0e:	f001 fce5 	bl	80053dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a12:	1d3a      	adds	r2, r7, #4
 8003a14:	f107 0310 	add.w	r3, r7, #16
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fe28 	bl	8004670 <xTaskCheckForTimeOut>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d123      	bne.n	8003a6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a28:	f000 f916 	bl	8003c58 <prvIsQueueEmpty>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d017      	beq.n	8003a62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a34:	3324      	adds	r3, #36	@ 0x24
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4611      	mov	r1, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fd4c 	bl	80044d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a42:	f000 f8b7 	bl	8003bb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a46:	f000 fb7b 	bl	8004140 <xTaskResumeAll>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d189      	bne.n	8003964 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003a50:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <xQueueReceive+0x1c0>)
 8003a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	e780      	b.n	8003964 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a64:	f000 f8a6 	bl	8003bb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a68:	f000 fb6a 	bl	8004140 <xTaskResumeAll>
 8003a6c:	e77a      	b.n	8003964 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a70:	f000 f8a0 	bl	8003bb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a74:	f000 fb64 	bl	8004140 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a7a:	f000 f8ed 	bl	8003c58 <prvIsQueueEmpty>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f43f af6f 	beq.w	8003964 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3730      	adds	r7, #48	@ 0x30
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	e000ed04 	.word	0xe000ed04

08003a94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d14d      	bne.n	8003b56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 ff20 	bl	8004904 <xTaskPriorityDisinherit>
 8003ac4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	e043      	b.n	8003b56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d119      	bne.n	8003b08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6858      	ldr	r0, [r3, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	461a      	mov	r2, r3
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	f002 f8d0 	bl	8005c84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	441a      	add	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d32b      	bcc.n	8003b56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	e026      	b.n	8003b56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68d8      	ldr	r0, [r3, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b10:	461a      	mov	r2, r3
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	f002 f8b6 	bl	8005c84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	425b      	negs	r3, r3
 8003b22:	441a      	add	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d207      	bcs.n	8003b44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	425b      	negs	r3, r3
 8003b3e:	441a      	add	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d105      	bne.n	8003b56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003b5e:	697b      	ldr	r3, [r7, #20]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d018      	beq.n	8003bac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	441a      	add	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d303      	bcc.n	8003b9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68d9      	ldr	r1, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6838      	ldr	r0, [r7, #0]
 8003ba8:	f002 f86c 	bl	8005c84 <memcpy>
	}
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003bbc:	f001 fbdc 	bl	8005378 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bc8:	e011      	b.n	8003bee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d012      	beq.n	8003bf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3324      	adds	r3, #36	@ 0x24
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fcd0 	bl	800457c <xTaskRemoveFromEventList>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003be2:	f000 fda9 	bl	8004738 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	dce9      	bgt.n	8003bca <prvUnlockQueue+0x16>
 8003bf6:	e000      	b.n	8003bfa <prvUnlockQueue+0x46>
					break;
 8003bf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	22ff      	movs	r2, #255	@ 0xff
 8003bfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003c02:	f001 fbeb 	bl	80053dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c06:	f001 fbb7 	bl	8005378 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c12:	e011      	b.n	8003c38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d012      	beq.n	8003c42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3310      	adds	r3, #16
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fcab 	bl	800457c <xTaskRemoveFromEventList>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c2c:	f000 fd84 	bl	8004738 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c30:	7bbb      	ldrb	r3, [r7, #14]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	dce9      	bgt.n	8003c14 <prvUnlockQueue+0x60>
 8003c40:	e000      	b.n	8003c44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	22ff      	movs	r2, #255	@ 0xff
 8003c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003c4c:	f001 fbc6 	bl	80053dc <vPortExitCritical>
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c60:	f001 fb8a 	bl	8005378 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	e001      	b.n	8003c76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c76:	f001 fbb1 	bl	80053dc <vPortExitCritical>

	return xReturn;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c8c:	f001 fb74 	bl	8005378 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d102      	bne.n	8003ca2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	e001      	b.n	8003ca6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ca6:	f001 fb99 	bl	80053dc <vPortExitCritical>

	return xReturn;
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	e014      	b.n	8003cee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003d04 <vQueueAddToRegistry+0x50>)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10b      	bne.n	8003ce8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cd0:	490c      	ldr	r1, [pc, #48]	@ (8003d04 <vQueueAddToRegistry+0x50>)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003cda:	4a0a      	ldr	r2, [pc, #40]	@ (8003d04 <vQueueAddToRegistry+0x50>)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ce6:	e006      	b.n	8003cf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3301      	adds	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b07      	cmp	r3, #7
 8003cf2:	d9e7      	bls.n	8003cc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	2000012c 	.word	0x2000012c

08003d08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d18:	f001 fb2e 	bl	8005378 <vPortEnterCritical>
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d22:	b25b      	sxtb	r3, r3
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d103      	bne.n	8003d32 <vQueueWaitForMessageRestricted+0x2a>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d38:	b25b      	sxtb	r3, r3
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d103      	bne.n	8003d48 <vQueueWaitForMessageRestricted+0x40>
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d48:	f001 fb48 	bl	80053dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d106      	bne.n	8003d62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	3324      	adds	r3, #36	@ 0x24
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fbe1 	bl	8004524 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d62:	6978      	ldr	r0, [r7, #20]
 8003d64:	f7ff ff26 	bl	8003bb4 <prvUnlockQueue>
	}
 8003d68:	bf00      	nop
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08c      	sub	sp, #48	@ 0x30
 8003d74:	af04      	add	r7, sp, #16
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f001 fc19 	bl	80055bc <pvPortMalloc>
 8003d8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00e      	beq.n	8003db0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d92:	20a0      	movs	r0, #160	@ 0xa0
 8003d94:	f001 fc12 	bl	80055bc <pvPortMalloc>
 8003d98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003da6:	e005      	b.n	8003db4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003da8:	6978      	ldr	r0, [r7, #20]
 8003daa:	f001 fcd5 	bl	8005758 <vPortFree>
 8003dae:	e001      	b.n	8003db4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d013      	beq.n	8003de2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	9303      	str	r3, [sp, #12]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	9302      	str	r3, [sp, #8]
 8003dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc6:	9301      	str	r3, [sp, #4]
 8003dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f80f 	bl	8003df4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dd6:	69f8      	ldr	r0, [r7, #28]
 8003dd8:	f000 f8ac 	bl	8003f34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	e002      	b.n	8003de8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003de8:	69bb      	ldr	r3, [r7, #24]
	}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f023 0307 	bic.w	r3, r3, #7
 8003e1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	617b      	str	r3, [r7, #20]
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	e7fd      	b.n	8003e3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01f      	beq.n	8003e84 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	e012      	b.n	8003e70 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	7819      	ldrb	r1, [r3, #0]
 8003e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	4413      	add	r3, r2
 8003e58:	3334      	adds	r3, #52	@ 0x34
 8003e5a:	460a      	mov	r2, r1
 8003e5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d006      	beq.n	8003e78 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b0f      	cmp	r3, #15
 8003e74:	d9e9      	bls.n	8003e4a <prvInitialiseNewTask+0x56>
 8003e76:	e000      	b.n	8003e7a <prvInitialiseNewTask+0x86>
			{
				break;
 8003e78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e82:	e003      	b.n	8003e8c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8e:	2b06      	cmp	r3, #6
 8003e90:	d901      	bls.n	8003e96 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e92:	2306      	movs	r3, #6
 8003e94:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ea0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fa1a 	bl	80032e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb4:	3318      	adds	r3, #24
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fa15 	bl	80032e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ec0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec4:	f1c3 0207 	rsb	r2, r3, #7
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee4:	334c      	adds	r3, #76	@ 0x4c
 8003ee6:	224c      	movs	r2, #76	@ 0x4c
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 fe3d 	bl	8005b6a <memset>
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8003f28 <prvInitialiseNewTask+0x134>)
 8003ef4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8003f2c <prvInitialiseNewTask+0x138>)
 8003efa:	655a      	str	r2, [r3, #84]	@ 0x54
 8003efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efe:	4a0c      	ldr	r2, [pc, #48]	@ (8003f30 <prvInitialiseNewTask+0x13c>)
 8003f00:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	68f9      	ldr	r1, [r7, #12]
 8003f06:	69b8      	ldr	r0, [r7, #24]
 8003f08:	f001 f908 	bl	800511c <pxPortInitialiseStack>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f1e:	bf00      	nop
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20009f3c 	.word	0x20009f3c
 8003f2c:	20009fa4 	.word	0x20009fa4
 8003f30:	2000a00c 	.word	0x2000a00c

08003f34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f3c:	f001 fa1c 	bl	8005378 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f40:	4b2a      	ldr	r3, [pc, #168]	@ (8003fec <prvAddNewTaskToReadyList+0xb8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	4a29      	ldr	r2, [pc, #164]	@ (8003fec <prvAddNewTaskToReadyList+0xb8>)
 8003f48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f4a:	4b29      	ldr	r3, [pc, #164]	@ (8003ff0 <prvAddNewTaskToReadyList+0xbc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f52:	4a27      	ldr	r2, [pc, #156]	@ (8003ff0 <prvAddNewTaskToReadyList+0xbc>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f58:	4b24      	ldr	r3, [pc, #144]	@ (8003fec <prvAddNewTaskToReadyList+0xb8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d110      	bne.n	8003f82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f60:	f000 fc0e 	bl	8004780 <prvInitialiseTaskLists>
 8003f64:	e00d      	b.n	8003f82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f66:	4b23      	ldr	r3, [pc, #140]	@ (8003ff4 <prvAddNewTaskToReadyList+0xc0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f6e:	4b20      	ldr	r3, [pc, #128]	@ (8003ff0 <prvAddNewTaskToReadyList+0xbc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d802      	bhi.n	8003f82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff0 <prvAddNewTaskToReadyList+0xbc>)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f82:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff8 <prvAddNewTaskToReadyList+0xc4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3301      	adds	r3, #1
 8003f88:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff8 <prvAddNewTaskToReadyList+0xc4>)
 8003f8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	2201      	movs	r2, #1
 8003f92:	409a      	lsls	r2, r3
 8003f94:	4b19      	ldr	r3, [pc, #100]	@ (8003ffc <prvAddNewTaskToReadyList+0xc8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	4a18      	ldr	r2, [pc, #96]	@ (8003ffc <prvAddNewTaskToReadyList+0xc8>)
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4a15      	ldr	r2, [pc, #84]	@ (8004000 <prvAddNewTaskToReadyList+0xcc>)
 8003fac:	441a      	add	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f7ff f9a3 	bl	8003300 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fba:	f001 fa0f 	bl	80053dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff4 <prvAddNewTaskToReadyList+0xc0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00e      	beq.n	8003fe4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff0 <prvAddNewTaskToReadyList+0xbc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d207      	bcs.n	8003fe4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <prvAddNewTaskToReadyList+0xd0>)
 8003fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	2000026c 	.word	0x2000026c
 8003ff0:	2000016c 	.word	0x2000016c
 8003ff4:	20000278 	.word	0x20000278
 8003ff8:	20000288 	.word	0x20000288
 8003ffc:	20000274 	.word	0x20000274
 8004000:	20000170 	.word	0x20000170
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d018      	beq.n	800404c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800401a:	4b14      	ldr	r3, [pc, #80]	@ (800406c <vTaskDelay+0x64>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <vTaskDelay+0x32>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	60bb      	str	r3, [r7, #8]
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	e7fd      	b.n	8004036 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800403a:	f000 f873 	bl	8004124 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800403e:	2100      	movs	r1, #0
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fce7 	bl	8004a14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004046:	f000 f87b 	bl	8004140 <xTaskResumeAll>
 800404a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d107      	bne.n	8004062 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004052:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <vTaskDelay+0x68>)
 8004054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000294 	.word	0x20000294
 8004070:	e000ed04 	.word	0xe000ed04

08004074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800407a:	4b22      	ldr	r3, [pc, #136]	@ (8004104 <vTaskStartScheduler+0x90>)
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	2300      	movs	r3, #0
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	2300      	movs	r3, #0
 8004084:	22c0      	movs	r2, #192	@ 0xc0
 8004086:	4920      	ldr	r1, [pc, #128]	@ (8004108 <vTaskStartScheduler+0x94>)
 8004088:	4820      	ldr	r0, [pc, #128]	@ (800410c <vTaskStartScheduler+0x98>)
 800408a:	f7ff fe71 	bl	8003d70 <xTaskCreate>
 800408e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d102      	bne.n	800409c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004096:	f000 fd23 	bl	8004ae0 <xTimerCreateTimerTask>
 800409a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d11b      	bne.n	80040da <vTaskStartScheduler+0x66>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	60bb      	str	r3, [r7, #8]
}
 80040b4:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040b6:	4b16      	ldr	r3, [pc, #88]	@ (8004110 <vTaskStartScheduler+0x9c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	334c      	adds	r3, #76	@ 0x4c
 80040bc:	4a15      	ldr	r2, [pc, #84]	@ (8004114 <vTaskStartScheduler+0xa0>)
 80040be:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040c0:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <vTaskStartScheduler+0xa4>)
 80040c2:	f04f 32ff 	mov.w	r2, #4294967295
 80040c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040c8:	4b14      	ldr	r3, [pc, #80]	@ (800411c <vTaskStartScheduler+0xa8>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040ce:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <vTaskStartScheduler+0xac>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040d4:	f001 f8ac 	bl	8005230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040d8:	e00f      	b.n	80040fa <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d10b      	bne.n	80040fa <vTaskStartScheduler+0x86>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	607b      	str	r3, [r7, #4]
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	e7fd      	b.n	80040f6 <vTaskStartScheduler+0x82>
}
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000290 	.word	0x20000290
 8004108:	08005d84 	.word	0x08005d84
 800410c:	08004751 	.word	0x08004751
 8004110:	2000016c 	.word	0x2000016c
 8004114:	20000028 	.word	0x20000028
 8004118:	2000028c 	.word	0x2000028c
 800411c:	20000278 	.word	0x20000278
 8004120:	20000270 	.word	0x20000270

08004124 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004128:	4b04      	ldr	r3, [pc, #16]	@ (800413c <vTaskSuspendAll+0x18>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	4a03      	ldr	r2, [pc, #12]	@ (800413c <vTaskSuspendAll+0x18>)
 8004130:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004132:	bf00      	nop
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	20000294 	.word	0x20000294

08004140 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800414e:	4b42      	ldr	r3, [pc, #264]	@ (8004258 <xTaskResumeAll+0x118>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <xTaskResumeAll+0x2e>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	603b      	str	r3, [r7, #0]
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	e7fd      	b.n	800416a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800416e:	f001 f903 	bl	8005378 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004172:	4b39      	ldr	r3, [pc, #228]	@ (8004258 <xTaskResumeAll+0x118>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3b01      	subs	r3, #1
 8004178:	4a37      	ldr	r2, [pc, #220]	@ (8004258 <xTaskResumeAll+0x118>)
 800417a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800417c:	4b36      	ldr	r3, [pc, #216]	@ (8004258 <xTaskResumeAll+0x118>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d161      	bne.n	8004248 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004184:	4b35      	ldr	r3, [pc, #212]	@ (800425c <xTaskResumeAll+0x11c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d05d      	beq.n	8004248 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800418c:	e02e      	b.n	80041ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800418e:	4b34      	ldr	r3, [pc, #208]	@ (8004260 <xTaskResumeAll+0x120>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3318      	adds	r3, #24
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff f90d 	bl	80033ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff f908 	bl	80033ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	2201      	movs	r2, #1
 80041b0:	409a      	lsls	r2, r3
 80041b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004264 <xTaskResumeAll+0x124>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004264 <xTaskResumeAll+0x124>)
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4a27      	ldr	r2, [pc, #156]	@ (8004268 <xTaskResumeAll+0x128>)
 80041ca:	441a      	add	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4610      	mov	r0, r2
 80041d4:	f7ff f894 	bl	8003300 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041dc:	4b23      	ldr	r3, [pc, #140]	@ (800426c <xTaskResumeAll+0x12c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d302      	bcc.n	80041ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80041e6:	4b22      	ldr	r3, [pc, #136]	@ (8004270 <xTaskResumeAll+0x130>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004260 <xTaskResumeAll+0x120>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1cc      	bne.n	800418e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041fa:	f000 fb45 	bl	8004888 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004274 <xTaskResumeAll+0x134>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d010      	beq.n	800422c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800420a:	f000 f847 	bl	800429c <xTaskIncrementTick>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004214:	4b16      	ldr	r3, [pc, #88]	@ (8004270 <xTaskResumeAll+0x130>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3b01      	subs	r3, #1
 800421e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f1      	bne.n	800420a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004226:	4b13      	ldr	r3, [pc, #76]	@ (8004274 <xTaskResumeAll+0x134>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800422c:	4b10      	ldr	r3, [pc, #64]	@ (8004270 <xTaskResumeAll+0x130>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d009      	beq.n	8004248 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004234:	2301      	movs	r3, #1
 8004236:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004238:	4b0f      	ldr	r3, [pc, #60]	@ (8004278 <xTaskResumeAll+0x138>)
 800423a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004248:	f001 f8c8 	bl	80053dc <vPortExitCritical>

	return xAlreadyYielded;
 800424c:	68bb      	ldr	r3, [r7, #8]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000294 	.word	0x20000294
 800425c:	2000026c 	.word	0x2000026c
 8004260:	2000022c 	.word	0x2000022c
 8004264:	20000274 	.word	0x20000274
 8004268:	20000170 	.word	0x20000170
 800426c:	2000016c 	.word	0x2000016c
 8004270:	20000280 	.word	0x20000280
 8004274:	2000027c 	.word	0x2000027c
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004282:	4b05      	ldr	r3, [pc, #20]	@ (8004298 <xTaskGetTickCount+0x1c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004288:	687b      	ldr	r3, [r7, #4]
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000270 	.word	0x20000270

0800429c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a6:	4b4f      	ldr	r3, [pc, #316]	@ (80043e4 <xTaskIncrementTick+0x148>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f040 808f 	bne.w	80043ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042b0:	4b4d      	ldr	r3, [pc, #308]	@ (80043e8 <xTaskIncrementTick+0x14c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3301      	adds	r3, #1
 80042b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042b8:	4a4b      	ldr	r2, [pc, #300]	@ (80043e8 <xTaskIncrementTick+0x14c>)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d121      	bne.n	8004308 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80042c4:	4b49      	ldr	r3, [pc, #292]	@ (80043ec <xTaskIncrementTick+0x150>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	603b      	str	r3, [r7, #0]
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	e7fd      	b.n	80042e2 <xTaskIncrementTick+0x46>
 80042e6:	4b41      	ldr	r3, [pc, #260]	@ (80043ec <xTaskIncrementTick+0x150>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	4b40      	ldr	r3, [pc, #256]	@ (80043f0 <xTaskIncrementTick+0x154>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3e      	ldr	r2, [pc, #248]	@ (80043ec <xTaskIncrementTick+0x150>)
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4a3e      	ldr	r2, [pc, #248]	@ (80043f0 <xTaskIncrementTick+0x154>)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b3e      	ldr	r3, [pc, #248]	@ (80043f4 <xTaskIncrementTick+0x158>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3301      	adds	r3, #1
 8004300:	4a3c      	ldr	r2, [pc, #240]	@ (80043f4 <xTaskIncrementTick+0x158>)
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	f000 fac0 	bl	8004888 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004308:	4b3b      	ldr	r3, [pc, #236]	@ (80043f8 <xTaskIncrementTick+0x15c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	429a      	cmp	r2, r3
 8004310:	d348      	bcc.n	80043a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004312:	4b36      	ldr	r3, [pc, #216]	@ (80043ec <xTaskIncrementTick+0x150>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800431c:	4b36      	ldr	r3, [pc, #216]	@ (80043f8 <xTaskIncrementTick+0x15c>)
 800431e:	f04f 32ff 	mov.w	r2, #4294967295
 8004322:	601a      	str	r2, [r3, #0]
					break;
 8004324:	e03e      	b.n	80043a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004326:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <xTaskIncrementTick+0x150>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	429a      	cmp	r2, r3
 800433c:	d203      	bcs.n	8004346 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800433e:	4a2e      	ldr	r2, [pc, #184]	@ (80043f8 <xTaskIncrementTick+0x15c>)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004344:	e02e      	b.n	80043a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	3304      	adds	r3, #4
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff f835 	bl	80033ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	3318      	adds	r3, #24
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff f82c 	bl	80033ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004366:	2201      	movs	r2, #1
 8004368:	409a      	lsls	r2, r3
 800436a:	4b24      	ldr	r3, [pc, #144]	@ (80043fc <xTaskIncrementTick+0x160>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4313      	orrs	r3, r2
 8004370:	4a22      	ldr	r2, [pc, #136]	@ (80043fc <xTaskIncrementTick+0x160>)
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4a1f      	ldr	r2, [pc, #124]	@ (8004400 <xTaskIncrementTick+0x164>)
 8004382:	441a      	add	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f7fe ffb8 	bl	8003300 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004394:	4b1b      	ldr	r3, [pc, #108]	@ (8004404 <xTaskIncrementTick+0x168>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	429a      	cmp	r2, r3
 800439c:	d3b9      	bcc.n	8004312 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800439e:	2301      	movs	r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043a2:	e7b6      	b.n	8004312 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043a4:	4b17      	ldr	r3, [pc, #92]	@ (8004404 <xTaskIncrementTick+0x168>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043aa:	4915      	ldr	r1, [pc, #84]	@ (8004400 <xTaskIncrementTick+0x164>)
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d901      	bls.n	80043c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80043bc:	2301      	movs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043c0:	4b11      	ldr	r3, [pc, #68]	@ (8004408 <xTaskIncrementTick+0x16c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e004      	b.n	80043d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043ce:	4b0f      	ldr	r3, [pc, #60]	@ (800440c <xTaskIncrementTick+0x170>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3301      	adds	r3, #1
 80043d4:	4a0d      	ldr	r2, [pc, #52]	@ (800440c <xTaskIncrementTick+0x170>)
 80043d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043d8:	697b      	ldr	r3, [r7, #20]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000294 	.word	0x20000294
 80043e8:	20000270 	.word	0x20000270
 80043ec:	20000224 	.word	0x20000224
 80043f0:	20000228 	.word	0x20000228
 80043f4:	20000284 	.word	0x20000284
 80043f8:	2000028c 	.word	0x2000028c
 80043fc:	20000274 	.word	0x20000274
 8004400:	20000170 	.word	0x20000170
 8004404:	2000016c 	.word	0x2000016c
 8004408:	20000280 	.word	0x20000280
 800440c:	2000027c 	.word	0x2000027c

08004410 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004416:	4b2a      	ldr	r3, [pc, #168]	@ (80044c0 <vTaskSwitchContext+0xb0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800441e:	4b29      	ldr	r3, [pc, #164]	@ (80044c4 <vTaskSwitchContext+0xb4>)
 8004420:	2201      	movs	r2, #1
 8004422:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004424:	e045      	b.n	80044b2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004426:	4b27      	ldr	r3, [pc, #156]	@ (80044c4 <vTaskSwitchContext+0xb4>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800442c:	4b26      	ldr	r3, [pc, #152]	@ (80044c8 <vTaskSwitchContext+0xb8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	fab3 f383 	clz	r3, r3
 8004438:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800443a:	7afb      	ldrb	r3, [r7, #11]
 800443c:	f1c3 031f 	rsb	r3, r3, #31
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	4922      	ldr	r1, [pc, #136]	@ (80044cc <vTaskSwitchContext+0xbc>)
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	607b      	str	r3, [r7, #4]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <vTaskSwitchContext+0x5a>
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4a14      	ldr	r2, [pc, #80]	@ (80044cc <vTaskSwitchContext+0xbc>)
 800447a:	4413      	add	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	3308      	adds	r3, #8
 8004490:	429a      	cmp	r2, r3
 8004492:	d104      	bne.n	800449e <vTaskSwitchContext+0x8e>
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a0a      	ldr	r2, [pc, #40]	@ (80044d0 <vTaskSwitchContext+0xc0>)
 80044a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044a8:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <vTaskSwitchContext+0xc0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	334c      	adds	r3, #76	@ 0x4c
 80044ae:	4a09      	ldr	r2, [pc, #36]	@ (80044d4 <vTaskSwitchContext+0xc4>)
 80044b0:	6013      	str	r3, [r2, #0]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000294 	.word	0x20000294
 80044c4:	20000280 	.word	0x20000280
 80044c8:	20000274 	.word	0x20000274
 80044cc:	20000170 	.word	0x20000170
 80044d0:	2000016c 	.word	0x2000016c
 80044d4:	20000028 	.word	0x20000028

080044d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60fb      	str	r3, [r7, #12]
}
 80044fa:	bf00      	nop
 80044fc:	bf00      	nop
 80044fe:	e7fd      	b.n	80044fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004500:	4b07      	ldr	r3, [pc, #28]	@ (8004520 <vTaskPlaceOnEventList+0x48>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3318      	adds	r3, #24
 8004506:	4619      	mov	r1, r3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7fe ff1d 	bl	8003348 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800450e:	2101      	movs	r1, #1
 8004510:	6838      	ldr	r0, [r7, #0]
 8004512:	f000 fa7f 	bl	8004a14 <prvAddCurrentTaskToDelayedList>
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	2000016c 	.word	0x2000016c

08004524 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10b      	bne.n	800454e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	617b      	str	r3, [r7, #20]
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	e7fd      	b.n	800454a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800454e:	4b0a      	ldr	r3, [pc, #40]	@ (8004578 <vTaskPlaceOnEventListRestricted+0x54>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3318      	adds	r3, #24
 8004554:	4619      	mov	r1, r3
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7fe fed2 	bl	8003300 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004562:	f04f 33ff 	mov.w	r3, #4294967295
 8004566:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	68b8      	ldr	r0, [r7, #8]
 800456c:	f000 fa52 	bl	8004a14 <prvAddCurrentTaskToDelayedList>
	}
 8004570:	bf00      	nop
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	2000016c 	.word	0x2000016c

0800457c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	60fb      	str	r3, [r7, #12]
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	e7fd      	b.n	80045a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	3318      	adds	r3, #24
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe ff03 	bl	80033ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b4:	4b1d      	ldr	r3, [pc, #116]	@ (800462c <xTaskRemoveFromEventList+0xb0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d11c      	bne.n	80045f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	3304      	adds	r3, #4
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fefa 	bl	80033ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	2201      	movs	r2, #1
 80045cc:	409a      	lsls	r2, r3
 80045ce:	4b18      	ldr	r3, [pc, #96]	@ (8004630 <xTaskRemoveFromEventList+0xb4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	4a16      	ldr	r2, [pc, #88]	@ (8004630 <xTaskRemoveFromEventList+0xb4>)
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4a13      	ldr	r2, [pc, #76]	@ (8004634 <xTaskRemoveFromEventList+0xb8>)
 80045e6:	441a      	add	r2, r3
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f7fe fe86 	bl	8003300 <vListInsertEnd>
 80045f4:	e005      	b.n	8004602 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	3318      	adds	r3, #24
 80045fa:	4619      	mov	r1, r3
 80045fc:	480e      	ldr	r0, [pc, #56]	@ (8004638 <xTaskRemoveFromEventList+0xbc>)
 80045fe:	f7fe fe7f 	bl	8003300 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004606:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <xTaskRemoveFromEventList+0xc0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	429a      	cmp	r2, r3
 800460e:	d905      	bls.n	800461c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004610:	2301      	movs	r3, #1
 8004612:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004614:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <xTaskRemoveFromEventList+0xc4>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e001      	b.n	8004620 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004620:	697b      	ldr	r3, [r7, #20]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000294 	.word	0x20000294
 8004630:	20000274 	.word	0x20000274
 8004634:	20000170 	.word	0x20000170
 8004638:	2000022c 	.word	0x2000022c
 800463c:	2000016c 	.word	0x2000016c
 8004640:	20000280 	.word	0x20000280

08004644 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800464c:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <vTaskInternalSetTimeOutState+0x24>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004654:	4b05      	ldr	r3, [pc, #20]	@ (800466c <vTaskInternalSetTimeOutState+0x28>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	20000284 	.word	0x20000284
 800466c:	20000270 	.word	0x20000270

08004670 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	613b      	str	r3, [r7, #16]
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	60fb      	str	r3, [r7, #12]
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80046b6:	f000 fe5f 	bl	8005378 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004730 <xTaskCheckForTimeOut+0xc0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d102      	bne.n	80046da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	e023      	b.n	8004722 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b15      	ldr	r3, [pc, #84]	@ (8004734 <xTaskCheckForTimeOut+0xc4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d007      	beq.n	80046f6 <xTaskCheckForTimeOut+0x86>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d302      	bcc.n	80046f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046f0:	2301      	movs	r3, #1
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	e015      	b.n	8004722 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d20b      	bcs.n	8004718 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff ff99 	bl	8004644 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	e004      	b.n	8004722 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800471e:	2301      	movs	r3, #1
 8004720:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004722:	f000 fe5b 	bl	80053dc <vPortExitCritical>

	return xReturn;
 8004726:	69fb      	ldr	r3, [r7, #28]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3720      	adds	r7, #32
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000270 	.word	0x20000270
 8004734:	20000284 	.word	0x20000284

08004738 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800473c:	4b03      	ldr	r3, [pc, #12]	@ (800474c <vTaskMissedYield+0x14>)
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]
}
 8004742:	bf00      	nop
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	20000280 	.word	0x20000280

08004750 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004758:	f000 f852 	bl	8004800 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800475c:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <prvIdleTask+0x28>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d9f9      	bls.n	8004758 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004764:	4b05      	ldr	r3, [pc, #20]	@ (800477c <prvIdleTask+0x2c>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004774:	e7f0      	b.n	8004758 <prvIdleTask+0x8>
 8004776:	bf00      	nop
 8004778:	20000170 	.word	0x20000170
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004786:	2300      	movs	r3, #0
 8004788:	607b      	str	r3, [r7, #4]
 800478a:	e00c      	b.n	80047a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4a12      	ldr	r2, [pc, #72]	@ (80047e0 <prvInitialiseTaskLists+0x60>)
 8004798:	4413      	add	r3, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe fd83 	bl	80032a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3301      	adds	r3, #1
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b06      	cmp	r3, #6
 80047aa:	d9ef      	bls.n	800478c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047ac:	480d      	ldr	r0, [pc, #52]	@ (80047e4 <prvInitialiseTaskLists+0x64>)
 80047ae:	f7fe fd7a 	bl	80032a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047b2:	480d      	ldr	r0, [pc, #52]	@ (80047e8 <prvInitialiseTaskLists+0x68>)
 80047b4:	f7fe fd77 	bl	80032a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047b8:	480c      	ldr	r0, [pc, #48]	@ (80047ec <prvInitialiseTaskLists+0x6c>)
 80047ba:	f7fe fd74 	bl	80032a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047be:	480c      	ldr	r0, [pc, #48]	@ (80047f0 <prvInitialiseTaskLists+0x70>)
 80047c0:	f7fe fd71 	bl	80032a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047c4:	480b      	ldr	r0, [pc, #44]	@ (80047f4 <prvInitialiseTaskLists+0x74>)
 80047c6:	f7fe fd6e 	bl	80032a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047ca:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <prvInitialiseTaskLists+0x78>)
 80047cc:	4a05      	ldr	r2, [pc, #20]	@ (80047e4 <prvInitialiseTaskLists+0x64>)
 80047ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047d0:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <prvInitialiseTaskLists+0x7c>)
 80047d2:	4a05      	ldr	r2, [pc, #20]	@ (80047e8 <prvInitialiseTaskLists+0x68>)
 80047d4:	601a      	str	r2, [r3, #0]
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000170 	.word	0x20000170
 80047e4:	200001fc 	.word	0x200001fc
 80047e8:	20000210 	.word	0x20000210
 80047ec:	2000022c 	.word	0x2000022c
 80047f0:	20000240 	.word	0x20000240
 80047f4:	20000258 	.word	0x20000258
 80047f8:	20000224 	.word	0x20000224
 80047fc:	20000228 	.word	0x20000228

08004800 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004806:	e019      	b.n	800483c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004808:	f000 fdb6 	bl	8005378 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480c:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <prvCheckTasksWaitingTermination+0x50>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3304      	adds	r3, #4
 8004818:	4618      	mov	r0, r3
 800481a:	f7fe fdce 	bl	80033ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 800481e:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <prvCheckTasksWaitingTermination+0x54>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3b01      	subs	r3, #1
 8004824:	4a0b      	ldr	r2, [pc, #44]	@ (8004854 <prvCheckTasksWaitingTermination+0x54>)
 8004826:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <prvCheckTasksWaitingTermination+0x58>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3b01      	subs	r3, #1
 800482e:	4a0a      	ldr	r2, [pc, #40]	@ (8004858 <prvCheckTasksWaitingTermination+0x58>)
 8004830:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004832:	f000 fdd3 	bl	80053dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f810 	bl	800485c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800483c:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <prvCheckTasksWaitingTermination+0x58>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e1      	bne.n	8004808 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000240 	.word	0x20000240
 8004854:	2000026c 	.word	0x2000026c
 8004858:	20000254 	.word	0x20000254

0800485c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	334c      	adds	r3, #76	@ 0x4c
 8004868:	4618      	mov	r0, r3
 800486a:	f001 f987 	bl	8005b7c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	4618      	mov	r0, r3
 8004874:	f000 ff70 	bl	8005758 <vPortFree>
			vPortFree( pxTCB );
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 ff6d 	bl	8005758 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800488e:	4b0c      	ldr	r3, [pc, #48]	@ (80048c0 <prvResetNextTaskUnblockTime+0x38>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d104      	bne.n	80048a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004898:	4b0a      	ldr	r3, [pc, #40]	@ (80048c4 <prvResetNextTaskUnblockTime+0x3c>)
 800489a:	f04f 32ff 	mov.w	r2, #4294967295
 800489e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048a0:	e008      	b.n	80048b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a2:	4b07      	ldr	r3, [pc, #28]	@ (80048c0 <prvResetNextTaskUnblockTime+0x38>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	4a04      	ldr	r2, [pc, #16]	@ (80048c4 <prvResetNextTaskUnblockTime+0x3c>)
 80048b2:	6013      	str	r3, [r2, #0]
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	20000224 	.word	0x20000224
 80048c4:	2000028c 	.word	0x2000028c

080048c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048ce:	4b0b      	ldr	r3, [pc, #44]	@ (80048fc <xTaskGetSchedulerState+0x34>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048d6:	2301      	movs	r3, #1
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	e008      	b.n	80048ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048dc:	4b08      	ldr	r3, [pc, #32]	@ (8004900 <xTaskGetSchedulerState+0x38>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048e4:	2302      	movs	r3, #2
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	e001      	b.n	80048ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048ea:	2300      	movs	r3, #0
 80048ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048ee:	687b      	ldr	r3, [r7, #4]
	}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	20000278 	.word	0x20000278
 8004900:	20000294 	.word	0x20000294

08004904 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d070      	beq.n	80049fc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800491a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a08 <xTaskPriorityDisinherit+0x104>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	429a      	cmp	r2, r3
 8004922:	d00b      	beq.n	800493c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	60fb      	str	r3, [r7, #12]
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	e7fd      	b.n	8004938 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	60bb      	str	r3, [r7, #8]
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004960:	1e5a      	subs	r2, r3, #1
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	429a      	cmp	r2, r3
 8004970:	d044      	beq.n	80049fc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004976:	2b00      	cmp	r3, #0
 8004978:	d140      	bne.n	80049fc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3304      	adds	r3, #4
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fd1b 	bl	80033ba <uxListRemove>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d115      	bne.n	80049b6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800498e:	491f      	ldr	r1, [pc, #124]	@ (8004a0c <xTaskPriorityDisinherit+0x108>)
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <xTaskPriorityDisinherit+0xb2>
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	2201      	movs	r2, #1
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43da      	mvns	r2, r3
 80049ac:	4b18      	ldr	r3, [pc, #96]	@ (8004a10 <xTaskPriorityDisinherit+0x10c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4013      	ands	r3, r2
 80049b2:	4a17      	ldr	r2, [pc, #92]	@ (8004a10 <xTaskPriorityDisinherit+0x10c>)
 80049b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c2:	f1c3 0207 	rsb	r2, r3, #7
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	2201      	movs	r2, #1
 80049d0:	409a      	lsls	r2, r3
 80049d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a10 <xTaskPriorityDisinherit+0x10c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004a10 <xTaskPriorityDisinherit+0x10c>)
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4a08      	ldr	r2, [pc, #32]	@ (8004a0c <xTaskPriorityDisinherit+0x108>)
 80049ea:	441a      	add	r2, r3
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f7fe fc84 	bl	8003300 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049f8:	2301      	movs	r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049fc:	697b      	ldr	r3, [r7, #20]
	}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	2000016c 	.word	0x2000016c
 8004a0c:	20000170 	.word	0x20000170
 8004a10:	20000274 	.word	0x20000274

08004a14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a1e:	4b29      	ldr	r3, [pc, #164]	@ (8004ac4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a24:	4b28      	ldr	r3, [pc, #160]	@ (8004ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3304      	adds	r3, #4
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fcc5 	bl	80033ba <uxListRemove>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10b      	bne.n	8004a4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a36:	4b24      	ldr	r3, [pc, #144]	@ (8004ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43da      	mvns	r2, r3
 8004a44:	4b21      	ldr	r3, [pc, #132]	@ (8004acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	4a20      	ldr	r2, [pc, #128]	@ (8004acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d10a      	bne.n	8004a6c <prvAddCurrentTaskToDelayedList+0x58>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3304      	adds	r3, #4
 8004a62:	4619      	mov	r1, r3
 8004a64:	481a      	ldr	r0, [pc, #104]	@ (8004ad0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a66:	f7fe fc4b 	bl	8003300 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a6a:	e026      	b.n	8004aba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a74:	4b14      	ldr	r3, [pc, #80]	@ (8004ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d209      	bcs.n	8004a98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a84:	4b13      	ldr	r3, [pc, #76]	@ (8004ad4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f7fe fc59 	bl	8003348 <vListInsert>
}
 8004a96:	e010      	b.n	8004aba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a98:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	f7fe fc4f 	bl	8003348 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8004adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d202      	bcs.n	8004aba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ab4:	4a09      	ldr	r2, [pc, #36]	@ (8004adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	6013      	str	r3, [r2, #0]
}
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000270 	.word	0x20000270
 8004ac8:	2000016c 	.word	0x2000016c
 8004acc:	20000274 	.word	0x20000274
 8004ad0:	20000258 	.word	0x20000258
 8004ad4:	20000228 	.word	0x20000228
 8004ad8:	20000224 	.word	0x20000224
 8004adc:	2000028c 	.word	0x2000028c

08004ae0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004aea:	f000 fae1 	bl	80050b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004aee:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <xTimerCreateTimerTask+0x58>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004af6:	4b11      	ldr	r3, [pc, #68]	@ (8004b3c <xTimerCreateTimerTask+0x5c>)
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	2302      	movs	r3, #2
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2300      	movs	r3, #0
 8004b00:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004b04:	490e      	ldr	r1, [pc, #56]	@ (8004b40 <xTimerCreateTimerTask+0x60>)
 8004b06:	480f      	ldr	r0, [pc, #60]	@ (8004b44 <xTimerCreateTimerTask+0x64>)
 8004b08:	f7ff f932 	bl	8003d70 <xTaskCreate>
 8004b0c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	603b      	str	r3, [r7, #0]
}
 8004b26:	bf00      	nop
 8004b28:	bf00      	nop
 8004b2a:	e7fd      	b.n	8004b28 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004b2c:	687b      	ldr	r3, [r7, #4]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	200002c8 	.word	0x200002c8
 8004b3c:	200002cc 	.word	0x200002cc
 8004b40:	08005d8c 	.word	0x08005d8c
 8004b44:	08004c81 	.word	0x08004c81

08004b48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	@ 0x28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10b      	bne.n	8004b78 <xTimerGenericCommand+0x30>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	623b      	str	r3, [r7, #32]
}
 8004b72:	bf00      	nop
 8004b74:	bf00      	nop
 8004b76:	e7fd      	b.n	8004b74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b78:	4b19      	ldr	r3, [pc, #100]	@ (8004be0 <xTimerGenericCommand+0x98>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d02a      	beq.n	8004bd6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	dc18      	bgt.n	8004bc4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b92:	f7ff fe99 	bl	80048c8 <xTaskGetSchedulerState>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d109      	bne.n	8004bb0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b9c:	4b10      	ldr	r3, [pc, #64]	@ (8004be0 <xTimerGenericCommand+0x98>)
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	f107 0114 	add.w	r1, r7, #20
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba8:	f7fe fcf2 	bl	8003590 <xQueueGenericSend>
 8004bac:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bae:	e012      	b.n	8004bd6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004be0 <xTimerGenericCommand+0x98>)
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	f107 0114 	add.w	r1, r7, #20
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f7fe fce8 	bl	8003590 <xQueueGenericSend>
 8004bc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bc2:	e008      	b.n	8004bd6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004bc4:	4b06      	ldr	r3, [pc, #24]	@ (8004be0 <xTimerGenericCommand+0x98>)
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	f107 0114 	add.w	r1, r7, #20
 8004bcc:	2300      	movs	r3, #0
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	f7fe fde0 	bl	8003794 <xQueueGenericSendFromISR>
 8004bd4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3728      	adds	r7, #40	@ 0x28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	200002c8 	.word	0x200002c8

08004be4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bee:	4b23      	ldr	r3, [pc, #140]	@ (8004c7c <prvProcessExpiredTimer+0x98>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe fbdc 	bl	80033ba <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d023      	beq.n	8004c58 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	699a      	ldr	r2, [r3, #24]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	18d1      	adds	r1, r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	6978      	ldr	r0, [r7, #20]
 8004c1e:	f000 f8d5 	bl	8004dcc <prvInsertTimerInActiveList>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d020      	beq.n	8004c6a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	2100      	movs	r1, #0
 8004c32:	6978      	ldr	r0, [r7, #20]
 8004c34:	f7ff ff88 	bl	8004b48 <xTimerGenericCommand>
 8004c38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d114      	bne.n	8004c6a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	60fb      	str	r3, [r7, #12]
}
 8004c52:	bf00      	nop
 8004c54:	bf00      	nop
 8004c56:	e7fd      	b.n	8004c54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	4798      	blx	r3
}
 8004c72:	bf00      	nop
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200002c0 	.word	0x200002c0

08004c80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c88:	f107 0308 	add.w	r3, r7, #8
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 f859 	bl	8004d44 <prvGetNextExpireTime>
 8004c92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4619      	mov	r1, r3
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f805 	bl	8004ca8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c9e:	f000 f8d7 	bl	8004e50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ca2:	bf00      	nop
 8004ca4:	e7f0      	b.n	8004c88 <prvTimerTask+0x8>
	...

08004ca8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004cb2:	f7ff fa37 	bl	8004124 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cb6:	f107 0308 	add.w	r3, r7, #8
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f866 	bl	8004d8c <prvSampleTimeNow>
 8004cc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d130      	bne.n	8004d2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <prvProcessTimerOrBlockTask+0x3c>
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d806      	bhi.n	8004ce4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004cd6:	f7ff fa33 	bl	8004140 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004cda:	68f9      	ldr	r1, [r7, #12]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ff81 	bl	8004be4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ce2:	e024      	b.n	8004d2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004cea:	4b13      	ldr	r3, [pc, #76]	@ (8004d38 <prvProcessTimerOrBlockTask+0x90>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <prvProcessTimerOrBlockTask+0x50>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <prvProcessTimerOrBlockTask+0x52>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8004d3c <prvProcessTimerOrBlockTask+0x94>)
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	f7fe fffd 	bl	8003d08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d0e:	f7ff fa17 	bl	8004140 <xTaskResumeAll>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d18:	4b09      	ldr	r3, [pc, #36]	@ (8004d40 <prvProcessTimerOrBlockTask+0x98>)
 8004d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	f3bf 8f6f 	isb	sy
}
 8004d28:	e001      	b.n	8004d2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d2a:	f7ff fa09 	bl	8004140 <xTaskResumeAll>
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	200002c4 	.word	0x200002c4
 8004d3c:	200002c8 	.word	0x200002c8
 8004d40:	e000ed04 	.word	0xe000ed04

08004d44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d88 <prvGetNextExpireTime+0x44>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <prvGetNextExpireTime+0x16>
 8004d56:	2201      	movs	r2, #1
 8004d58:	e000      	b.n	8004d5c <prvGetNextExpireTime+0x18>
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d105      	bne.n	8004d74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d68:	4b07      	ldr	r3, [pc, #28]	@ (8004d88 <prvGetNextExpireTime+0x44>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	e001      	b.n	8004d78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d78:	68fb      	ldr	r3, [r7, #12]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	200002c0 	.word	0x200002c0

08004d8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d94:	f7ff fa72 	bl	800427c <xTaskGetTickCount>
 8004d98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <prvSampleTimeNow+0x3c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d205      	bcs.n	8004db0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004da4:	f000 f91e 	bl	8004fe4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e002      	b.n	8004db6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004db6:	4a04      	ldr	r2, [pc, #16]	@ (8004dc8 <prvSampleTimeNow+0x3c>)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	200002d0 	.word	0x200002d0

08004dcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d812      	bhi.n	8004e18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	1ad2      	subs	r2, r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d302      	bcc.n	8004e06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e01b      	b.n	8004e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e06:	4b10      	ldr	r3, [pc, #64]	@ (8004e48 <prvInsertTimerInActiveList+0x7c>)
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f7fe fa99 	bl	8003348 <vListInsert>
 8004e16:	e012      	b.n	8004e3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d206      	bcs.n	8004e2e <prvInsertTimerInActiveList+0x62>
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d302      	bcc.n	8004e2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e007      	b.n	8004e3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e2e:	4b07      	ldr	r3, [pc, #28]	@ (8004e4c <prvInsertTimerInActiveList+0x80>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f7fe fa85 	bl	8003348 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e3e:	697b      	ldr	r3, [r7, #20]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	200002c4 	.word	0x200002c4
 8004e4c:	200002c0 	.word	0x200002c0

08004e50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08c      	sub	sp, #48	@ 0x30
 8004e54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e56:	e0b2      	b.n	8004fbe <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f2c0 80af 	blt.w	8004fbe <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe faa2 	bl	80033ba <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e76:	1d3b      	adds	r3, r7, #4
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff ff87 	bl	8004d8c <prvSampleTimeNow>
 8004e7e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b09      	cmp	r3, #9
 8004e84:	f200 8098 	bhi.w	8004fb8 <prvProcessReceivedCommands+0x168>
 8004e88:	a201      	add	r2, pc, #4	@ (adr r2, 8004e90 <prvProcessReceivedCommands+0x40>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004eb9 	.word	0x08004eb9
 8004e94:	08004eb9 	.word	0x08004eb9
 8004e98:	08004eb9 	.word	0x08004eb9
 8004e9c:	08004f2f 	.word	0x08004f2f
 8004ea0:	08004f43 	.word	0x08004f43
 8004ea4:	08004f8f 	.word	0x08004f8f
 8004ea8:	08004eb9 	.word	0x08004eb9
 8004eac:	08004eb9 	.word	0x08004eb9
 8004eb0:	08004f2f 	.word	0x08004f2f
 8004eb4:	08004f43 	.word	0x08004f43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	18d1      	adds	r1, r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a3a      	ldr	r2, [r7, #32]
 8004ed6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ed8:	f7ff ff78 	bl	8004dcc <prvInsertTimerInActiveList>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d06c      	beq.n	8004fbc <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ee8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d061      	beq.n	8004fbc <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	441a      	add	r2, r3
 8004f00:	2300      	movs	r3, #0
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	2100      	movs	r1, #0
 8004f08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f0a:	f7ff fe1d 	bl	8004b48 <xTimerGenericCommand>
 8004f0e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d152      	bne.n	8004fbc <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	61bb      	str	r3, [r7, #24]
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	e7fd      	b.n	8004f2a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8004f40:	e03d      	b.n	8004fbe <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10b      	bne.n	8004f7a <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	617b      	str	r3, [r7, #20]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	18d1      	adds	r1, r2, r3
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f88:	f7ff ff20 	bl	8004dcc <prvInsertTimerInActiveList>
					break;
 8004f8c:	e017      	b.n	8004fbe <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d103      	bne.n	8004fa4 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8004f9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f9e:	f000 fbdb 	bl	8005758 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004fa2:	e00c      	b.n	8004fbe <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8004fb6:	e002      	b.n	8004fbe <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8004fb8:	bf00      	nop
 8004fba:	e000      	b.n	8004fbe <prvProcessReceivedCommands+0x16e>
					break;
 8004fbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fbe:	4b08      	ldr	r3, [pc, #32]	@ (8004fe0 <prvProcessReceivedCommands+0x190>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f107 0108 	add.w	r1, r7, #8
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fe fc81 	bl	80038d0 <xQueueReceive>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f47f af41 	bne.w	8004e58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	3728      	adds	r7, #40	@ 0x28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	200002c8 	.word	0x200002c8

08004fe4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fea:	e049      	b.n	8005080 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fec:	4b2e      	ldr	r3, [pc, #184]	@ (80050a8 <prvSwitchTimerLists+0xc4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80050a8 <prvSwitchTimerLists+0xc4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3304      	adds	r3, #4
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe f9d8 	bl	80033ba <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d02f      	beq.n	8005080 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	429a      	cmp	r2, r3
 8005030:	d90e      	bls.n	8005050 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800503e:	4b1a      	ldr	r3, [pc, #104]	@ (80050a8 <prvSwitchTimerLists+0xc4>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3304      	adds	r3, #4
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f7fe f97d 	bl	8003348 <vListInsert>
 800504e:	e017      	b.n	8005080 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005050:	2300      	movs	r3, #0
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	2100      	movs	r1, #0
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff fd74 	bl	8004b48 <xTimerGenericCommand>
 8005060:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10b      	bne.n	8005080 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	603b      	str	r3, [r7, #0]
}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	e7fd      	b.n	800507c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005080:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <prvSwitchTimerLists+0xc4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1b0      	bne.n	8004fec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800508a:	4b07      	ldr	r3, [pc, #28]	@ (80050a8 <prvSwitchTimerLists+0xc4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005090:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <prvSwitchTimerLists+0xc8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a04      	ldr	r2, [pc, #16]	@ (80050a8 <prvSwitchTimerLists+0xc4>)
 8005096:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005098:	4a04      	ldr	r2, [pc, #16]	@ (80050ac <prvSwitchTimerLists+0xc8>)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	6013      	str	r3, [r2, #0]
}
 800509e:	bf00      	nop
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	200002c0 	.word	0x200002c0
 80050ac:	200002c4 	.word	0x200002c4

080050b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050b4:	f000 f960 	bl	8005378 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050b8:	4b12      	ldr	r3, [pc, #72]	@ (8005104 <prvCheckForValidListAndQueue+0x54>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d11d      	bne.n	80050fc <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80050c0:	4811      	ldr	r0, [pc, #68]	@ (8005108 <prvCheckForValidListAndQueue+0x58>)
 80050c2:	f7fe f8f0 	bl	80032a6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050c6:	4811      	ldr	r0, [pc, #68]	@ (800510c <prvCheckForValidListAndQueue+0x5c>)
 80050c8:	f7fe f8ed 	bl	80032a6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050cc:	4b10      	ldr	r3, [pc, #64]	@ (8005110 <prvCheckForValidListAndQueue+0x60>)
 80050ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005108 <prvCheckForValidListAndQueue+0x58>)
 80050d0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80050d2:	4b10      	ldr	r3, [pc, #64]	@ (8005114 <prvCheckForValidListAndQueue+0x64>)
 80050d4:	4a0d      	ldr	r2, [pc, #52]	@ (800510c <prvCheckForValidListAndQueue+0x5c>)
 80050d6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80050d8:	2200      	movs	r2, #0
 80050da:	210c      	movs	r1, #12
 80050dc:	200a      	movs	r0, #10
 80050de:	f7fe fa01 	bl	80034e4 <xQueueGenericCreate>
 80050e2:	4603      	mov	r3, r0
 80050e4:	4a07      	ldr	r2, [pc, #28]	@ (8005104 <prvCheckForValidListAndQueue+0x54>)
 80050e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80050e8:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <prvCheckForValidListAndQueue+0x54>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050f0:	4b04      	ldr	r3, [pc, #16]	@ (8005104 <prvCheckForValidListAndQueue+0x54>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4908      	ldr	r1, [pc, #32]	@ (8005118 <prvCheckForValidListAndQueue+0x68>)
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe fddc 	bl	8003cb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050fc:	f000 f96e 	bl	80053dc <vPortExitCritical>
}
 8005100:	bf00      	nop
 8005102:	bd80      	pop	{r7, pc}
 8005104:	200002c8 	.word	0x200002c8
 8005108:	20000298 	.word	0x20000298
 800510c:	200002ac 	.word	0x200002ac
 8005110:	200002c0 	.word	0x200002c0
 8005114:	200002c4 	.word	0x200002c4
 8005118:	08005d94 	.word	0x08005d94

0800511c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3b04      	subs	r3, #4
 800512c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3b04      	subs	r3, #4
 800513a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f023 0201 	bic.w	r2, r3, #1
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3b04      	subs	r3, #4
 800514a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800514c:	4a0c      	ldr	r2, [pc, #48]	@ (8005180 <pxPortInitialiseStack+0x64>)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3b14      	subs	r3, #20
 8005156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3b04      	subs	r3, #4
 8005162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f06f 0202 	mvn.w	r2, #2
 800516a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3b20      	subs	r3, #32
 8005170:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005172:	68fb      	ldr	r3, [r7, #12]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	08005185 	.word	0x08005185

08005184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800518e:	4b13      	ldr	r3, [pc, #76]	@ (80051dc <prvTaskExitError+0x58>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005196:	d00b      	beq.n	80051b0 <prvTaskExitError+0x2c>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	60fb      	str	r3, [r7, #12]
}
 80051aa:	bf00      	nop
 80051ac:	bf00      	nop
 80051ae:	e7fd      	b.n	80051ac <prvTaskExitError+0x28>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	60bb      	str	r3, [r7, #8]
}
 80051c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051c4:	bf00      	nop
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0fc      	beq.n	80051c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000024 	.word	0x20000024

080051e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051e0:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <pxCurrentTCBConst2>)
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	6808      	ldr	r0, [r1, #0]
 80051e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	f380 8809 	msr	PSP, r0
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f380 8811 	msr	BASEPRI, r0
 80051fa:	4770      	bx	lr
 80051fc:	f3af 8000 	nop.w

08005200 <pxCurrentTCBConst2>:
 8005200:	2000016c 	.word	0x2000016c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005208:	4808      	ldr	r0, [pc, #32]	@ (800522c <prvPortStartFirstTask+0x24>)
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	6800      	ldr	r0, [r0, #0]
 800520e:	f380 8808 	msr	MSP, r0
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8814 	msr	CONTROL, r0
 800521a:	b662      	cpsie	i
 800521c:	b661      	cpsie	f
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	df00      	svc	0
 8005228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800522a:	bf00      	nop
 800522c:	e000ed08 	.word	0xe000ed08

08005230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005236:	4b47      	ldr	r3, [pc, #284]	@ (8005354 <xPortStartScheduler+0x124>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a47      	ldr	r2, [pc, #284]	@ (8005358 <xPortStartScheduler+0x128>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10b      	bne.n	8005258 <xPortStartScheduler+0x28>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	60fb      	str	r3, [r7, #12]
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005258:	4b3e      	ldr	r3, [pc, #248]	@ (8005354 <xPortStartScheduler+0x124>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a3f      	ldr	r2, [pc, #252]	@ (800535c <xPortStartScheduler+0x12c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d10b      	bne.n	800527a <xPortStartScheduler+0x4a>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	613b      	str	r3, [r7, #16]
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	e7fd      	b.n	8005276 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800527a:	4b39      	ldr	r3, [pc, #228]	@ (8005360 <xPortStartScheduler+0x130>)
 800527c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	22ff      	movs	r2, #255	@ 0xff
 800528a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800529c:	b2da      	uxtb	r2, r3
 800529e:	4b31      	ldr	r3, [pc, #196]	@ (8005364 <xPortStartScheduler+0x134>)
 80052a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052a2:	4b31      	ldr	r3, [pc, #196]	@ (8005368 <xPortStartScheduler+0x138>)
 80052a4:	2207      	movs	r2, #7
 80052a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052a8:	e009      	b.n	80052be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80052aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005368 <xPortStartScheduler+0x138>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005368 <xPortStartScheduler+0x138>)
 80052b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c6:	2b80      	cmp	r3, #128	@ 0x80
 80052c8:	d0ef      	beq.n	80052aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052ca:	4b27      	ldr	r3, [pc, #156]	@ (8005368 <xPortStartScheduler+0x138>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f1c3 0307 	rsb	r3, r3, #7
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d00b      	beq.n	80052ee <xPortStartScheduler+0xbe>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60bb      	str	r3, [r7, #8]
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005368 <xPortStartScheduler+0x138>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005368 <xPortStartScheduler+0x138>)
 80052f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005368 <xPortStartScheduler+0x138>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005300:	4a19      	ldr	r2, [pc, #100]	@ (8005368 <xPortStartScheduler+0x138>)
 8005302:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800530c:	4b17      	ldr	r3, [pc, #92]	@ (800536c <xPortStartScheduler+0x13c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a16      	ldr	r2, [pc, #88]	@ (800536c <xPortStartScheduler+0x13c>)
 8005312:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005316:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005318:	4b14      	ldr	r3, [pc, #80]	@ (800536c <xPortStartScheduler+0x13c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a13      	ldr	r2, [pc, #76]	@ (800536c <xPortStartScheduler+0x13c>)
 800531e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005322:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005324:	f000 f8da 	bl	80054dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005328:	4b11      	ldr	r3, [pc, #68]	@ (8005370 <xPortStartScheduler+0x140>)
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800532e:	f000 f8f9 	bl	8005524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005332:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <xPortStartScheduler+0x144>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a0f      	ldr	r2, [pc, #60]	@ (8005374 <xPortStartScheduler+0x144>)
 8005338:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800533c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800533e:	f7ff ff63 	bl	8005208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005342:	f7ff f865 	bl	8004410 <vTaskSwitchContext>
	prvTaskExitError();
 8005346:	f7ff ff1d 	bl	8005184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	e000ed00 	.word	0xe000ed00
 8005358:	410fc271 	.word	0x410fc271
 800535c:	410fc270 	.word	0x410fc270
 8005360:	e000e400 	.word	0xe000e400
 8005364:	200002d4 	.word	0x200002d4
 8005368:	200002d8 	.word	0x200002d8
 800536c:	e000ed20 	.word	0xe000ed20
 8005370:	20000024 	.word	0x20000024
 8005374:	e000ef34 	.word	0xe000ef34

08005378 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	607b      	str	r3, [r7, #4]
}
 8005390:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005392:	4b10      	ldr	r3, [pc, #64]	@ (80053d4 <vPortEnterCritical+0x5c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	4a0e      	ldr	r2, [pc, #56]	@ (80053d4 <vPortEnterCritical+0x5c>)
 800539a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800539c:	4b0d      	ldr	r3, [pc, #52]	@ (80053d4 <vPortEnterCritical+0x5c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d110      	bne.n	80053c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053a4:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <vPortEnterCritical+0x60>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	603b      	str	r3, [r7, #0]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <vPortEnterCritical+0x4a>
	}
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20000024 	.word	0x20000024
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053e2:	4b12      	ldr	r3, [pc, #72]	@ (800542c <vPortExitCritical+0x50>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <vPortExitCritical+0x26>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	607b      	str	r3, [r7, #4]
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005402:	4b0a      	ldr	r3, [pc, #40]	@ (800542c <vPortExitCritical+0x50>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3b01      	subs	r3, #1
 8005408:	4a08      	ldr	r2, [pc, #32]	@ (800542c <vPortExitCritical+0x50>)
 800540a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800540c:	4b07      	ldr	r3, [pc, #28]	@ (800542c <vPortExitCritical+0x50>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d105      	bne.n	8005420 <vPortExitCritical+0x44>
 8005414:	2300      	movs	r3, #0
 8005416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f383 8811 	msr	BASEPRI, r3
}
 800541e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	20000024 	.word	0x20000024

08005430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005430:	f3ef 8009 	mrs	r0, PSP
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	4b15      	ldr	r3, [pc, #84]	@ (8005490 <pxCurrentTCBConst>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	f01e 0f10 	tst.w	lr, #16
 8005440:	bf08      	it	eq
 8005442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544a:	6010      	str	r0, [r2, #0]
 800544c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005450:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005454:	f380 8811 	msr	BASEPRI, r0
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f7fe ffd6 	bl	8004410 <vTaskSwitchContext>
 8005464:	f04f 0000 	mov.w	r0, #0
 8005468:	f380 8811 	msr	BASEPRI, r0
 800546c:	bc09      	pop	{r0, r3}
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	6808      	ldr	r0, [r1, #0]
 8005472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005476:	f01e 0f10 	tst.w	lr, #16
 800547a:	bf08      	it	eq
 800547c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005480:	f380 8809 	msr	PSP, r0
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	f3af 8000 	nop.w

08005490 <pxCurrentTCBConst>:
 8005490:	2000016c 	.word	0x2000016c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop

08005498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	607b      	str	r3, [r7, #4]
}
 80054b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054b2:	f7fe fef3 	bl	800429c <xTaskIncrementTick>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054bc:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <SysTick_Handler+0x40>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	2300      	movs	r3, #0
 80054c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f383 8811 	msr	BASEPRI, r3
}
 80054ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005510 <vPortSetupTimerInterrupt+0x34>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005514 <vPortSetupTimerInterrupt+0x38>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005518 <vPortSetupTimerInterrupt+0x3c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a0a      	ldr	r2, [pc, #40]	@ (800551c <vPortSetupTimerInterrupt+0x40>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	099b      	lsrs	r3, r3, #6
 80054f8:	4a09      	ldr	r2, [pc, #36]	@ (8005520 <vPortSetupTimerInterrupt+0x44>)
 80054fa:	3b01      	subs	r3, #1
 80054fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054fe:	4b04      	ldr	r3, [pc, #16]	@ (8005510 <vPortSetupTimerInterrupt+0x34>)
 8005500:	2207      	movs	r2, #7
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	e000e010 	.word	0xe000e010
 8005514:	e000e018 	.word	0xe000e018
 8005518:	20000000 	.word	0x20000000
 800551c:	10624dd3 	.word	0x10624dd3
 8005520:	e000e014 	.word	0xe000e014

08005524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005524:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005534 <vPortEnableVFP+0x10>
 8005528:	6801      	ldr	r1, [r0, #0]
 800552a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800552e:	6001      	str	r1, [r0, #0]
 8005530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005532:	bf00      	nop
 8005534:	e000ed88 	.word	0xe000ed88

08005538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800553e:	f3ef 8305 	mrs	r3, IPSR
 8005542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b0f      	cmp	r3, #15
 8005548:	d915      	bls.n	8005576 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800554a:	4a18      	ldr	r2, [pc, #96]	@ (80055ac <vPortValidateInterruptPriority+0x74>)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005554:	4b16      	ldr	r3, [pc, #88]	@ (80055b0 <vPortValidateInterruptPriority+0x78>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	7afa      	ldrb	r2, [r7, #11]
 800555a:	429a      	cmp	r2, r3
 800555c:	d20b      	bcs.n	8005576 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	607b      	str	r3, [r7, #4]
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005576:	4b0f      	ldr	r3, [pc, #60]	@ (80055b4 <vPortValidateInterruptPriority+0x7c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800557e:	4b0e      	ldr	r3, [pc, #56]	@ (80055b8 <vPortValidateInterruptPriority+0x80>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d90b      	bls.n	800559e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	603b      	str	r3, [r7, #0]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <vPortValidateInterruptPriority+0x62>
	}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	e000e3f0 	.word	0xe000e3f0
 80055b0:	200002d4 	.word	0x200002d4
 80055b4:	e000ed0c 	.word	0xe000ed0c
 80055b8:	200002d8 	.word	0x200002d8

080055bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	@ 0x28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055c8:	f7fe fdac 	bl	8004124 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055cc:	4b5c      	ldr	r3, [pc, #368]	@ (8005740 <pvPortMalloc+0x184>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055d4:	f000 f924 	bl	8005820 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005744 <pvPortMalloc+0x188>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4013      	ands	r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f040 8095 	bne.w	8005710 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01e      	beq.n	800562a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055ec:	2208      	movs	r2, #8
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4413      	add	r3, r2
 80055f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d015      	beq.n	800562a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f023 0307 	bic.w	r3, r3, #7
 8005604:	3308      	adds	r3, #8
 8005606:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00b      	beq.n	800562a <pvPortMalloc+0x6e>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	617b      	str	r3, [r7, #20]
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	e7fd      	b.n	8005626 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d06f      	beq.n	8005710 <pvPortMalloc+0x154>
 8005630:	4b45      	ldr	r3, [pc, #276]	@ (8005748 <pvPortMalloc+0x18c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d86a      	bhi.n	8005710 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800563a:	4b44      	ldr	r3, [pc, #272]	@ (800574c <pvPortMalloc+0x190>)
 800563c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800563e:	4b43      	ldr	r3, [pc, #268]	@ (800574c <pvPortMalloc+0x190>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005644:	e004      	b.n	8005650 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	429a      	cmp	r2, r3
 8005658:	d903      	bls.n	8005662 <pvPortMalloc+0xa6>
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f1      	bne.n	8005646 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005662:	4b37      	ldr	r3, [pc, #220]	@ (8005740 <pvPortMalloc+0x184>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005668:	429a      	cmp	r2, r3
 800566a:	d051      	beq.n	8005710 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2208      	movs	r2, #8
 8005672:	4413      	add	r3, r2
 8005674:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	1ad2      	subs	r2, r2, r3
 8005686:	2308      	movs	r3, #8
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	429a      	cmp	r2, r3
 800568c:	d920      	bls.n	80056d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800568e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4413      	add	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <pvPortMalloc+0xfc>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	613b      	str	r3, [r7, #16]
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	e7fd      	b.n	80056b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056ca:	69b8      	ldr	r0, [r7, #24]
 80056cc:	f000 f90a 	bl	80058e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005748 <pvPortMalloc+0x18c>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	4a1b      	ldr	r2, [pc, #108]	@ (8005748 <pvPortMalloc+0x18c>)
 80056dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056de:	4b1a      	ldr	r3, [pc, #104]	@ (8005748 <pvPortMalloc+0x18c>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005750 <pvPortMalloc+0x194>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d203      	bcs.n	80056f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056ea:	4b17      	ldr	r3, [pc, #92]	@ (8005748 <pvPortMalloc+0x18c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a18      	ldr	r2, [pc, #96]	@ (8005750 <pvPortMalloc+0x194>)
 80056f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	4b13      	ldr	r3, [pc, #76]	@ (8005744 <pvPortMalloc+0x188>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005706:	4b13      	ldr	r3, [pc, #76]	@ (8005754 <pvPortMalloc+0x198>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3301      	adds	r3, #1
 800570c:	4a11      	ldr	r2, [pc, #68]	@ (8005754 <pvPortMalloc+0x198>)
 800570e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005710:	f7fe fd16 	bl	8004140 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <pvPortMalloc+0x17a>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60fb      	str	r3, [r7, #12]
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	e7fd      	b.n	8005732 <pvPortMalloc+0x176>
	return pvReturn;
 8005736:	69fb      	ldr	r3, [r7, #28]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3728      	adds	r7, #40	@ 0x28
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20009f24 	.word	0x20009f24
 8005744:	20009f38 	.word	0x20009f38
 8005748:	20009f28 	.word	0x20009f28
 800574c:	20009f1c 	.word	0x20009f1c
 8005750:	20009f2c 	.word	0x20009f2c
 8005754:	20009f30 	.word	0x20009f30

08005758 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d04f      	beq.n	800580a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800576a:	2308      	movs	r3, #8
 800576c:	425b      	negs	r3, r3
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4413      	add	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	4b25      	ldr	r3, [pc, #148]	@ (8005814 <vPortFree+0xbc>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <vPortFree+0x46>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	60fb      	str	r3, [r7, #12]
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	e7fd      	b.n	800579a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <vPortFree+0x66>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	60bb      	str	r3, [r7, #8]
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	e7fd      	b.n	80057ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	4b14      	ldr	r3, [pc, #80]	@ (8005814 <vPortFree+0xbc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4013      	ands	r3, r2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01e      	beq.n	800580a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11a      	bne.n	800580a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005814 <vPortFree+0xbc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	43db      	mvns	r3, r3
 80057de:	401a      	ands	r2, r3
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057e4:	f7fe fc9e 	bl	8004124 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005818 <vPortFree+0xc0>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4413      	add	r3, r2
 80057f2:	4a09      	ldr	r2, [pc, #36]	@ (8005818 <vPortFree+0xc0>)
 80057f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057f6:	6938      	ldr	r0, [r7, #16]
 80057f8:	f000 f874 	bl	80058e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057fc:	4b07      	ldr	r3, [pc, #28]	@ (800581c <vPortFree+0xc4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	4a06      	ldr	r2, [pc, #24]	@ (800581c <vPortFree+0xc4>)
 8005804:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005806:	f7fe fc9b 	bl	8004140 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800580a:	bf00      	nop
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20009f38 	.word	0x20009f38
 8005818:	20009f28 	.word	0x20009f28
 800581c:	20009f34 	.word	0x20009f34

08005820 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005826:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800582a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800582c:	4b27      	ldr	r3, [pc, #156]	@ (80058cc <prvHeapInit+0xac>)
 800582e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00c      	beq.n	8005854 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3307      	adds	r3, #7
 800583e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0307 	bic.w	r3, r3, #7
 8005846:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	4a1f      	ldr	r2, [pc, #124]	@ (80058cc <prvHeapInit+0xac>)
 8005850:	4413      	add	r3, r2
 8005852:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005858:	4a1d      	ldr	r2, [pc, #116]	@ (80058d0 <prvHeapInit+0xb0>)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800585e:	4b1c      	ldr	r3, [pc, #112]	@ (80058d0 <prvHeapInit+0xb0>)
 8005860:	2200      	movs	r2, #0
 8005862:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	4413      	add	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800586c:	2208      	movs	r2, #8
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0307 	bic.w	r3, r3, #7
 800587a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4a15      	ldr	r2, [pc, #84]	@ (80058d4 <prvHeapInit+0xb4>)
 8005880:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005882:	4b14      	ldr	r3, [pc, #80]	@ (80058d4 <prvHeapInit+0xb4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2200      	movs	r2, #0
 8005888:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800588a:	4b12      	ldr	r3, [pc, #72]	@ (80058d4 <prvHeapInit+0xb4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	1ad2      	subs	r2, r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058a0:	4b0c      	ldr	r3, [pc, #48]	@ (80058d4 <prvHeapInit+0xb4>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4a0a      	ldr	r2, [pc, #40]	@ (80058d8 <prvHeapInit+0xb8>)
 80058ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4a09      	ldr	r2, [pc, #36]	@ (80058dc <prvHeapInit+0xbc>)
 80058b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058b8:	4b09      	ldr	r3, [pc, #36]	@ (80058e0 <prvHeapInit+0xc0>)
 80058ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80058be:	601a      	str	r2, [r3, #0]
}
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	200002dc 	.word	0x200002dc
 80058d0:	20009f1c 	.word	0x20009f1c
 80058d4:	20009f24 	.word	0x20009f24
 80058d8:	20009f2c 	.word	0x20009f2c
 80058dc:	20009f28 	.word	0x20009f28
 80058e0:	20009f38 	.word	0x20009f38

080058e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058ec:	4b28      	ldr	r3, [pc, #160]	@ (8005990 <prvInsertBlockIntoFreeList+0xac>)
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e002      	b.n	80058f8 <prvInsertBlockIntoFreeList+0x14>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d8f7      	bhi.n	80058f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	4413      	add	r3, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	429a      	cmp	r2, r3
 8005912:	d108      	bne.n	8005926 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	441a      	add	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	441a      	add	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d118      	bne.n	800596c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	4b15      	ldr	r3, [pc, #84]	@ (8005994 <prvInsertBlockIntoFreeList+0xb0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d00d      	beq.n	8005962 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	441a      	add	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e008      	b.n	8005974 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005962:	4b0c      	ldr	r3, [pc, #48]	@ (8005994 <prvInsertBlockIntoFreeList+0xb0>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e003      	b.n	8005974 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	429a      	cmp	r2, r3
 800597a:	d002      	beq.n	8005982 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20009f1c 	.word	0x20009f1c
 8005994:	20009f24 	.word	0x20009f24

08005998 <LL_USART_IsActiveFlag_PE>:
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <LL_USART_IsActiveFlag_PE+0x18>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <LL_USART_IsActiveFlag_PE+0x1a>
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <LL_USART_IsActiveFlag_FE>:
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d101      	bne.n	80059d6 <LL_USART_IsActiveFlag_FE+0x18>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <LL_USART_IsActiveFlag_FE+0x1a>
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <LL_USART_IsActiveFlag_NE>:
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d101      	bne.n	80059fc <LL_USART_IsActiveFlag_NE+0x18>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <LL_USART_IsActiveFlag_NE+0x1a>
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <LL_USART_IsActiveFlag_ORE>:
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d101      	bne.n	8005a22 <LL_USART_IsActiveFlag_ORE+0x18>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <LL_USART_IsActiveFlag_ORE+0x1a>
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d101      	bne.n	8005a48 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	b2db      	uxtb	r3, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <_ZN10UARTDriver11GetRxErrorsEv>:
/**
 * @brief Checks UART Rx error flags, if any are set returns true
 * @return true if any error flags are set, false otherwise
 */
bool UARTDriver::GetRxErrors()
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
    bool hasErrors = false;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	73fb      	strb	r3, [r7, #15]

    if (LL_USART_IsActiveFlag_ORE(kUart_)) {
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff ffc2 	bl	8005a0a <LL_USART_IsActiveFlag_ORE>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <_ZN10UARTDriver11GetRxErrorsEv+0x2c>
        hasErrors = true;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
 8005a9a:	e02e      	b.n	8005afa <_ZN10UARTDriver11GetRxErrorsEv+0x8a>
    }
    else if (LL_USART_IsActiveFlag_NE(kUart_)) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff ff9f 	bl	80059e4 <LL_USART_IsActiveFlag_NE>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bf14      	ite	ne
 8005aac:	2301      	movne	r3, #1
 8005aae:	2300      	moveq	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <_ZN10UARTDriver11GetRxErrorsEv+0x4c>
        hasErrors = true;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	73fb      	strb	r3, [r7, #15]
 8005aba:	e01e      	b.n	8005afa <_ZN10UARTDriver11GetRxErrorsEv+0x8a>
    }
    else if(LL_USART_IsActiveFlag_FE(kUart_)) {
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff ff7c 	bl	80059be <LL_USART_IsActiveFlag_FE>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bf14      	ite	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	2300      	moveq	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <_ZN10UARTDriver11GetRxErrorsEv+0x6c>
        hasErrors = true;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	73fb      	strb	r3, [r7, #15]
 8005ada:	e00e      	b.n	8005afa <_ZN10UARTDriver11GetRxErrorsEv+0x8a>
    }
    else if(LL_USART_IsActiveFlag_PE(kUart_)) {
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff ff59 	bl	8005998 <LL_USART_IsActiveFlag_PE>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	bf14      	ite	ne
 8005aec:	2301      	movne	r3, #1
 8005aee:	2300      	moveq	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <_ZN10UARTDriver11GetRxErrorsEv+0x8a>
        hasErrors = true;
 8005af6:	2301      	movs	r3, #1
 8005af8:	73fb      	strb	r3, [r7, #15]
    }

    return hasErrors;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <_ZN10UARTDriver14HandleIRQ_UARTEv>:
/**
 * @brief Handles an interrupt for the UART
 * @attention MUST be called inside USARTx_IRQHandler
 */
void UARTDriver::HandleIRQ_UART()
{
 8005b04:	b5b0      	push	{r4, r5, r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
    // Call the callback if RXNE is set
    if (LL_USART_IsActiveFlag_RXNE(kUart_)) {
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff ff8d 	bl	8005a30 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	bf14      	ite	ne
 8005b1c:	2301      	movne	r3, #1
 8005b1e:	2300      	moveq	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d01d      	beq.n	8005b62 <_ZN10UARTDriver14HandleIRQ_UARTEv+0x5e>
        // Read the data from the data register
        if (rxCharBuf_ != nullptr) {
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d008      	beq.n	8005b40 <_ZN10UARTDriver14HandleIRQ_UARTEv+0x3c>
            *rxCharBuf_ = LL_USART_ReceiveData8(kUart_);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685c      	ldr	r4, [r3, #4]
 8005b36:	4610      	mov	r0, r2
 8005b38:	f7ff ff8d 	bl	8005a56 <LL_USART_ReceiveData8>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	7023      	strb	r3, [r4, #0]
        }

        // Call the receiver interrupt
        if(rxReceiver_ != nullptr) {
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00c      	beq.n	8005b62 <_ZN10UARTDriver14HandleIRQ_UARTEv+0x5e>
            rxReceiver_->InterruptRxData(GetRxErrors());
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681c      	ldr	r4, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689d      	ldr	r5, [r3, #8]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff ff8b 	bl	8005a70 <_ZN10UARTDriver11GetRxErrorsEv>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4628      	mov	r0, r5
 8005b60:	47a0      	blx	r4
        }
    }
}
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bdb0      	pop	{r4, r5, r7, pc}

08005b6a <memset>:
 8005b6a:	4402      	add	r2, r0
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d100      	bne.n	8005b74 <memset+0xa>
 8005b72:	4770      	bx	lr
 8005b74:	f803 1b01 	strb.w	r1, [r3], #1
 8005b78:	e7f9      	b.n	8005b6e <memset+0x4>
	...

08005b7c <_reclaim_reent>:
 8005b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8005c34 <_reclaim_reent+0xb8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4283      	cmp	r3, r0
 8005b82:	b570      	push	{r4, r5, r6, lr}
 8005b84:	4604      	mov	r4, r0
 8005b86:	d053      	beq.n	8005c30 <_reclaim_reent+0xb4>
 8005b88:	69c3      	ldr	r3, [r0, #28]
 8005b8a:	b31b      	cbz	r3, 8005bd4 <_reclaim_reent+0x58>
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	b163      	cbz	r3, 8005baa <_reclaim_reent+0x2e>
 8005b90:	2500      	movs	r5, #0
 8005b92:	69e3      	ldr	r3, [r4, #28]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	5959      	ldr	r1, [r3, r5]
 8005b98:	b9b1      	cbnz	r1, 8005bc8 <_reclaim_reent+0x4c>
 8005b9a:	3504      	adds	r5, #4
 8005b9c:	2d80      	cmp	r5, #128	@ 0x80
 8005b9e:	d1f8      	bne.n	8005b92 <_reclaim_reent+0x16>
 8005ba0:	69e3      	ldr	r3, [r4, #28]
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	68d9      	ldr	r1, [r3, #12]
 8005ba6:	f000 f87b 	bl	8005ca0 <_free_r>
 8005baa:	69e3      	ldr	r3, [r4, #28]
 8005bac:	6819      	ldr	r1, [r3, #0]
 8005bae:	b111      	cbz	r1, 8005bb6 <_reclaim_reent+0x3a>
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f000 f875 	bl	8005ca0 <_free_r>
 8005bb6:	69e3      	ldr	r3, [r4, #28]
 8005bb8:	689d      	ldr	r5, [r3, #8]
 8005bba:	b15d      	cbz	r5, 8005bd4 <_reclaim_reent+0x58>
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	682d      	ldr	r5, [r5, #0]
 8005bc2:	f000 f86d 	bl	8005ca0 <_free_r>
 8005bc6:	e7f8      	b.n	8005bba <_reclaim_reent+0x3e>
 8005bc8:	680e      	ldr	r6, [r1, #0]
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f000 f868 	bl	8005ca0 <_free_r>
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	e7e1      	b.n	8005b98 <_reclaim_reent+0x1c>
 8005bd4:	6961      	ldr	r1, [r4, #20]
 8005bd6:	b111      	cbz	r1, 8005bde <_reclaim_reent+0x62>
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f000 f861 	bl	8005ca0 <_free_r>
 8005bde:	69e1      	ldr	r1, [r4, #28]
 8005be0:	b111      	cbz	r1, 8005be8 <_reclaim_reent+0x6c>
 8005be2:	4620      	mov	r0, r4
 8005be4:	f000 f85c 	bl	8005ca0 <_free_r>
 8005be8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005bea:	b111      	cbz	r1, 8005bf2 <_reclaim_reent+0x76>
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 f857 	bl	8005ca0 <_free_r>
 8005bf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bf4:	b111      	cbz	r1, 8005bfc <_reclaim_reent+0x80>
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f000 f852 	bl	8005ca0 <_free_r>
 8005bfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005bfe:	b111      	cbz	r1, 8005c06 <_reclaim_reent+0x8a>
 8005c00:	4620      	mov	r0, r4
 8005c02:	f000 f84d 	bl	8005ca0 <_free_r>
 8005c06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005c08:	b111      	cbz	r1, 8005c10 <_reclaim_reent+0x94>
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f000 f848 	bl	8005ca0 <_free_r>
 8005c10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005c12:	b111      	cbz	r1, 8005c1a <_reclaim_reent+0x9e>
 8005c14:	4620      	mov	r0, r4
 8005c16:	f000 f843 	bl	8005ca0 <_free_r>
 8005c1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005c1c:	b111      	cbz	r1, 8005c24 <_reclaim_reent+0xa8>
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f000 f83e 	bl	8005ca0 <_free_r>
 8005c24:	6a23      	ldr	r3, [r4, #32]
 8005c26:	b11b      	cbz	r3, 8005c30 <_reclaim_reent+0xb4>
 8005c28:	4620      	mov	r0, r4
 8005c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c2e:	4718      	bx	r3
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
 8005c32:	bf00      	nop
 8005c34:	20000028 	.word	0x20000028

08005c38 <__libc_init_array>:
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	4d0d      	ldr	r5, [pc, #52]	@ (8005c70 <__libc_init_array+0x38>)
 8005c3c:	4c0d      	ldr	r4, [pc, #52]	@ (8005c74 <__libc_init_array+0x3c>)
 8005c3e:	1b64      	subs	r4, r4, r5
 8005c40:	10a4      	asrs	r4, r4, #2
 8005c42:	2600      	movs	r6, #0
 8005c44:	42a6      	cmp	r6, r4
 8005c46:	d109      	bne.n	8005c5c <__libc_init_array+0x24>
 8005c48:	4d0b      	ldr	r5, [pc, #44]	@ (8005c78 <__libc_init_array+0x40>)
 8005c4a:	4c0c      	ldr	r4, [pc, #48]	@ (8005c7c <__libc_init_array+0x44>)
 8005c4c:	f000 f87e 	bl	8005d4c <_init>
 8005c50:	1b64      	subs	r4, r4, r5
 8005c52:	10a4      	asrs	r4, r4, #2
 8005c54:	2600      	movs	r6, #0
 8005c56:	42a6      	cmp	r6, r4
 8005c58:	d105      	bne.n	8005c66 <__libc_init_array+0x2e>
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
 8005c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c60:	4798      	blx	r3
 8005c62:	3601      	adds	r6, #1
 8005c64:	e7ee      	b.n	8005c44 <__libc_init_array+0xc>
 8005c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6a:	4798      	blx	r3
 8005c6c:	3601      	adds	r6, #1
 8005c6e:	e7f2      	b.n	8005c56 <__libc_init_array+0x1e>
 8005c70:	08005de4 	.word	0x08005de4
 8005c74:	08005de4 	.word	0x08005de4
 8005c78:	08005de4 	.word	0x08005de4
 8005c7c:	08005dec 	.word	0x08005dec

08005c80 <__retarget_lock_acquire_recursive>:
 8005c80:	4770      	bx	lr

08005c82 <__retarget_lock_release_recursive>:
 8005c82:	4770      	bx	lr

08005c84 <memcpy>:
 8005c84:	440a      	add	r2, r1
 8005c86:	4291      	cmp	r1, r2
 8005c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c8c:	d100      	bne.n	8005c90 <memcpy+0xc>
 8005c8e:	4770      	bx	lr
 8005c90:	b510      	push	{r4, lr}
 8005c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c9a:	4291      	cmp	r1, r2
 8005c9c:	d1f9      	bne.n	8005c92 <memcpy+0xe>
 8005c9e:	bd10      	pop	{r4, pc}

08005ca0 <_free_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	2900      	cmp	r1, #0
 8005ca6:	d041      	beq.n	8005d2c <_free_r+0x8c>
 8005ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cac:	1f0c      	subs	r4, r1, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	bfb8      	it	lt
 8005cb2:	18e4      	addlt	r4, r4, r3
 8005cb4:	f000 f83e 	bl	8005d34 <__malloc_lock>
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d30 <_free_r+0x90>)
 8005cba:	6813      	ldr	r3, [r2, #0]
 8005cbc:	b933      	cbnz	r3, 8005ccc <_free_r+0x2c>
 8005cbe:	6063      	str	r3, [r4, #4]
 8005cc0:	6014      	str	r4, [r2, #0]
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cc8:	f000 b83a 	b.w	8005d40 <__malloc_unlock>
 8005ccc:	42a3      	cmp	r3, r4
 8005cce:	d908      	bls.n	8005ce2 <_free_r+0x42>
 8005cd0:	6820      	ldr	r0, [r4, #0]
 8005cd2:	1821      	adds	r1, r4, r0
 8005cd4:	428b      	cmp	r3, r1
 8005cd6:	bf01      	itttt	eq
 8005cd8:	6819      	ldreq	r1, [r3, #0]
 8005cda:	685b      	ldreq	r3, [r3, #4]
 8005cdc:	1809      	addeq	r1, r1, r0
 8005cde:	6021      	streq	r1, [r4, #0]
 8005ce0:	e7ed      	b.n	8005cbe <_free_r+0x1e>
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	b10b      	cbz	r3, 8005cec <_free_r+0x4c>
 8005ce8:	42a3      	cmp	r3, r4
 8005cea:	d9fa      	bls.n	8005ce2 <_free_r+0x42>
 8005cec:	6811      	ldr	r1, [r2, #0]
 8005cee:	1850      	adds	r0, r2, r1
 8005cf0:	42a0      	cmp	r0, r4
 8005cf2:	d10b      	bne.n	8005d0c <_free_r+0x6c>
 8005cf4:	6820      	ldr	r0, [r4, #0]
 8005cf6:	4401      	add	r1, r0
 8005cf8:	1850      	adds	r0, r2, r1
 8005cfa:	4283      	cmp	r3, r0
 8005cfc:	6011      	str	r1, [r2, #0]
 8005cfe:	d1e0      	bne.n	8005cc2 <_free_r+0x22>
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	6053      	str	r3, [r2, #4]
 8005d06:	4408      	add	r0, r1
 8005d08:	6010      	str	r0, [r2, #0]
 8005d0a:	e7da      	b.n	8005cc2 <_free_r+0x22>
 8005d0c:	d902      	bls.n	8005d14 <_free_r+0x74>
 8005d0e:	230c      	movs	r3, #12
 8005d10:	602b      	str	r3, [r5, #0]
 8005d12:	e7d6      	b.n	8005cc2 <_free_r+0x22>
 8005d14:	6820      	ldr	r0, [r4, #0]
 8005d16:	1821      	adds	r1, r4, r0
 8005d18:	428b      	cmp	r3, r1
 8005d1a:	bf04      	itt	eq
 8005d1c:	6819      	ldreq	r1, [r3, #0]
 8005d1e:	685b      	ldreq	r3, [r3, #4]
 8005d20:	6063      	str	r3, [r4, #4]
 8005d22:	bf04      	itt	eq
 8005d24:	1809      	addeq	r1, r1, r0
 8005d26:	6021      	streq	r1, [r4, #0]
 8005d28:	6054      	str	r4, [r2, #4]
 8005d2a:	e7ca      	b.n	8005cc2 <_free_r+0x22>
 8005d2c:	bd38      	pop	{r3, r4, r5, pc}
 8005d2e:	bf00      	nop
 8005d30:	2000a078 	.word	0x2000a078

08005d34 <__malloc_lock>:
 8005d34:	4801      	ldr	r0, [pc, #4]	@ (8005d3c <__malloc_lock+0x8>)
 8005d36:	f7ff bfa3 	b.w	8005c80 <__retarget_lock_acquire_recursive>
 8005d3a:	bf00      	nop
 8005d3c:	2000a074 	.word	0x2000a074

08005d40 <__malloc_unlock>:
 8005d40:	4801      	ldr	r0, [pc, #4]	@ (8005d48 <__malloc_unlock+0x8>)
 8005d42:	f7ff bf9e 	b.w	8005c82 <__retarget_lock_release_recursive>
 8005d46:	bf00      	nop
 8005d48:	2000a074 	.word	0x2000a074

08005d4c <_init>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr

08005d58 <_fini>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	bf00      	nop
 8005d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5e:	bc08      	pop	{r3}
 8005d60:	469e      	mov	lr, r3
 8005d62:	4770      	bx	lr
