
STM32G491METemplateRepository.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cac8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800cca8  0800cca8  0000dca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd90  0800cd90  0000e1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800cd90  0800cd90  0000e1d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800cd90  0800cd90  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cd90  0800cd90  0000dd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd98  0800cd98  0000dd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800cd9c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010e28  200001d4  0800cf70  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010ffc  0800cf70  0000effc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024f89  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068e3  00000000  00000000  0003318d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff0  00000000  00000000  00039a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000180c  00000000  00000000  0003ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a758  00000000  00000000  0003d26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000a18d  00000000  00000000  000579c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00061b51  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000084e8  00000000  00000000  00061b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000068  00000000  00000000  0006a07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cc90 	.word	0x0800cc90

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800cc90 	.word	0x0800cc90

08000220 <cpp_USART2_IRQHandler>:
#include "RunInterface.hpp"

extern "C" {
void run_interface() { run_main(); }

void cpp_USART2_IRQHandler() {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
		Driver::usart2.HandleIRQ_UART();
 8000224:	4802      	ldr	r0, [pc, #8]	@ (8000230 <cpp_USART2_IRQHandler+0x10>)
 8000226:	f00b ff3d 	bl	800c0a4 <_ZN10UARTDriver14HandleIRQ_UARTEv>
	}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	200001f0 	.word	0x200001f0

08000234 <_ZN10UARTDriverC1EP13USART_TypeDef>:
 *	      based on the STM32 LL Library
 */
class UARTDriver
{
public:
	UARTDriver(USART_TypeDef* uartInstance) :
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
		kUart_(uartInstance),
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	601a      	str	r2, [r3, #0]
		rxCharBuf_(nullptr),
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2200      	movs	r2, #0
 8000248:	605a      	str	r2, [r3, #4]
		rxReceiver_(nullptr) {}
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4618      	mov	r0, r3
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
	...

08000260 <_Z41__static_initialization_and_destruction_0v>:

  while (1) {
    osDelay(100);
    HAL_NVIC_SystemReset();
  }
}
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
UARTDriver usart2(USART2);
 8000264:	4902      	ldr	r1, [pc, #8]	@ (8000270 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8000266:	4803      	ldr	r0, [pc, #12]	@ (8000274 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8000268:	f7ff ffe4 	bl	8000234 <_ZN10UARTDriverC1EP13USART_TypeDef>
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40004400 	.word	0x40004400
 8000274:	200001f0 	.word	0x200001f0

08000278 <_GLOBAL__sub_I__ZN6Driver6usart2E>:
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
 800027c:	f7ff fff0 	bl	8000260 <_Z41__static_initialization_and_destruction_0v>
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <__NVIC_GetPriorityGrouping+0x18>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	0a1b      	lsrs	r3, r3, #8
 800028e:	f003 0307 	and.w	r3, r3, #7
}
 8000292:	4618      	mov	r0, r3
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db0b      	blt.n	80002ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f003 021f 	and.w	r2, r3, #31
 80002b8:	4907      	ldr	r1, [pc, #28]	@ (80002d8 <__NVIC_EnableIRQ+0x38>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	095b      	lsrs	r3, r3, #5
 80002c0:	2001      	movs	r0, #1
 80002c2:	fa00 f202 	lsl.w	r2, r0, r2
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e100 	.word	0xe000e100

080002dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	6039      	str	r1, [r7, #0]
 80002e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	db0a      	blt.n	8000306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	490c      	ldr	r1, [pc, #48]	@ (8000328 <__NVIC_SetPriority+0x4c>)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	0112      	lsls	r2, r2, #4
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	440b      	add	r3, r1
 8000300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000304:	e00a      	b.n	800031c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4908      	ldr	r1, [pc, #32]	@ (800032c <__NVIC_SetPriority+0x50>)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3b04      	subs	r3, #4
 8000314:	0112      	lsls	r2, r2, #4
 8000316:	b2d2      	uxtb	r2, r2
 8000318:	440b      	add	r3, r1
 800031a:	761a      	strb	r2, [r3, #24]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000330:	b480      	push	{r7}
 8000332:	b089      	sub	sp, #36	@ 0x24
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	f003 0307 	and.w	r3, r3, #7
 8000342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000344:	69fb      	ldr	r3, [r7, #28]
 8000346:	f1c3 0307 	rsb	r3, r3, #7
 800034a:	2b04      	cmp	r3, #4
 800034c:	bf28      	it	cs
 800034e:	2304      	movcs	r3, #4
 8000350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000352:	69fb      	ldr	r3, [r7, #28]
 8000354:	3304      	adds	r3, #4
 8000356:	2b06      	cmp	r3, #6
 8000358:	d902      	bls.n	8000360 <NVIC_EncodePriority+0x30>
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	3b03      	subs	r3, #3
 800035e:	e000      	b.n	8000362 <NVIC_EncodePriority+0x32>
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	f04f 32ff 	mov.w	r2, #4294967295
 8000368:	69bb      	ldr	r3, [r7, #24]
 800036a:	fa02 f303 	lsl.w	r3, r2, r3
 800036e:	43da      	mvns	r2, r3
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	401a      	ands	r2, r3
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000378:	f04f 31ff 	mov.w	r1, #4294967295
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	43d9      	mvns	r1, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000388:	4313      	orrs	r3, r2
         );
}
 800038a:	4618      	mov	r0, r3
 800038c:	3724      	adds	r7, #36	@ 0x24
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f043 0201 	orr.w	r2, r3, #1
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	601a      	str	r2, [r3, #0]
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b089      	sub	sp, #36	@ 0x24
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3308      	adds	r3, #8
 80003e4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	e853 3f00 	ldrex	r3, [r3]
 80003ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	075b      	lsls	r3, r3, #29
 80003f8:	4313      	orrs	r3, r2
 80003fa:	61fb      	str	r3, [r7, #28]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3308      	adds	r3, #8
 8000400:	69fa      	ldr	r2, [r7, #28]
 8000402:	61ba      	str	r2, [r7, #24]
 8000404:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000406:	6979      	ldr	r1, [r7, #20]
 8000408:	69ba      	ldr	r2, [r7, #24]
 800040a:	e841 2300 	strex	r3, r2, [r1]
 800040e:	613b      	str	r3, [r7, #16]
   return(result);
 8000410:	693b      	ldr	r3, [r7, #16]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1e4      	bne.n	80003e0 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8000416:	bf00      	nop
 8000418:	bf00      	nop
 800041a:	3724      	adds	r7, #36	@ 0x24
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000424:	b480      	push	{r7}
 8000426:	b089      	sub	sp, #36	@ 0x24
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3308      	adds	r3, #8
 8000432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	e853 3f00 	ldrex	r3, [r3]
 800043a:	60bb      	str	r3, [r7, #8]
   return(result);
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	065b      	lsls	r3, r3, #25
 8000446:	4313      	orrs	r3, r2
 8000448:	61fb      	str	r3, [r7, #28]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3308      	adds	r3, #8
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	61ba      	str	r2, [r7, #24]
 8000452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000454:	6979      	ldr	r1, [r7, #20]
 8000456:	69ba      	ldr	r2, [r7, #24]
 8000458:	e841 2300 	strex	r3, r2, [r1]
 800045c:	613b      	str	r3, [r7, #16]
   return(result);
 800045e:	693b      	ldr	r3, [r7, #16]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d1e4      	bne.n	800042e <LL_USART_SetRXFIFOThreshold+0xa>
}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	3724      	adds	r7, #36	@ 0x24
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	609a      	str	r2, [r3, #8]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80004b2:	d101      	bne.n	80004b8 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80004b4:	2301      	movs	r3, #1
 80004b6:	e000      	b.n	80004ba <LL_USART_IsActiveFlag_TEACK+0x1c>
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80004da:	d101      	bne.n	80004e0 <LL_USART_IsActiveFlag_REACK+0x1a>
 80004dc:	2301      	movs	r3, #1
 80004de:	e000      	b.n	80004e2 <LL_USART_IsActiveFlag_REACK+0x1c>
 80004e0:	2300      	movs	r3, #0
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
	...

080004f0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004f8:	4b08      	ldr	r3, [pc, #32]	@ (800051c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004fc:	4907      	ldr	r1, [pc, #28]	@ (800051c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4313      	orrs	r3, r2
 8000502:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4013      	ands	r3, r2
 800050c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000

08000520 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <LL_APB1_GRP1_EnableClock+0x2c>)
 800052a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800052c:	4907      	ldr	r1, [pc, #28]	@ (800054c <LL_APB1_GRP1_EnableClock+0x2c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4313      	orrs	r3, r2
 8000532:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000536:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4013      	ands	r3, r2
 800053c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053e:	68fb      	ldr	r3, [r7, #12]
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	40021000 	.word	0x40021000

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fa8c 	bl	8000a72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f825 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 f929 	bl	80007b4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000562:	f000 f863 	bl	800062c <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f883 	bl	8000670 <MX_USART2_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800056a:	f006 f963 	bl	8006834 <MX_FATFS_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <main+0x28>
    Error_Handler();
 8000574:	f000 f94f 	bl	8000816 <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 196);
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <main+0x50>)
 800057a:	1d3c      	adds	r4, r7, #4
 800057c:	461d      	mov	r5, r3
 800057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000582:	682b      	ldr	r3, [r5, #0]
 8000584:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f009 f920 	bl	80097d0 <osThreadCreate>
 8000590:	4603      	mov	r3, r0
 8000592:	4a04      	ldr	r2, [pc, #16]	@ (80005a4 <main+0x54>)
 8000594:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000596:	f009 f914 	bl	80097c2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059a:	bf00      	nop
 800059c:	e7fd      	b.n	800059a <main+0x4a>
 800059e:	bf00      	nop
 80005a0:	0800ccb4 	.word	0x0800ccb4
 80005a4:	20000220 	.word	0x20000220

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	@ 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	2238      	movs	r2, #56	@ 0x38
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f00c fa7a 	bl	800cab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ce:	f002 f987 	bl	80028e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80005d2:	2322      	movs	r3, #34	@ 0x22
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2340      	movs	r3, #64	@ 0x40
 80005de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0318 	add.w	r3, r7, #24
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fa2b 	bl	8002a48 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005f8:	f000 f90d 	bl	8000816 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000600:	2301      	movs	r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fd29 	bl	800306c <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000620:	f000 f8f9 	bl	8000816 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	@ 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000630:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <MX_CRC_Init+0x3c>)
 8000632:	4a0e      	ldr	r2, [pc, #56]	@ (800066c <MX_CRC_Init+0x40>)
 8000634:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_CRC_Init+0x3c>)
 8000638:	2200      	movs	r2, #0
 800063a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <MX_CRC_Init+0x3c>)
 800063e:	2200      	movs	r2, #0
 8000640:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_CRC_Init+0x3c>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <MX_CRC_Init+0x3c>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_CRC_Init+0x3c>)
 8000650:	2201      	movs	r2, #1
 8000652:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_CRC_Init+0x3c>)
 8000656:	f000 fb23 	bl	8000ca0 <HAL_CRC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000660:	f000 f8d9 	bl	8000816 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200001fc 	.word	0x200001fc
 800066c:	40023000 	.word	0x40023000

08000670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0a2      	sub	sp, #136	@ 0x88
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000676:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800067a:	2220      	movs	r2, #32
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f00c fa16 	bl	800cab0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2250      	movs	r2, #80	@ 0x50
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f00c fa07 	bl	800cab0 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 ff15 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART2_UART_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f000 f8ad 	bl	8000816 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80006bc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80006c0:	f7ff ff2e 	bl	8000520 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff13 	bl	80004f0 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80006ca:	2304      	movs	r3, #4
 80006cc:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006ce:	2302      	movs	r3, #2
 80006d0:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006da:	2300      	movs	r3, #0
 80006dc:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80006de:	2307      	movs	r3, #7
 80006e0:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ec:	f003 fdb7 	bl	800425e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80006f0:	2308      	movs	r3, #8
 80006f2:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006f4:	2302      	movs	r3, #2
 80006f6:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000700:	2300      	movs	r3, #0
 8000702:	663b      	str	r3, [r7, #96]	@ 0x60
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000704:	2307      	movs	r3, #7
 8000706:	667b      	str	r3, [r7, #100]	@ 0x64
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800070c:	4619      	mov	r1, r3
 800070e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000712:	f003 fda4 	bl	800425e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000716:	f7ff fdb5 	bl	8000284 <__NVIC_GetPriorityGrouping>
 800071a:	4603      	mov	r3, r0
 800071c:	2200      	movs	r2, #0
 800071e:	2105      	movs	r1, #5
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fe05 	bl	8000330 <NVIC_EncodePriority>
 8000726:	4603      	mov	r3, r0
 8000728:	4619      	mov	r1, r3
 800072a:	2026      	movs	r0, #38	@ 0x26
 800072c:	f7ff fdd6 	bl	80002dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000730:	2026      	movs	r0, #38	@ 0x26
 8000732:	f7ff fdb5 	bl	80002a0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	66bb      	str	r3, [r7, #104]	@ 0x68
  USART_InitStruct.BaudRate = 115200;
 800073a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800073e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000740:	2300      	movs	r3, #0
 8000742:	673b      	str	r3, [r7, #112]	@ 0x70
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000744:	2300      	movs	r3, #0
 8000746:	677b      	str	r3, [r7, #116]	@ 0x74
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000748:	2300      	movs	r3, #0
 800074a:	67bb      	str	r3, [r7, #120]	@ 0x78
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800074c:	230c      	movs	r3, #12
 800074e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  LL_USART_Init(USART2, &USART_InitStruct);
 800075c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000760:	4619      	mov	r1, r3
 8000762:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <MX_USART2_UART_Init+0x140>)
 8000764:	f004 f930 	bl	80049c8 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000768:	2100      	movs	r1, #0
 800076a:	4811      	ldr	r0, [pc, #68]	@ (80007b0 <MX_USART2_UART_Init+0x140>)
 800076c:	f7ff fe33 	bl	80003d6 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000770:	2100      	movs	r1, #0
 8000772:	480f      	ldr	r0, [pc, #60]	@ (80007b0 <MX_USART2_UART_Init+0x140>)
 8000774:	f7ff fe56 	bl	8000424 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000778:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <MX_USART2_UART_Init+0x140>)
 800077a:	f7ff fe1c 	bl	80003b6 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 800077e:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <MX_USART2_UART_Init+0x140>)
 8000780:	f7ff fe77 	bl	8000472 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000784:	480a      	ldr	r0, [pc, #40]	@ (80007b0 <MX_USART2_UART_Init+0x140>)
 8000786:	f7ff fe06 	bl	8000396 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 800078a:	bf00      	nop
 800078c:	4808      	ldr	r0, [pc, #32]	@ (80007b0 <MX_USART2_UART_Init+0x140>)
 800078e:	f7ff fe86 	bl	800049e <LL_USART_IsActiveFlag_TEACK>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0f9      	beq.n	800078c <MX_USART2_UART_Init+0x11c>
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_USART2_UART_Init+0x140>)
 800079a:	f7ff fe94 	bl	80004c6 <LL_USART_IsActiveFlag_REACK>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0f3      	beq.n	800078c <MX_USART2_UART_Init+0x11c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3788      	adds	r7, #136	@ 0x88
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_GPIO_Init+0x2c>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <MX_GPIO_Init+0x2c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_GPIO_Init+0x2c>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 80007ec:	f00b fc8e 	bl	800c10c <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f009 f814 	bl	800981e <osDelay>
 80007f6:	e7fb      	b.n	80007f0 <StartDefaultTask+0xc>

080007f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000808:	d101      	bne.n	800080e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800080a:	f000 f94b 	bl	8000aa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800081a:	b672      	cpsid	i
}
 800081c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081e:	bf00      	nop
 8000820:	e7fd      	b.n	800081e <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <HAL_MspInit+0x50>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082e:	4a11      	ldr	r2, [pc, #68]	@ (8000874 <HAL_MspInit+0x50>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	@ 0x60
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <HAL_MspInit+0x50>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <HAL_MspInit+0x50>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000846:	4a0b      	ldr	r2, [pc, #44]	@ (8000874 <HAL_MspInit+0x50>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	@ 0x58
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <HAL_MspInit+0x50>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	210f      	movs	r1, #15
 800085e:	f06f 0001 	mvn.w	r0, #1
 8000862:	f000 f9f5 	bl	8000c50 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000866:	f002 f8df 	bl	8002a28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <HAL_CRC_MspInit+0x38>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d10b      	bne.n	80008a2 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800088a:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <HAL_CRC_MspInit+0x3c>)
 800088c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800088e:	4a09      	ldr	r2, [pc, #36]	@ (80008b4 <HAL_CRC_MspInit+0x3c>)
 8000890:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000894:	6493      	str	r3, [r2, #72]	@ 0x48
 8000896:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <HAL_CRC_MspInit+0x3c>)
 8000898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800089a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023000 	.word	0x40023000
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	@ 0x30
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000980 <HAL_InitTick+0xc8>)
 80008ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008cc:	4a2c      	ldr	r2, [pc, #176]	@ (8000980 <HAL_InitTick+0xc8>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <HAL_InitTick+0xc8>)
 80008d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e0:	f107 020c 	add.w	r2, r7, #12
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 fd7e 	bl	80033ec <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f0:	f002 fd66 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80008f4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008f8:	4a22      	ldr	r2, [pc, #136]	@ (8000984 <HAL_InitTick+0xcc>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	0c9b      	lsrs	r3, r3, #18
 8000900:	3b01      	subs	r3, #1
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000904:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <HAL_InitTick+0xd0>)
 8000906:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800090a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800090c:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <HAL_InitTick+0xd0>)
 800090e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000912:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000914:	4a1c      	ldr	r2, [pc, #112]	@ (8000988 <HAL_InitTick+0xd0>)
 8000916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000918:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800091a:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <HAL_InitTick+0xd0>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <HAL_InitTick+0xd0>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8000926:	4818      	ldr	r0, [pc, #96]	@ (8000988 <HAL_InitTick+0xd0>)
 8000928:	f003 f814 	bl	8003954 <HAL_TIM_Base_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000936:	2b00      	cmp	r3, #0
 8000938:	d11b      	bne.n	8000972 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800093a:	4813      	ldr	r0, [pc, #76]	@ (8000988 <HAL_InitTick+0xd0>)
 800093c:	f003 f86c 	bl	8003a18 <HAL_TIM_Base_Start_IT>
 8000940:	4603      	mov	r3, r0
 8000942:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000946:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800094a:	2b00      	cmp	r3, #0
 800094c:	d111      	bne.n	8000972 <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800094e:	201c      	movs	r0, #28
 8000950:	f000 f998 	bl	8000c84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b0f      	cmp	r3, #15
 8000958:	d808      	bhi.n	800096c <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800095a:	2200      	movs	r2, #0
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	201c      	movs	r0, #28
 8000960:	f000 f976 	bl	8000c50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000964:	4a09      	ldr	r2, [pc, #36]	@ (800098c <HAL_InitTick+0xd4>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6013      	str	r3, [r2, #0]
 800096a:	e002      	b.n	8000972 <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000972:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000976:	4618      	mov	r0, r3
 8000978:	3730      	adds	r7, #48	@ 0x30
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000
 8000984:	431bde83 	.word	0x431bde83
 8000988:	20000224 	.word	0x20000224
 800098c:	20000004 	.word	0x20000004

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <NMI_Handler+0x4>

08000998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <MemManage_Handler+0x4>

080009a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009cc:	4802      	ldr	r0, [pc, #8]	@ (80009d8 <USB_LP_IRQHandler+0x10>)
 80009ce:	f000 fb49 	bl	8001064 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20010968 	.word	0x20010968

080009dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <TIM2_IRQHandler+0x10>)
 80009e2:	f003 f889 	bl	8003af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000224 	.word	0x20000224

080009f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	  cpp_USART2_IRQHandler();
 80009f4:	f7ff fc14 	bl	8000220 <cpp_USART2_IRQHandler>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	@ (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a20:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a24:	f7ff ffea 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	@ (8000a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <LoopForever+0xe>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	@ (8000a6c <LoopForever+0x16>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f00c f895 	bl	800cb7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a52:	f7ff fd7d 	bl	8000550 <main>

08000a56 <LoopForever>:

LoopForever:
    b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   r0, =_estack
 8000a58:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000a64:	0800cd9c 	.word	0x0800cd9c
  ldr r2, =_sbss
 8000a68:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000a6c:	20010ffc 	.word	0x20010ffc

08000a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_2_IRQHandler>

08000a72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f8dc 	bl	8000c3a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a82:	200f      	movs	r0, #15
 8000a84:	f7ff ff18 	bl	80008b8 <HAL_InitTick>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	e001      	b.n	8000a98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a94:	f7ff fec6 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a98:	79fb      	ldrb	r3, [r7, #7]

}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <HAL_IncTick+0x1c>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <HAL_IncTick+0x20>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <HAL_IncTick+0x1c>)
 8000ab4:	6013      	str	r3, [r2, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	20000270 	.word	0x20000270
 8000ac4:	20000008 	.word	0x20000008

08000ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b03      	ldr	r3, [pc, #12]	@ (8000adc <HAL_GetTick+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000270 	.word	0x20000270

08000ae0 <__NVIC_SetPriorityGrouping>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_EnableIRQ>:
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db0b      	blt.n	8000b6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 021f 	and.w	r2, r3, #31
 8000b5c:	4907      	ldr	r1, [pc, #28]	@ (8000b7c <__NVIC_EnableIRQ+0x38>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	2001      	movs	r0, #1
 8000b66:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	@ (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	@ (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	@ 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ff4c 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5e:	f7ff ff63 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	6978      	ldr	r0, [r7, #20]
 8000c6a:	f7ff ffb3 	bl	8000bd4 <NVIC_EncodePriority>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff82 	bl	8000b80 <__NVIC_SetPriority>
}
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff56 	bl	8000b44 <__NVIC_EnableIRQ>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e054      	b.n	8000d5c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7f5b      	ldrb	r3, [r3, #29]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d105      	bne.n	8000cc8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fdd8 	bl	8000878 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2202      	movs	r2, #2
 8000ccc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	791b      	ldrb	r3, [r3, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d10c      	bne.n	8000cf0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a22      	ldr	r2, [pc, #136]	@ (8000d64 <HAL_CRC_Init+0xc4>)
 8000cdc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0218 	bic.w	r2, r2, #24
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	e00c      	b.n	8000d0a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6899      	ldr	r1, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 f834 	bl	8000d68 <HAL_CRCEx_Polynomial_Set>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e028      	b.n	8000d5c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	795b      	ldrb	r3, [r3, #5]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d105      	bne.n	8000d1e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	e004      	b.n	8000d28 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6912      	ldr	r2, [r2, #16]
 8000d26:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695a      	ldr	r2, [r3, #20]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	699a      	ldr	r2, [r3, #24]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	04c11db7 	.word	0x04c11db7

08000d68 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000d78:	231f      	movs	r3, #31
 8000d7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	75fb      	strb	r3, [r7, #23]
 8000d8a:	e063      	b.n	8000e54 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000d8c:	bf00      	nop
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1e5a      	subs	r2, r3, #1
 8000d92:	613a      	str	r2, [r7, #16]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d009      	beq.n	8000dac <HAL_CRCEx_Polynomial_Set+0x44>
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	f003 031f 	and.w	r3, r3, #31
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	fa22 f303 	lsr.w	r3, r2, r3
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f0      	beq.n	8000d8e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b18      	cmp	r3, #24
 8000db0:	d846      	bhi.n	8000e40 <HAL_CRCEx_Polynomial_Set+0xd8>
 8000db2:	a201      	add	r2, pc, #4	@ (adr r2, 8000db8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000e47 	.word	0x08000e47
 8000dbc:	08000e41 	.word	0x08000e41
 8000dc0:	08000e41 	.word	0x08000e41
 8000dc4:	08000e41 	.word	0x08000e41
 8000dc8:	08000e41 	.word	0x08000e41
 8000dcc:	08000e41 	.word	0x08000e41
 8000dd0:	08000e41 	.word	0x08000e41
 8000dd4:	08000e41 	.word	0x08000e41
 8000dd8:	08000e35 	.word	0x08000e35
 8000ddc:	08000e41 	.word	0x08000e41
 8000de0:	08000e41 	.word	0x08000e41
 8000de4:	08000e41 	.word	0x08000e41
 8000de8:	08000e41 	.word	0x08000e41
 8000dec:	08000e41 	.word	0x08000e41
 8000df0:	08000e41 	.word	0x08000e41
 8000df4:	08000e41 	.word	0x08000e41
 8000df8:	08000e29 	.word	0x08000e29
 8000dfc:	08000e41 	.word	0x08000e41
 8000e00:	08000e41 	.word	0x08000e41
 8000e04:	08000e41 	.word	0x08000e41
 8000e08:	08000e41 	.word	0x08000e41
 8000e0c:	08000e41 	.word	0x08000e41
 8000e10:	08000e41 	.word	0x08000e41
 8000e14:	08000e41 	.word	0x08000e41
 8000e18:	08000e1d 	.word	0x08000e1d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d913      	bls.n	8000e4a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000e26:	e010      	b.n	8000e4a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	2b07      	cmp	r3, #7
 8000e2c:	d90f      	bls.n	8000e4e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000e32:	e00c      	b.n	8000e4e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	2b0f      	cmp	r3, #15
 8000e38:	d90b      	bls.n	8000e52 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000e3e:	e008      	b.n	8000e52 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	75fb      	strb	r3, [r7, #23]
        break;
 8000e44:	e006      	b.n	8000e54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000e46:	bf00      	nop
 8000e48:	e004      	b.n	8000e54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000e4a:	bf00      	nop
 8000e4c:	e002      	b.n	8000e54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000e4e:	bf00      	nop
 8000e50:	e000      	b.n	8000e54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000e52:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000e54:	7dfb      	ldrb	r3, [r7, #23]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10d      	bne.n	8000e76 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f023 0118 	bic.w	r1, r3, #24
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e0c0      	b.n	8001018 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d106      	bne.n	8000eb0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f00b fae6 	bl	800c47c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f003 fe20 	bl	8004b02 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e03e      	b.n	8000f46 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	440b      	add	r3, r1
 8000ed6:	3311      	adds	r3, #17
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	440b      	add	r3, r1
 8000eea:	3310      	adds	r3, #16
 8000eec:	7bfa      	ldrb	r2, [r7, #15]
 8000eee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	440b      	add	r3, r1
 8000efe:	3313      	adds	r3, #19
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	440b      	add	r3, r1
 8000f12:	3320      	adds	r3, #32
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	440b      	add	r3, r1
 8000f26:	3324      	adds	r3, #36	@ 0x24
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	3301      	adds	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	791b      	ldrb	r3, [r3, #4]
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d3bb      	bcc.n	8000ec8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e044      	b.n	8000fe0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f56:	7bfa      	ldrb	r2, [r7, #15]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	440b      	add	r3, r1
 8000f64:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	440b      	add	r3, r1
 8000f7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	440b      	add	r3, r1
 8000f90:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	791b      	ldrb	r3, [r3, #4]
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d3b5      	bcc.n	8000f56 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000ff6:	f003 fd9f 	bl	8004b38 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7a9b      	ldrb	r3, [r3, #10]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d102      	bne.n	8001016 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f001 fc3b 	bl	800288c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HAL_PCD_Start+0x16>
 8001032:	2302      	movs	r3, #2
 8001034:	e012      	b.n	800105c <HAL_PCD_Start+0x3c>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fd46 	bl	8004ad4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f005 fb3b 	bl	80066c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f005 fb40 	bl	80066f6 <USB_ReadInterrupts>
 8001076:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 fb33 	bl	80016ee <PCD_EP_ISR_Handler>

    return;
 8001088:	e110      	b.n	80012ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001090:	2b00      	cmp	r3, #0
 8001092:	d013      	beq.n	80010bc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010a6:	b292      	uxth	r2, r2
 80010a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f00b fa76 	bl	800c59e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010b2:	2100      	movs	r1, #0
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f8fc 	bl	80012b2 <HAL_PCD_SetAddress>

    return;
 80010ba:	e0f7      	b.n	80012ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00c      	beq.n	80010e0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80010d8:	b292      	uxth	r2, r2
 80010da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010de:	e0e5      	b.n	80012ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00c      	beq.n	8001104 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010fc:	b292      	uxth	r2, r2
 80010fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001102:	e0d3      	b.n	80012ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d034      	beq.n	8001178 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001116:	b29a      	uxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0204 	bic.w	r2, r2, #4
 8001120:	b292      	uxth	r2, r2
 8001122:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800112e:	b29a      	uxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0208 	bic.w	r2, r2, #8
 8001138:	b292      	uxth	r2, r2
 800113a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8001144:	2b01      	cmp	r3, #1
 8001146:	d107      	bne.n	8001158 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001150:	2100      	movs	r1, #0
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f00b fc2c 	bl	800c9b0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f00b fa59 	bl	800c610 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001166:	b29a      	uxth	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001170:	b292      	uxth	r2, r2
 8001172:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001176:	e099      	b.n	80012ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800117e:	2b00      	cmp	r3, #0
 8001180:	d027      	beq.n	80011d2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800118a:	b29a      	uxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0208 	orr.w	r2, r2, #8
 8001194:	b292      	uxth	r2, r2
 8001196:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011ac:	b292      	uxth	r2, r2
 80011ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0204 	orr.w	r2, r2, #4
 80011c4:	b292      	uxth	r2, r2
 80011c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f00b fa06 	bl	800c5dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011d0:	e06c      	b.n	80012ac <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d040      	beq.n	800125e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011ee:	b292      	uxth	r2, r2
 80011f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d12b      	bne.n	8001256 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 0204 	orr.w	r2, r2, #4
 8001210:	b292      	uxth	r2, r2
 8001212:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800121e:	b29a      	uxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0208 	orr.w	r2, r2, #8
 8001228:	b292      	uxth	r2, r2
 800122a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800123e:	b29b      	uxth	r3, r3
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800124c:	2101      	movs	r1, #1
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f00b fbae 	bl	800c9b0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001254:	e02a      	b.n	80012ac <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f00b f9c0 	bl	800c5dc <HAL_PCD_SuspendCallback>
    return;
 800125c:	e026      	b.n	80012ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00f      	beq.n	8001288 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001270:	b29a      	uxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800127a:	b292      	uxth	r2, r2
 800127c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f00b f97e 	bl	800c582 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001286:	e011      	b.n	80012ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00c      	beq.n	80012ac <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800129a:	b29a      	uxth	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012a4:	b292      	uxth	r2, r2
 80012a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80012aa:	bf00      	nop
  }
}
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_PCD_SetAddress+0x1a>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e012      	b.n	80012f2 <HAL_PCD_SetAddress+0x40>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	78fa      	ldrb	r2, [r7, #3]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f005 f9dc 	bl	80066a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	4608      	mov	r0, r1
 8001304:	4611      	mov	r1, r2
 8001306:	461a      	mov	r2, r3
 8001308:	4603      	mov	r3, r0
 800130a:	70fb      	strb	r3, [r7, #3]
 800130c:	460b      	mov	r3, r1
 800130e:	803b      	strh	r3, [r7, #0]
 8001310:	4613      	mov	r3, r2
 8001312:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800131c:	2b00      	cmp	r3, #0
 800131e:	da0e      	bge.n	800133e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	f003 0207 	and.w	r2, r3, #7
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	3310      	adds	r3, #16
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2201      	movs	r2, #1
 800133a:	705a      	strb	r2, [r3, #1]
 800133c:	e00e      	b.n	800135c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	f003 0207 	and.w	r2, r3, #7
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	b2da      	uxtb	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001368:	883b      	ldrh	r3, [r7, #0]
 800136a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	78ba      	ldrb	r2, [r7, #2]
 8001376:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001378:	78bb      	ldrb	r3, [r7, #2]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d102      	bne.n	8001384 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_PCD_EP_Open+0x98>
 800138e:	2302      	movs	r3, #2
 8001390:	e00e      	b.n	80013b0 <HAL_PCD_EP_Open+0xb6>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fbff 	bl	8004ba4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80013ae:	7afb      	ldrb	r3, [r7, #11]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da0e      	bge.n	80013ea <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	f003 0207 	and.w	r2, r3, #7
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	3310      	adds	r3, #16
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2201      	movs	r2, #1
 80013e6:	705a      	strb	r2, [r3, #1]
 80013e8:	e00e      	b.n	8001408 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	f003 0207 	and.w	r2, r3, #7
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	b2da      	uxtb	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_PCD_EP_Close+0x6a>
 800141e:	2302      	movs	r3, #2
 8001420:	e00e      	b.n	8001440 <HAL_PCD_EP_Close+0x88>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68f9      	ldr	r1, [r7, #12]
 8001430:	4618      	mov	r0, r3
 8001432:	f004 f89f 	bl	8005574 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	460b      	mov	r3, r1
 8001456:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001458:	7afb      	ldrb	r3, [r7, #11]
 800145a:	f003 0207 	and.w	r2, r3, #7
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2200      	movs	r2, #0
 8001486:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001488:	7afb      	ldrb	r3, [r7, #11]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	b2da      	uxtb	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6979      	ldr	r1, [r7, #20]
 800149a:	4618      	mov	r0, r3
 800149c:	f004 fa57 	bl	800594e <USB_EPStartXfer>

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	f003 0207 	and.w	r2, r3, #7
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80014cc:	681b      	ldr	r3, [r3, #0]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	460b      	mov	r3, r1
 80014e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ea:	7afb      	ldrb	r3, [r7, #11]
 80014ec:	f003 0207 	and.w	r2, r3, #7
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	3310      	adds	r3, #16
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4413      	add	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2201      	movs	r2, #1
 8001524:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001526:	7afb      	ldrb	r3, [r7, #11]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	b2da      	uxtb	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6979      	ldr	r1, [r7, #20]
 8001538:	4618      	mov	r0, r3
 800153a:	f004 fa08 	bl	800594e <USB_EPStartXfer>

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	7912      	ldrb	r2, [r2, #4]
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e03e      	b.n	80015e4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800156a:	2b00      	cmp	r3, #0
 800156c:	da0e      	bge.n	800158c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	f003 0207 	and.w	r2, r3, #7
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	3310      	adds	r3, #16
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	705a      	strb	r2, [r3, #1]
 800158a:	e00c      	b.n	80015a6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_PCD_EP_SetStall+0x7e>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e00e      	b.n	80015e4 <HAL_PCD_EP_SetStall+0x9c>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68f9      	ldr	r1, [r7, #12]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f004 ff69 	bl	80064ac <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	7912      	ldrb	r2, [r2, #4]
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e040      	b.n	800168c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800160a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800160e:	2b00      	cmp	r3, #0
 8001610:	da0e      	bge.n	8001630 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	f003 0207 	and.w	r2, r3, #7
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	3310      	adds	r3, #16
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	705a      	strb	r2, [r3, #1]
 800162e:	e00e      	b.n	800164e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	f003 0207 	and.w	r2, r3, #7
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	b2da      	uxtb	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_PCD_EP_ClrStall+0x82>
 800166a:	2302      	movs	r3, #2
 800166c:	e00e      	b.n	800168c <HAL_PCD_EP_ClrStall+0xa0>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68f9      	ldr	r1, [r7, #12]
 800167c:	4618      	mov	r0, r3
 800167e:	f004 ff66 	bl	800654e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_PCD_EP_Flush+0x1a>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e01b      	b.n	80016e6 <HAL_PCD_EP_Flush+0x52>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  if ((ep_addr & 0x80U) == 0x80U)
 80016b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	da09      	bge.n	80016d2 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	4619      	mov	r1, r3
 80016ca:	4610      	mov	r0, r2
 80016cc:	f003 fa52 	bl	8004b74 <USB_FlushTxFifo>
 80016d0:	e004      	b.n	80016dc <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 fa58 	bl	8004b8c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b092      	sub	sp, #72	@ 0x48
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016f6:	e333      	b.n	8001d60 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001700:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001702:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800170e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 8108 	bne.w	8001928 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001718:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	2b00      	cmp	r3, #0
 8001720:	d14c      	bne.n	80017bc <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800172e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001732:	813b      	strh	r3, [r7, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	893b      	ldrh	r3, [r7, #8]
 800173a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800173e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001742:	b29b      	uxth	r3, r3
 8001744:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3310      	adds	r3, #16
 800174a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001754:	b29b      	uxth	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	4413      	add	r3, r2
 8001766:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001772:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	441a      	add	r2, r3
 800177e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001780:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001782:	2100      	movs	r1, #0
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f00a fee2 	bl	800c54e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7b1b      	ldrb	r3, [r3, #12]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 82e5 	beq.w	8001d60 <PCD_EP_ISR_Handler+0x672>
 8001796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 82e0 	bne.w	8001d60 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7b1b      	ldrb	r3, [r3, #12]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	731a      	strb	r2, [r3, #12]
 80017ba:	e2d1      	b.n	8001d60 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017c2:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80017ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d032      	beq.n	800183c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017de:	b29b      	uxth	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017fc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800180a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800180c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800180e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001810:	b29b      	uxth	r3, r3
 8001812:	f004 ffc3 	bl	800679c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b29a      	uxth	r2, r3
 800181e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001822:	4013      	ands	r3, r2
 8001824:	817b      	strh	r3, [r7, #10]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	897a      	ldrh	r2, [r7, #10]
 800182c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001830:	b292      	uxth	r2, r2
 8001832:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f00a fe5d 	bl	800c4f4 <HAL_PCD_SetupStageCallback>
 800183a:	e291      	b.n	8001d60 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800183c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001840:	2b00      	cmp	r3, #0
 8001842:	f280 828d 	bge.w	8001d60 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b29a      	uxth	r2, r3
 800184e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001852:	4013      	ands	r3, r2
 8001854:	81fb      	strh	r3, [r7, #14]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	89fa      	ldrh	r2, [r7, #14]
 800185c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001860:	b292      	uxth	r2, r2
 8001862:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800186c:	b29b      	uxth	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	4413      	add	r3, r2
 800187e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800188a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800188c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d019      	beq.n	80018c8 <PCD_EP_ISR_Handler+0x1da>
 8001894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d015      	beq.n	80018c8 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018a2:	6959      	ldr	r1, [r3, #20]
 80018a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018a6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018aa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	f004 ff75 	bl	800679c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	441a      	add	r2, r3
 80018bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018be:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018c0:	2100      	movs	r1, #0
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f00a fe28 	bl	800c518 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80018d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80018d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 8242 	bne.w	8001d60 <PCD_EP_ISR_Handler+0x672>
 80018dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80018de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80018e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80018e6:	f000 823b 	beq.w	8001d60 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018fa:	81bb      	strh	r3, [r7, #12]
 80018fc:	89bb      	ldrh	r3, [r7, #12]
 80018fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001902:	81bb      	strh	r3, [r7, #12]
 8001904:	89bb      	ldrh	r3, [r7, #12]
 8001906:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800190a:	81bb      	strh	r3, [r7, #12]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	89bb      	ldrh	r3, [r7, #12]
 8001912:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001916:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800191a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800191e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001922:	b29b      	uxth	r3, r3
 8001924:	8013      	strh	r3, [r2, #0]
 8001926:	e21b      	b.n	8001d60 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800193a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800193e:	2b00      	cmp	r3, #0
 8001940:	f280 80f1 	bge.w	8001b26 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b29a      	uxth	r2, r3
 8001956:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800195a:	4013      	ands	r3, r2
 800195c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800196e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001972:	b292      	uxth	r2, r2
 8001974:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001976:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800198c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800198e:	7b1b      	ldrb	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d123      	bne.n	80019dc <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800199c:	b29b      	uxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	4413      	add	r3, r2
 80019ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019b8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80019bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 808b 	beq.w	8001adc <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019cc:	6959      	ldr	r1, [r3, #20]
 80019ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019d0:	88da      	ldrh	r2, [r3, #6]
 80019d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80019d6:	f004 fee1 	bl	800679c <USB_ReadPMA>
 80019da:	e07f      	b.n	8001adc <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019de:	78db      	ldrb	r3, [r3, #3]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d109      	bne.n	80019f8 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80019e6:	461a      	mov	r2, r3
 80019e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f9c6 	bl	8001d7c <HAL_PCD_EP_DB_Receive>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80019f6:	e071      	b.n	8001adc <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a12:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	441a      	add	r2, r3
 8001a22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d022      	beq.n	8001a98 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a76:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001a7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d02c      	beq.n	8001adc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a88:	6959      	ldr	r1, [r3, #20]
 8001a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a8c:	891a      	ldrh	r2, [r3, #8]
 8001a8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001a92:	f004 fe83 	bl	800679c <USB_ReadPMA>
 8001a96:	e021      	b.n	8001adc <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001abc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8001ac0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d009      	beq.n	8001adc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ace:	6959      	ldr	r1, [r3, #20]
 8001ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ad2:	895a      	ldrh	r2, [r3, #10]
 8001ad4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001ad8:	f004 fe60 	bl	800679c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ade:	69da      	ldr	r2, [r3, #28]
 8001ae0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001ae4:	441a      	add	r2, r3
 8001ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001af2:	441a      	add	r2, r3
 8001af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001af6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <PCD_EP_ISR_Handler+0x41e>
 8001b00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d206      	bcs.n	8001b1a <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f00a fd00 	bl	800c518 <HAL_PCD_DataOutStageCallback>
 8001b18:	e005      	b.n	8001b26 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 ff14 	bl	800594e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8117 	beq.w	8001d60 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b32:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	3310      	adds	r3, #16
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	441a      	add	r2, r3
 8001b70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b80:	78db      	ldrb	r3, [r3, #3]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	f040 80a1 	bne.w	8001cca <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8001b88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b90:	7b1b      	ldrb	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8092 	beq.w	8001cbc <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d046      	beq.n	8001c30 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ba4:	785b      	ldrb	r3, [r3, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d126      	bne.n	8001bf8 <PCD_EP_ISR_Handler+0x50a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	00da      	lsls	r2, r3, #3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	801a      	strh	r2, [r3, #0]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	801a      	strh	r2, [r3, #0]
 8001bf6:	e061      	b.n	8001cbc <PCD_EP_ISR_Handler+0x5ce>
 8001bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bfa:	785b      	ldrb	r3, [r3, #1]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d15d      	bne.n	8001cbc <PCD_EP_ISR_Handler+0x5ce>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4413      	add	r3, r2
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	00da      	lsls	r2, r3, #3
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	4413      	add	r3, r2
 8001c22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	e045      	b.n	8001cbc <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d126      	bne.n	8001c8c <PCD_EP_ISR_Handler+0x59e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	4413      	add	r3, r2
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	00da      	lsls	r2, r3, #3
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	4413      	add	r3, r2
 8001c60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	801a      	strh	r2, [r3, #0]
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	801a      	strh	r2, [r3, #0]
 8001c8a:	e017      	b.n	8001cbc <PCD_EP_ISR_Handler+0x5ce>
 8001c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c8e:	785b      	ldrb	r3, [r3, #1]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d113      	bne.n	8001cbc <PCD_EP_ISR_Handler+0x5ce>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca2:	4413      	add	r3, r2
 8001ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	00da      	lsls	r2, r3, #3
 8001cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cae:	4413      	add	r3, r2
 8001cb0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f00a fc43 	bl	800c54e <HAL_PCD_DataInStageCallback>
 8001cc8:	e04a      	b.n	8001d60 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001cca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d13f      	bne.n	8001d54 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cf8:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8001cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cfc:	699a      	ldr	r2, [r3, #24]
 8001cfe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d906      	bls.n	8001d12 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8001d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001d0a:	1ad2      	subs	r2, r2, r3
 8001d0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d0e:	619a      	str	r2, [r3, #24]
 8001d10:	e002      	b.n	8001d18 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d106      	bne.n	8001d2e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f00a fc11 	bl	800c54e <HAL_PCD_DataInStageCallback>
 8001d2c:	e018      	b.n	8001d60 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001d34:	441a      	add	r2, r3
 8001d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d38:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001d40:	441a      	add	r2, r3
 8001d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d44:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fdfe 	bl	800594e <USB_EPStartXfer>
 8001d52:	e005      	b.n	8001d60 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001d54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001d56:	461a      	mov	r2, r3
 8001d58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f917 	bl	8001f8e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f6ff acc3 	blt.w	80016f8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3748      	adds	r7, #72	@ 0x48
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	4613      	mov	r3, r2
 8001d88:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d07c      	beq.n	8001e8e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	8b7b      	ldrh	r3, [r7, #26]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d306      	bcc.n	8001dd2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	699a      	ldr	r2, [r3, #24]
 8001dc8:	8b7b      	ldrh	r3, [r7, #26]
 8001dca:	1ad2      	subs	r2, r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	619a      	str	r2, [r3, #24]
 8001dd0:	e002      	b.n	8001dd8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d123      	bne.n	8001e28 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dfa:	833b      	strh	r3, [r7, #24]
 8001dfc:	8b3b      	ldrh	r3, [r7, #24]
 8001dfe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001e02:	833b      	strh	r3, [r7, #24]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	441a      	add	r2, r3
 8001e12:	8b3b      	ldrh	r3, [r7, #24]
 8001e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d01f      	beq.n	8001e72 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e4c:	82fb      	strh	r3, [r7, #22]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	441a      	add	r2, r3
 8001e5c:	8afb      	ldrh	r3, [r7, #22]
 8001e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e72:	8b7b      	ldrh	r3, [r7, #26]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 8085 	beq.w	8001f84 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	6959      	ldr	r1, [r3, #20]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	891a      	ldrh	r2, [r3, #8]
 8001e86:	8b7b      	ldrh	r3, [r7, #26]
 8001e88:	f004 fc88 	bl	800679c <USB_ReadPMA>
 8001e8c:	e07a      	b.n	8001f84 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	699a      	ldr	r2, [r3, #24]
 8001eb8:	8b7b      	ldrh	r3, [r7, #26]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d306      	bcc.n	8001ecc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	8b7b      	ldrh	r3, [r7, #26]
 8001ec4:	1ad2      	subs	r2, r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	619a      	str	r2, [r3, #24]
 8001eca:	e002      	b.n	8001ed2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d123      	bne.n	8001f22 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ef4:	83fb      	strh	r3, [r7, #30]
 8001ef6:	8bfb      	ldrh	r3, [r7, #30]
 8001ef8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001efc:	83fb      	strh	r3, [r7, #30]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	441a      	add	r2, r3
 8001f0c:	8bfb      	ldrh	r3, [r7, #30]
 8001f0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d11f      	bne.n	8001f6c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f46:	83bb      	strh	r3, [r7, #28]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	441a      	add	r2, r3
 8001f56:	8bbb      	ldrh	r3, [r7, #28]
 8001f58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f6c:	8b7b      	ldrh	r3, [r7, #26]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	6959      	ldr	r1, [r3, #20]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	895a      	ldrh	r2, [r3, #10]
 8001f7e:	8b7b      	ldrh	r3, [r7, #26]
 8001f80:	f004 fc0c 	bl	800679c <USB_ReadPMA>
    }
  }

  return count;
 8001f84:	8b7b      	ldrh	r3, [r7, #26]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b0a6      	sub	sp, #152	@ 0x98
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 81f7 	beq.w	8002396 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fcc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d907      	bls.n	8001fec <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001fe4:	1ad2      	subs	r2, r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	619a      	str	r2, [r3, #24]
 8001fea:	e002      	b.n	8001ff2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80e1 	bne.w	80021be <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	785b      	ldrb	r3, [r3, #1]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d126      	bne.n	8002052 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	633b      	str	r3, [r7, #48]	@ 0x30
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002012:	b29b      	uxth	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002018:	4413      	add	r3, r2
 800201a:	633b      	str	r3, [r7, #48]	@ 0x30
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	00da      	lsls	r2, r3, #3
 8002022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002024:	4413      	add	r3, r2
 8002026:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800202a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800202c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002036:	b29a      	uxth	r2, r3
 8002038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800203a:	801a      	strh	r2, [r3, #0]
 800203c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800204a:	b29a      	uxth	r2, r3
 800204c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800204e:	801a      	strh	r2, [r3, #0]
 8002050:	e01a      	b.n	8002088 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	785b      	ldrb	r3, [r3, #1]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d116      	bne.n	8002088 <HAL_PCD_EP_DB_Transmit+0xfa>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800206e:	4413      	add	r3, r2
 8002070:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	00da      	lsls	r2, r3, #3
 8002078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800207a:	4413      	add	r3, r2
 800207c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
 8002082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002084:	2200      	movs	r2, #0
 8002086:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d126      	bne.n	80020e4 <HAL_PCD_EP_DB_Transmit+0x156>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	4413      	add	r3, r2
 80020ac:	623b      	str	r3, [r7, #32]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	00da      	lsls	r2, r3, #3
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	4413      	add	r3, r2
 80020b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	801a      	strh	r2, [r3, #0]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020dc:	b29a      	uxth	r2, r3
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	e017      	b.n	8002114 <HAL_PCD_EP_DB_Transmit+0x186>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	785b      	ldrb	r3, [r3, #1]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d113      	bne.n	8002114 <HAL_PCD_EP_DB_Transmit+0x186>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fa:	4413      	add	r3, r2
 80020fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	00da      	lsls	r2, r3, #3
 8002104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002106:	4413      	add	r3, r2
 8002108:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	2200      	movs	r2, #0
 8002112:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	78db      	ldrb	r3, [r3, #3]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d123      	bne.n	8002164 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002132:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002136:	837b      	strh	r3, [r7, #26]
 8002138:	8b7b      	ldrh	r3, [r7, #26]
 800213a:	f083 0320 	eor.w	r3, r3, #32
 800213e:	837b      	strh	r3, [r7, #26]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	441a      	add	r2, r3
 800214e:	8b7b      	ldrh	r3, [r7, #26]
 8002150:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002154:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002158:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800215c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002160:	b29b      	uxth	r3, r3
 8002162:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f00a f9ef 	bl	800c54e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01f      	beq.n	80021ba <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002194:	833b      	strh	r3, [r7, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	441a      	add	r2, r3
 80021a4:	8b3b      	ldrh	r3, [r7, #24]
 80021a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e31f      	b.n	80027fe <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d021      	beq.n	800220c <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	441a      	add	r2, r3
 80021f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80021f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002200:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002208:	b29b      	uxth	r3, r3
 800220a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002212:	2b01      	cmp	r3, #1
 8002214:	f040 82ca 	bne.w	80027ac <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002220:	441a      	add	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800222e:	441a      	add	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	6a1a      	ldr	r2, [r3, #32]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	429a      	cmp	r2, r3
 800223e:	d309      	bcc.n	8002254 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	6a1a      	ldr	r2, [r3, #32]
 800224a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800224c:	1ad2      	subs	r2, r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	621a      	str	r2, [r3, #32]
 8002252:	e015      	b.n	8002280 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800225c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002260:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800226a:	e009      	b.n	8002280 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d15f      	bne.n	8002348 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	643b      	str	r3, [r7, #64]	@ 0x40
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002296:	b29b      	uxth	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800229c:	4413      	add	r3, r2
 800229e:	643b      	str	r3, [r7, #64]	@ 0x40
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	00da      	lsls	r2, r3, #3
 80022a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022a8:	4413      	add	r3, r2
 80022aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80022ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022be:	801a      	strh	r2, [r3, #0]
 80022c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10a      	bne.n	80022dc <HAL_PCD_EP_DB_Transmit+0x34e>
 80022c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022d8:	801a      	strh	r2, [r3, #0]
 80022da:	e051      	b.n	8002380 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80022dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022de:	2b3e      	cmp	r3, #62	@ 0x3e
 80022e0:	d816      	bhi.n	8002310 <HAL_PCD_EP_DB_Transmit+0x382>
 80022e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80022e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80022f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022f4:	3301      	adds	r3, #1
 80022f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80022f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002300:	b29b      	uxth	r3, r3
 8002302:	029b      	lsls	r3, r3, #10
 8002304:	b29b      	uxth	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	b29a      	uxth	r2, r3
 800230a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800230c:	801a      	strh	r2, [r3, #0]
 800230e:	e037      	b.n	8002380 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002310:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	653b      	str	r3, [r7, #80]	@ 0x50
 8002316:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <HAL_PCD_EP_DB_Transmit+0x398>
 8002320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002322:	3b01      	subs	r3, #1
 8002324:	653b      	str	r3, [r7, #80]	@ 0x50
 8002326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29a      	uxth	r2, r3
 800232c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800232e:	b29b      	uxth	r3, r3
 8002330:	029b      	lsls	r3, r3, #10
 8002332:	b29b      	uxth	r3, r3
 8002334:	4313      	orrs	r3, r2
 8002336:	b29b      	uxth	r3, r3
 8002338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800233c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002340:	b29a      	uxth	r2, r3
 8002342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002344:	801a      	strh	r2, [r3, #0]
 8002346:	e01b      	b.n	8002380 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d117      	bne.n	8002380 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800235e:	b29b      	uxth	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002364:	4413      	add	r3, r2
 8002366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	00da      	lsls	r2, r3, #3
 800236e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002370:	4413      	add	r3, r2
 8002372:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002376:	647b      	str	r3, [r7, #68]	@ 0x44
 8002378:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800237a:	b29a      	uxth	r2, r3
 800237c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800237e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	6959      	ldr	r1, [r3, #20]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	891a      	ldrh	r2, [r3, #8]
 800238c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800238e:	b29b      	uxth	r3, r3
 8002390:	f004 f9c1 	bl	8006716 <USB_WritePMA>
 8002394:	e20a      	b.n	80027ac <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ba:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d307      	bcc.n	80023da <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80023d2:	1ad2      	subs	r2, r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	619a      	str	r2, [r3, #24]
 80023d8:	e002      	b.n	80023e0 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 80f6 	bne.w	80025d6 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d126      	bne.n	8002440 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002406:	4413      	add	r3, r2
 8002408:	677b      	str	r3, [r7, #116]	@ 0x74
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	00da      	lsls	r2, r3, #3
 8002410:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002412:	4413      	add	r3, r2
 8002414:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002418:	673b      	str	r3, [r7, #112]	@ 0x70
 800241a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002424:	b29a      	uxth	r2, r3
 8002426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002438:	b29a      	uxth	r2, r3
 800243a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	e01a      	b.n	8002476 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d116      	bne.n	8002476 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002456:	b29b      	uxth	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800245c:	4413      	add	r3, r2
 800245e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	00da      	lsls	r2, r3, #3
 8002466:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002468:	4413      	add	r3, r2
 800246a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800246e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002470:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002472:	2200      	movs	r2, #0
 8002474:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	785b      	ldrb	r3, [r3, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d12f      	bne.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x558>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002496:	b29b      	uxth	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800249e:	4413      	add	r3, r2
 80024a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	00da      	lsls	r2, r3, #3
 80024aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024ae:	4413      	add	r3, r2
 80024b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80024b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024ca:	801a      	strh	r2, [r3, #0]
 80024cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024dc:	b29a      	uxth	r2, r3
 80024de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024e2:	801a      	strh	r2, [r3, #0]
 80024e4:	e01c      	b.n	8002520 <HAL_PCD_EP_DB_Transmit+0x592>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	785b      	ldrb	r3, [r3, #1]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d118      	bne.n	8002520 <HAL_PCD_EP_DB_Transmit+0x592>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024fe:	4413      	add	r3, r2
 8002500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	00da      	lsls	r2, r3, #3
 800250a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800250e:	4413      	add	r3, r2
 8002510:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002514:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002518:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800251c:	2200      	movs	r2, #0
 800251e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	78db      	ldrb	r3, [r3, #3]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d127      	bne.n	8002578 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800253e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002542:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002546:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800254a:	f083 0320 	eor.w	r3, r3, #32
 800254e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	441a      	add	r2, r3
 8002560:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800256c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002574:	b29b      	uxth	r3, r3
 8002576:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f009 ffe5 	bl	800c54e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d121      	bne.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025a8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	441a      	add	r2, r3
 80025ba:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80025be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e113      	b.n	80027fe <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d121      	bne.n	8002624 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	441a      	add	r2, r3
 800260c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002610:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002614:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002618:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800261c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002620:	b29b      	uxth	r3, r3
 8002622:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800262a:	2b01      	cmp	r3, #1
 800262c:	f040 80be 	bne.w	80027ac <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002638:	441a      	add	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002646:	441a      	add	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6a1a      	ldr	r2, [r3, #32]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d309      	bcc.n	800266c <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	6a1a      	ldr	r2, [r3, #32]
 8002662:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002664:	1ad2      	subs	r2, r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	621a      	str	r2, [r3, #32]
 800266a:	e015      	b.n	8002698 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8002674:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002678:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002682:	e009      	b.n	8002698 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2200      	movs	r2, #0
 800268e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	785b      	ldrb	r3, [r3, #1]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d15f      	bne.n	8002766 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ba:	4413      	add	r3, r2
 80026bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	00da      	lsls	r2, r3, #3
 80026c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026c6:	4413      	add	r3, r2
 80026c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80026cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80026ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d8:	b29a      	uxth	r2, r3
 80026da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026dc:	801a      	strh	r2, [r3, #0]
 80026de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10a      	bne.n	80026fa <HAL_PCD_EP_DB_Transmit+0x76c>
 80026e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026f6:	801a      	strh	r2, [r3, #0]
 80026f8:	e04e      	b.n	8002798 <HAL_PCD_EP_DB_Transmit+0x80a>
 80026fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80026fe:	d816      	bhi.n	800272e <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	663b      	str	r3, [r7, #96]	@ 0x60
 8002706:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <HAL_PCD_EP_DB_Transmit+0x788>
 8002710:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002712:	3301      	adds	r3, #1
 8002714:	663b      	str	r3, [r7, #96]	@ 0x60
 8002716:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29a      	uxth	r2, r3
 800271c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800271e:	b29b      	uxth	r3, r3
 8002720:	029b      	lsls	r3, r3, #10
 8002722:	b29b      	uxth	r3, r3
 8002724:	4313      	orrs	r3, r2
 8002726:	b29a      	uxth	r2, r3
 8002728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800272a:	801a      	strh	r2, [r3, #0]
 800272c:	e034      	b.n	8002798 <HAL_PCD_EP_DB_Transmit+0x80a>
 800272e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	663b      	str	r3, [r7, #96]	@ 0x60
 8002734:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800273e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002740:	3b01      	subs	r3, #1
 8002742:	663b      	str	r3, [r7, #96]	@ 0x60
 8002744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29a      	uxth	r2, r3
 800274a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800274c:	b29b      	uxth	r3, r3
 800274e:	029b      	lsls	r3, r3, #10
 8002750:	b29b      	uxth	r3, r3
 8002752:	4313      	orrs	r3, r2
 8002754:	b29b      	uxth	r3, r3
 8002756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800275a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800275e:	b29a      	uxth	r2, r3
 8002760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002762:	801a      	strh	r2, [r3, #0]
 8002764:	e018      	b.n	8002798 <HAL_PCD_EP_DB_Transmit+0x80a>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	785b      	ldrb	r3, [r3, #1]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d114      	bne.n	8002798 <HAL_PCD_EP_DB_Transmit+0x80a>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800277c:	4413      	add	r3, r2
 800277e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	00da      	lsls	r2, r3, #3
 8002786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002788:	4413      	add	r3, r2
 800278a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800278e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002790:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002792:	b29a      	uxth	r2, r3
 8002794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002796:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	6959      	ldr	r1, [r3, #20]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	895a      	ldrh	r2, [r3, #10]
 80027a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f003 ffb5 	bl	8006716 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027c6:	82fb      	strh	r3, [r7, #22]
 80027c8:	8afb      	ldrh	r3, [r7, #22]
 80027ca:	f083 0310 	eor.w	r3, r3, #16
 80027ce:	82fb      	strh	r3, [r7, #22]
 80027d0:	8afb      	ldrh	r3, [r7, #22]
 80027d2:	f083 0320 	eor.w	r3, r3, #32
 80027d6:	82fb      	strh	r3, [r7, #22]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	441a      	add	r2, r3
 80027e6:	8afb      	ldrh	r3, [r7, #22]
 80027e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3798      	adds	r7, #152	@ 0x98
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002806:	b480      	push	{r7}
 8002808:	b087      	sub	sp, #28
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	817b      	strh	r3, [r7, #10]
 8002814:	4613      	mov	r3, r2
 8002816:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002818:	897b      	ldrh	r3, [r7, #10]
 800281a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00b      	beq.n	800283c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002824:	897b      	ldrh	r3, [r7, #10]
 8002826:	f003 0207 	and.w	r2, r3, #7
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	3310      	adds	r3, #16
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e009      	b.n	8002850 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800283c:	897a      	ldrh	r2, [r7, #10]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4413      	add	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002850:	893b      	ldrh	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d107      	bne.n	8002866 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	b29a      	uxth	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	80da      	strh	r2, [r3, #6]
 8002864:	e00b      	b.n	800287e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2201      	movs	r2, #1
 800286a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	b29a      	uxth	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	0c1b      	lsrs	r3, r3, #16
 8002878:	b29a      	uxth	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	f043 0302 	orr.w	r3, r3, #2
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d141      	bne.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ee:	4b4b      	ldr	r3, [pc, #300]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fa:	d131      	bne.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028fc:	4b47      	ldr	r3, [pc, #284]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002902:	4a46      	ldr	r2, [pc, #280]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002908:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800290c:	4b43      	ldr	r3, [pc, #268]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002914:	4a41      	ldr	r2, [pc, #260]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002916:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800291a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800291c:	4b40      	ldr	r3, [pc, #256]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2232      	movs	r2, #50	@ 0x32
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	4a3f      	ldr	r2, [pc, #252]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002928:	fba2 2303 	umull	r2, r3, r2, r3
 800292c:	0c9b      	lsrs	r3, r3, #18
 800292e:	3301      	adds	r3, #1
 8002930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002932:	e002      	b.n	800293a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3b01      	subs	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800293a:	4b38      	ldr	r3, [pc, #224]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002946:	d102      	bne.n	800294e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f2      	bne.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800294e:	4b33      	ldr	r3, [pc, #204]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295a:	d158      	bne.n	8002a0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e057      	b.n	8002a10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002960:	4b2e      	ldr	r3, [pc, #184]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002966:	4a2d      	ldr	r2, [pc, #180]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800296c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002970:	e04d      	b.n	8002a0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002978:	d141      	bne.n	80029fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800297a:	4b28      	ldr	r3, [pc, #160]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002986:	d131      	bne.n	80029ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002988:	4b24      	ldr	r3, [pc, #144]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800298a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800298e:	4a23      	ldr	r2, [pc, #140]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002994:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002998:	4b20      	ldr	r3, [pc, #128]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029a0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2232      	movs	r2, #50	@ 0x32
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	0c9b      	lsrs	r3, r3, #18
 80029ba:	3301      	adds	r3, #1
 80029bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029be:	e002      	b.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029c6:	4b15      	ldr	r3, [pc, #84]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d2:	d102      	bne.n	80029da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f2      	bne.n	80029c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e6:	d112      	bne.n	8002a0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e011      	b.n	8002a10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029f2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80029fc:	e007      	b.n	8002a0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029fe:	4b07      	ldr	r3, [pc, #28]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a06:	4a05      	ldr	r2, [pc, #20]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	20000000 	.word	0x20000000
 8002a24:	431bde83 	.word	0x431bde83

08002a28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a2c:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a04      	ldr	r2, [pc, #16]	@ (8002a44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a36:	6093      	str	r3, [r2, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40007000 	.word	0x40007000

08002a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e2fe      	b.n	8003058 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d075      	beq.n	8002b52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a66:	4b97      	ldr	r3, [pc, #604]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a70:	4b94      	ldr	r3, [pc, #592]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b0c      	cmp	r3, #12
 8002a7e:	d102      	bne.n	8002a86 <HAL_RCC_OscConfig+0x3e>
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d002      	beq.n	8002a8c <HAL_RCC_OscConfig+0x44>
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	4b8d      	ldr	r3, [pc, #564]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d05b      	beq.n	8002b50 <HAL_RCC_OscConfig+0x108>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d157      	bne.n	8002b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e2d9      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aac:	d106      	bne.n	8002abc <HAL_RCC_OscConfig+0x74>
 8002aae:	4b85      	ldr	r3, [pc, #532]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a84      	ldr	r2, [pc, #528]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e01d      	b.n	8002af8 <HAL_RCC_OscConfig+0xb0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x98>
 8002ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a7e      	ldr	r2, [pc, #504]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b7c      	ldr	r3, [pc, #496]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a7b      	ldr	r2, [pc, #492]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0xb0>
 8002ae0:	4b78      	ldr	r3, [pc, #480]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a77      	ldr	r2, [pc, #476]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b75      	ldr	r3, [pc, #468]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a74      	ldr	r2, [pc, #464]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fd ffe2 	bl	8000ac8 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7fd ffde 	bl	8000ac8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	@ 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e29e      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0xc0>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fd ffce 	bl	8000ac8 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7fd ffca 	bl	8000ac8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	@ 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e28a      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b42:	4b60      	ldr	r3, [pc, #384]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0xe8>
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d075      	beq.n	8002c4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b5e:	4b59      	ldr	r3, [pc, #356]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b68:	4b56      	ldr	r3, [pc, #344]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b0c      	cmp	r3, #12
 8002b76:	d102      	bne.n	8002b7e <HAL_RCC_OscConfig+0x136>
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_OscConfig+0x13c>
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d11f      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b84:	4b4f      	ldr	r3, [pc, #316]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_OscConfig+0x154>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e25d      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b49      	ldr	r3, [pc, #292]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	4946      	ldr	r1, [pc, #280]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bb0:	4b45      	ldr	r3, [pc, #276]	@ (8002cc8 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fe7f 	bl	80008b8 <HAL_InitTick>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d043      	beq.n	8002c48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e249      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d023      	beq.n	8002c14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fd ff76 	bl	8000ac8 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be0:	f7fd ff72 	bl	8000ac8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e232      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf2:	4b34      	ldr	r3, [pc, #208]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfe:	4b31      	ldr	r3, [pc, #196]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	061b      	lsls	r3, r3, #24
 8002c0c:	492d      	ldr	r1, [pc, #180]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
 8002c12:	e01a      	b.n	8002c4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c14:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002c1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fd ff52 	bl	8000ac8 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fd ff4e 	bl	8000ac8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e20e      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c3a:	4b22      	ldr	r3, [pc, #136]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x1e0>
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d041      	beq.n	8002cda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d01c      	beq.n	8002c98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5e:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c64:	4a17      	ldr	r2, [pc, #92]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7fd ff2b 	bl	8000ac8 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c76:	f7fd ff27 	bl	8000ac8 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e1e7      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c88:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0ef      	beq.n	8002c76 <HAL_RCC_OscConfig+0x22e>
 8002c96:	e020      	b.n	8002cda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c98:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9e:	4a09      	ldr	r2, [pc, #36]	@ (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fd ff0e 	bl	8000ac8 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cae:	e00d      	b.n	8002ccc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fd ff0a 	bl	8000ac8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d906      	bls.n	8002ccc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1ca      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ea      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80a6 	beq.w	8002e34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cec:	4b84      	ldr	r3, [pc, #528]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_OscConfig+0x2b4>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x2b6>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4b7f      	ldr	r3, [pc, #508]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	4a7e      	ldr	r2, [pc, #504]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d1e:	4b79      	ldr	r3, [pc, #484]	@ (8002f04 <HAL_RCC_OscConfig+0x4bc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d118      	bne.n	8002d5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d2a:	4b76      	ldr	r3, [pc, #472]	@ (8002f04 <HAL_RCC_OscConfig+0x4bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a75      	ldr	r2, [pc, #468]	@ (8002f04 <HAL_RCC_OscConfig+0x4bc>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d36:	f7fd fec7 	bl	8000ac8 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3e:	f7fd fec3 	bl	8000ac8 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e183      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d50:	4b6c      	ldr	r3, [pc, #432]	@ (8002f04 <HAL_RCC_OscConfig+0x4bc>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d108      	bne.n	8002d76 <HAL_RCC_OscConfig+0x32e>
 8002d64:	4b66      	ldr	r3, [pc, #408]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6a:	4a65      	ldr	r2, [pc, #404]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d74:	e024      	b.n	8002dc0 <HAL_RCC_OscConfig+0x378>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d110      	bne.n	8002da0 <HAL_RCC_OscConfig+0x358>
 8002d7e:	4b60      	ldr	r3, [pc, #384]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d84:	4a5e      	ldr	r2, [pc, #376]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002d86:	f043 0304 	orr.w	r3, r3, #4
 8002d8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d8e:	4b5c      	ldr	r3, [pc, #368]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d94:	4a5a      	ldr	r2, [pc, #360]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d9e:	e00f      	b.n	8002dc0 <HAL_RCC_OscConfig+0x378>
 8002da0:	4b57      	ldr	r3, [pc, #348]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da6:	4a56      	ldr	r2, [pc, #344]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db0:	4b53      	ldr	r3, [pc, #332]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db6:	4a52      	ldr	r2, [pc, #328]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d016      	beq.n	8002df6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fd fe7e 	bl	8000ac8 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7fd fe7a 	bl	8000ac8 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e138      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de6:	4b46      	ldr	r3, [pc, #280]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ed      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x388>
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fd fe67 	bl	8000ac8 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fd fe63 	bl	8000ac8 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e121      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e14:	4b3a      	ldr	r3, [pc, #232]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ed      	bne.n	8002dfe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4b35      	ldr	r3, [pc, #212]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	4a34      	ldr	r2, [pc, #208]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d03c      	beq.n	8002eba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01c      	beq.n	8002e82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e48:	4b2d      	ldr	r3, [pc, #180]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fd fe36 	bl	8000ac8 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e60:	f7fd fe32 	bl	8000ac8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e0f2      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e72:	4b23      	ldr	r3, [pc, #140]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0ef      	beq.n	8002e60 <HAL_RCC_OscConfig+0x418>
 8002e80:	e01b      	b.n	8002eba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e82:	4b1f      	ldr	r3, [pc, #124]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002e84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e88:	4a1d      	ldr	r2, [pc, #116]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7fd fe19 	bl	8000ac8 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e9a:	f7fd fe15 	bl	8000ac8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0d5      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eac:	4b14      	ldr	r3, [pc, #80]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1ef      	bne.n	8002e9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80c9 	beq.w	8003056 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	f000 8083 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d15e      	bne.n	8002f98 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eda:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a08      	ldr	r2, [pc, #32]	@ (8002f00 <HAL_RCC_OscConfig+0x4b8>)
 8002ee0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fd fdef 	bl	8000ac8 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eec:	e00c      	b.n	8002f08 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fd fdeb 	bl	8000ac8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d905      	bls.n	8002f08 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e0ab      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f08:	4b55      	ldr	r3, [pc, #340]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ec      	bne.n	8002eee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f14:	4b52      	ldr	r3, [pc, #328]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	4b52      	ldr	r3, [pc, #328]	@ (8003064 <HAL_RCC_OscConfig+0x61c>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6a11      	ldr	r1, [r2, #32]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f24:	3a01      	subs	r2, #1
 8002f26:	0112      	lsls	r2, r2, #4
 8002f28:	4311      	orrs	r1, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f2e:	0212      	lsls	r2, r2, #8
 8002f30:	4311      	orrs	r1, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f36:	0852      	lsrs	r2, r2, #1
 8002f38:	3a01      	subs	r2, #1
 8002f3a:	0552      	lsls	r2, r2, #21
 8002f3c:	4311      	orrs	r1, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f42:	0852      	lsrs	r2, r2, #1
 8002f44:	3a01      	subs	r2, #1
 8002f46:	0652      	lsls	r2, r2, #25
 8002f48:	4311      	orrs	r1, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f4e:	06d2      	lsls	r2, r2, #27
 8002f50:	430a      	orrs	r2, r1
 8002f52:	4943      	ldr	r1, [pc, #268]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f58:	4b41      	ldr	r3, [pc, #260]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a40      	ldr	r2, [pc, #256]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f64:	4b3e      	ldr	r3, [pc, #248]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a3d      	ldr	r2, [pc, #244]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fd fdaa 	bl	8000ac8 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fd fda6 	bl	8000ac8 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e066      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8a:	4b35      	ldr	r3, [pc, #212]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x530>
 8002f96:	e05e      	b.n	8003056 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f98:	4b31      	ldr	r3, [pc, #196]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a30      	ldr	r2, [pc, #192]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fd fd90 	bl	8000ac8 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fd fd8c 	bl	8000ac8 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e04c      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fbe:	4b28      	ldr	r3, [pc, #160]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002fca:	4b25      	ldr	r3, [pc, #148]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	4924      	ldr	r1, [pc, #144]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002fd0:	4b25      	ldr	r3, [pc, #148]	@ (8003068 <HAL_RCC_OscConfig+0x620>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60cb      	str	r3, [r1, #12]
 8002fd6:	e03e      	b.n	8003056 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e039      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8003060 <HAL_RCC_OscConfig+0x618>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f003 0203 	and.w	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d12c      	bne.n	8003052 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	3b01      	subs	r3, #1
 8003004:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d123      	bne.n	8003052 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d11b      	bne.n	8003052 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003024:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d113      	bne.n	8003052 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003034:	085b      	lsrs	r3, r3, #1
 8003036:	3b01      	subs	r3, #1
 8003038:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d109      	bne.n	8003052 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	3b01      	subs	r3, #1
 800304c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3720      	adds	r7, #32
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	019f800c 	.word	0x019f800c
 8003068:	feeefffc 	.word	0xfeeefffc

0800306c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e11e      	b.n	80032c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b91      	ldr	r3, [pc, #580]	@ (80032cc <HAL_RCC_ClockConfig+0x260>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d910      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b8e      	ldr	r3, [pc, #568]	@ (80032cc <HAL_RCC_ClockConfig+0x260>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 020f 	bic.w	r2, r3, #15
 800309a:	498c      	ldr	r1, [pc, #560]	@ (80032cc <HAL_RCC_ClockConfig+0x260>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b8a      	ldr	r3, [pc, #552]	@ (80032cc <HAL_RCC_ClockConfig+0x260>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e106      	b.n	80032c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d073      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d129      	bne.n	800311c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c8:	4b81      	ldr	r3, [pc, #516]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0f4      	b.n	80032c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80030d8:	f000 f9ba 	bl	8003450 <RCC_GetSysClockFreqFromPLLSource>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4a7c      	ldr	r2, [pc, #496]	@ (80032d4 <HAL_RCC_ClockConfig+0x268>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d93f      	bls.n	8003166 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030e6:	4b7a      	ldr	r3, [pc, #488]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d033      	beq.n	8003166 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	d12f      	bne.n	8003166 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003106:	4b72      	ldr	r3, [pc, #456]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800310e:	4a70      	ldr	r2, [pc, #448]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003114:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e024      	b.n	8003166 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d107      	bne.n	8003134 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003124:	4b6a      	ldr	r3, [pc, #424]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d109      	bne.n	8003144 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0c6      	b.n	80032c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003134:	4b66      	ldr	r3, [pc, #408]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0be      	b.n	80032c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003144:	f000 f8ce 	bl	80032e4 <HAL_RCC_GetSysClockFreq>
 8003148:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4a61      	ldr	r2, [pc, #388]	@ (80032d4 <HAL_RCC_ClockConfig+0x268>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d909      	bls.n	8003166 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003152:	4b5f      	ldr	r3, [pc, #380]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800315a:	4a5d      	ldr	r2, [pc, #372]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 800315c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003160:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003162:	2380      	movs	r3, #128	@ 0x80
 8003164:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003166:	4b5a      	ldr	r3, [pc, #360]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f023 0203 	bic.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4957      	ldr	r1, [pc, #348]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003174:	4313      	orrs	r3, r2
 8003176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003178:	f7fd fca6 	bl	8000ac8 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	e00a      	b.n	8003196 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003180:	f7fd fca2 	bl	8000ac8 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e095      	b.n	80032c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	4b4e      	ldr	r3, [pc, #312]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 020c 	and.w	r2, r3, #12
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d1eb      	bne.n	8003180 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d023      	beq.n	80031fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c0:	4b43      	ldr	r3, [pc, #268]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4a42      	ldr	r2, [pc, #264]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 80031c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80031d8:	4b3d      	ldr	r3, [pc, #244]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80031e0:	4a3b      	ldr	r2, [pc, #236]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 80031e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e8:	4b39      	ldr	r3, [pc, #228]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4936      	ldr	r1, [pc, #216]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
 80031fa:	e008      	b.n	800320e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b80      	cmp	r3, #128	@ 0x80
 8003200:	d105      	bne.n	800320e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003202:	4b33      	ldr	r3, [pc, #204]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	4a32      	ldr	r2, [pc, #200]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003208:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800320c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800320e:	4b2f      	ldr	r3, [pc, #188]	@ (80032cc <HAL_RCC_ClockConfig+0x260>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d21d      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321c:	4b2b      	ldr	r3, [pc, #172]	@ (80032cc <HAL_RCC_ClockConfig+0x260>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 020f 	bic.w	r2, r3, #15
 8003224:	4929      	ldr	r1, [pc, #164]	@ (80032cc <HAL_RCC_ClockConfig+0x260>)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800322c:	f7fd fc4c 	bl	8000ac8 <HAL_GetTick>
 8003230:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	e00a      	b.n	800324a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003234:	f7fd fc48 	bl	8000ac8 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e03b      	b.n	80032c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <HAL_RCC_ClockConfig+0x260>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d1ed      	bne.n	8003234 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003264:	4b1a      	ldr	r3, [pc, #104]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4917      	ldr	r1, [pc, #92]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003282:	4b13      	ldr	r3, [pc, #76]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	490f      	ldr	r1, [pc, #60]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003296:	f000 f825 	bl	80032e4 <HAL_RCC_GetSysClockFreq>
 800329a:	4602      	mov	r2, r0
 800329c:	4b0c      	ldr	r3, [pc, #48]	@ (80032d0 <HAL_RCC_ClockConfig+0x264>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	490c      	ldr	r1, [pc, #48]	@ (80032d8 <HAL_RCC_ClockConfig+0x26c>)
 80032a8:	5ccb      	ldrb	r3, [r1, r3]
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <HAL_RCC_ClockConfig+0x270>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032b6:	4b0a      	ldr	r3, [pc, #40]	@ (80032e0 <HAL_RCC_ClockConfig+0x274>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd fafc 	bl	80008b8 <HAL_InitTick>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40022000 	.word	0x40022000
 80032d0:	40021000 	.word	0x40021000
 80032d4:	04c4b400 	.word	0x04c4b400
 80032d8:	0800cd24 	.word	0x0800cd24
 80032dc:	20000000 	.word	0x20000000
 80032e0:	20000004 	.word	0x20000004

080032e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032ea:	4b2c      	ldr	r3, [pc, #176]	@ (800339c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d102      	bne.n	80032fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032f6:	4b2a      	ldr	r3, [pc, #168]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	e047      	b.n	800338c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032fc:	4b27      	ldr	r3, [pc, #156]	@ (800339c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d102      	bne.n	800330e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003308:	4b26      	ldr	r3, [pc, #152]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	e03e      	b.n	800338c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800330e:	4b23      	ldr	r3, [pc, #140]	@ (800339c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d136      	bne.n	8003388 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800331a:	4b20      	ldr	r3, [pc, #128]	@ (800339c <HAL_RCC_GetSysClockFreq+0xb8>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003324:	4b1d      	ldr	r3, [pc, #116]	@ (800339c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	3301      	adds	r3, #1
 8003330:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d10c      	bne.n	8003352 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003338:	4a1a      	ldr	r2, [pc, #104]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	4a16      	ldr	r2, [pc, #88]	@ (800339c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003342:	68d2      	ldr	r2, [r2, #12]
 8003344:	0a12      	lsrs	r2, r2, #8
 8003346:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	617b      	str	r3, [r7, #20]
      break;
 8003350:	e00c      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003352:	4a13      	ldr	r2, [pc, #76]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	fbb2 f3f3 	udiv	r3, r2, r3
 800335a:	4a10      	ldr	r2, [pc, #64]	@ (800339c <HAL_RCC_GetSysClockFreq+0xb8>)
 800335c:	68d2      	ldr	r2, [r2, #12]
 800335e:	0a12      	lsrs	r2, r2, #8
 8003360:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003364:	fb02 f303 	mul.w	r3, r2, r3
 8003368:	617b      	str	r3, [r7, #20]
      break;
 800336a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800336c:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_RCC_GetSysClockFreq+0xb8>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	0e5b      	lsrs	r3, r3, #25
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	3301      	adds	r3, #1
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	e001      	b.n	800338c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800338c:	693b      	ldr	r3, [r7, #16]
}
 800338e:	4618      	mov	r0, r3
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	007a1200 	.word	0x007a1200

080033a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b03      	ldr	r3, [pc, #12]	@ (80033bc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000000 	.word	0x20000000

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033c4:	f7ff fff0 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4904      	ldr	r1, [pc, #16]	@ (80033e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	0800cd34 	.word	0x0800cd34

080033ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	220f      	movs	r2, #15
 80033fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80033fc:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <HAL_RCC_GetClockConfig+0x5c>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0203 	and.w	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003408:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <HAL_RCC_GetClockConfig+0x5c>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003414:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <HAL_RCC_GetClockConfig+0x5c>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003420:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <HAL_RCC_GetClockConfig+0x5c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	08db      	lsrs	r3, r3, #3
 8003426:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800342e:	4b07      	ldr	r3, [pc, #28]	@ (800344c <HAL_RCC_GetClockConfig+0x60>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	601a      	str	r2, [r3, #0]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	40022000 	.word	0x40022000

08003450 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003456:	4b1e      	ldr	r3, [pc, #120]	@ (80034d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003460:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	3301      	adds	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d10c      	bne.n	800348e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003474:	4a17      	ldr	r2, [pc, #92]	@ (80034d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	4a14      	ldr	r2, [pc, #80]	@ (80034d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800347e:	68d2      	ldr	r2, [r2, #12]
 8003480:	0a12      	lsrs	r2, r2, #8
 8003482:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	617b      	str	r3, [r7, #20]
    break;
 800348c:	e00c      	b.n	80034a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800348e:	4a12      	ldr	r2, [pc, #72]	@ (80034d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	fbb2 f3f3 	udiv	r3, r2, r3
 8003496:	4a0e      	ldr	r2, [pc, #56]	@ (80034d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003498:	68d2      	ldr	r2, [r2, #12]
 800349a:	0a12      	lsrs	r2, r2, #8
 800349c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]
    break;
 80034a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034a8:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	0e5b      	lsrs	r3, r3, #25
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	3301      	adds	r3, #1
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80034c2:	687b      	ldr	r3, [r7, #4]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40021000 	.word	0x40021000
 80034d4:	007a1200 	.word	0x007a1200
 80034d8:	00f42400 	.word	0x00f42400

080034dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034e4:	2300      	movs	r3, #0
 80034e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034e8:	2300      	movs	r3, #0
 80034ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8098 	beq.w	800362a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fe:	4b43      	ldr	r3, [pc, #268]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10d      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	4b40      	ldr	r3, [pc, #256]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	4a3f      	ldr	r2, [pc, #252]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003514:	6593      	str	r3, [r2, #88]	@ 0x58
 8003516:	4b3d      	ldr	r3, [pc, #244]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003522:	2301      	movs	r3, #1
 8003524:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003526:	4b3a      	ldr	r3, [pc, #232]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a39      	ldr	r2, [pc, #228]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800352c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003532:	f7fd fac9 	bl	8000ac8 <HAL_GetTick>
 8003536:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003538:	e009      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353a:	f7fd fac5 	bl	8000ac8 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d902      	bls.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	74fb      	strb	r3, [r7, #19]
        break;
 800354c:	e005      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800354e:	4b30      	ldr	r3, [pc, #192]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ef      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800355a:	7cfb      	ldrb	r3, [r7, #19]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d159      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003560:	4b2a      	ldr	r3, [pc, #168]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800356a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01e      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	429a      	cmp	r2, r3
 800357a:	d019      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800357c:	4b23      	ldr	r3, [pc, #140]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003586:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003588:	4b20      	ldr	r3, [pc, #128]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358e:	4a1f      	ldr	r2, [pc, #124]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003598:	4b1c      	ldr	r3, [pc, #112]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359e:	4a1b      	ldr	r2, [pc, #108]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035a8:	4a18      	ldr	r2, [pc, #96]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d016      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fd fa85 	bl	8000ac8 <HAL_GetTick>
 80035be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c0:	e00b      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7fd fa81 	bl	8000ac8 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d902      	bls.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	74fb      	strb	r3, [r7, #19]
            break;
 80035d8:	e006      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035da:	4b0c      	ldr	r3, [pc, #48]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0ec      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ee:	4b07      	ldr	r3, [pc, #28]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fc:	4903      	ldr	r1, [pc, #12]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003604:	e008      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	74bb      	strb	r3, [r7, #18]
 800360a:	e005      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800360c:	40021000 	.word	0x40021000
 8003610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003618:	7c7b      	ldrb	r3, [r7, #17]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d105      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800361e:	4ba7      	ldr	r3, [pc, #668]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003622:	4aa6      	ldr	r2, [pc, #664]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003628:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003636:	4ba1      	ldr	r3, [pc, #644]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363c:	f023 0203 	bic.w	r2, r3, #3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	499d      	ldr	r1, [pc, #628]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003658:	4b98      	ldr	r3, [pc, #608]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365e:	f023 020c 	bic.w	r2, r3, #12
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	4995      	ldr	r1, [pc, #596]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800367a:	4b90      	ldr	r3, [pc, #576]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003680:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	498c      	ldr	r1, [pc, #560]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800369c:	4b87      	ldr	r3, [pc, #540]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	4984      	ldr	r1, [pc, #528]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036be:	4b7f      	ldr	r3, [pc, #508]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	497b      	ldr	r1, [pc, #492]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036e0:	4b76      	ldr	r3, [pc, #472]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	4973      	ldr	r1, [pc, #460]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003702:	4b6e      	ldr	r3, [pc, #440]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003708:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	496a      	ldr	r1, [pc, #424]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003724:	4b65      	ldr	r3, [pc, #404]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	4962      	ldr	r1, [pc, #392]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003746:	4b5d      	ldr	r3, [pc, #372]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	4959      	ldr	r1, [pc, #356]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003768:	4b54      	ldr	r3, [pc, #336]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003776:	4951      	ldr	r1, [pc, #324]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003786:	2b00      	cmp	r3, #0
 8003788:	d015      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800378a:	4b4c      	ldr	r3, [pc, #304]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003790:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	4948      	ldr	r1, [pc, #288]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037a8:	d105      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037aa:	4b44      	ldr	r3, [pc, #272]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4a43      	ldr	r2, [pc, #268]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037b4:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d015      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037c2:	4b3e      	ldr	r3, [pc, #248]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	493a      	ldr	r1, [pc, #232]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037e0:	d105      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e2:	4b36      	ldr	r3, [pc, #216]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4a35      	ldr	r2, [pc, #212]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ec:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d015      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037fa:	4b30      	ldr	r3, [pc, #192]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003800:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003808:	492c      	ldr	r1, [pc, #176]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003818:	d105      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800381a:	4b28      	ldr	r3, [pc, #160]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	4a27      	ldr	r2, [pc, #156]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003820:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003824:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d015      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003832:	4b22      	ldr	r3, [pc, #136]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003838:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003840:	491e      	ldr	r1, [pc, #120]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003850:	d105      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003852:	4b1a      	ldr	r3, [pc, #104]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	4a19      	ldr	r2, [pc, #100]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003858:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800385c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d015      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800386a:	4b14      	ldr	r3, [pc, #80]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003870:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	4910      	ldr	r1, [pc, #64]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003888:	d105      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800388a:	4b0c      	ldr	r3, [pc, #48]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4a0b      	ldr	r2, [pc, #44]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003890:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003894:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d018      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	4902      	ldr	r1, [pc, #8]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	e001      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80038bc:	40021000 	.word	0x40021000
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038c6:	d105      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038c8:	4b21      	ldr	r3, [pc, #132]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a20      	ldr	r2, [pc, #128]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80038ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d015      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80038e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	4918      	ldr	r1, [pc, #96]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fe:	d105      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003900:	4b13      	ldr	r3, [pc, #76]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a12      	ldr	r2, [pc, #72]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800390a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d015      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003918:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800391a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800391e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003926:	490a      	ldr	r1, [pc, #40]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003932:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003936:	d105      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003938:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4a04      	ldr	r2, [pc, #16]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800393e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003942:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003944:	7cbb      	ldrb	r3, [r7, #18]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000

08003954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e049      	b.n	80039fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f841 	bl	8003a02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f000 fa28 	bl	8003de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d001      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e04f      	b.n	8003ad0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a23      	ldr	r2, [pc, #140]	@ (8003adc <HAL_TIM_Base_Start_IT+0xc4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01d      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x76>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5a:	d018      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x76>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x76>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x76>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x76>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003aec <HAL_TIM_Base_Start_IT+0xd4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x76>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a19      	ldr	r2, [pc, #100]	@ (8003af0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d115      	bne.n	8003aba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	4b17      	ldr	r3, [pc, #92]	@ (8003af4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b06      	cmp	r3, #6
 8003a9e:	d015      	beq.n	8003acc <HAL_TIM_Base_Start_IT+0xb4>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa6:	d011      	beq.n	8003acc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab8:	e008      	b.n	8003acc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	e000      	b.n	8003ace <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003acc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800
 8003ae8:	40013400 	.word	0x40013400
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40015000 	.word	0x40015000
 8003af4:	00010007 	.word	0x00010007

08003af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d020      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01b      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0202 	mvn.w	r2, #2
 8003b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f931 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f923 	bl	8003d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f934 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d020      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01b      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0204 	mvn.w	r2, #4
 8003b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f90b 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003b94:	e005      	b.n	8003ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8fd 	bl	8003d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f90e 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d020      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01b      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0208 	mvn.w	r2, #8
 8003bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8e5 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003be0:	e005      	b.n	8003bee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8d7 	bl	8003d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f8e8 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d020      	beq.n	8003c40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01b      	beq.n	8003c40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0210 	mvn.w	r2, #16
 8003c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2208      	movs	r2, #8
 8003c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f8bf 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003c2c:	e005      	b.n	8003c3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f8b1 	bl	8003d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f8c2 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00c      	beq.n	8003c64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0201 	mvn.w	r2, #1
 8003c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fc fdca 	bl	80007f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d104      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00c      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f95f 	bl	8003f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f957 	bl	8003f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00c      	beq.n	8003cda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f87c 	bl	8003dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00c      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f06f 0220 	mvn.w	r2, #32
 8003cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f91f 	bl	8003f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00c      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f92b 	bl	8003f78 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00c      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f923 	bl	8003f8c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00c      	beq.n	8003d6a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f91b 	bl	8003fa0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00c      	beq.n	8003d8e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f913 	bl	8003fb4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a48      	ldr	r2, [pc, #288]	@ (8003f1c <TIM_Base_SetConfig+0x134>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e06:	d00f      	beq.n	8003e28 <TIM_Base_SetConfig+0x40>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a45      	ldr	r2, [pc, #276]	@ (8003f20 <TIM_Base_SetConfig+0x138>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00b      	beq.n	8003e28 <TIM_Base_SetConfig+0x40>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a44      	ldr	r2, [pc, #272]	@ (8003f24 <TIM_Base_SetConfig+0x13c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d007      	beq.n	8003e28 <TIM_Base_SetConfig+0x40>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a43      	ldr	r2, [pc, #268]	@ (8003f28 <TIM_Base_SetConfig+0x140>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d003      	beq.n	8003e28 <TIM_Base_SetConfig+0x40>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a42      	ldr	r2, [pc, #264]	@ (8003f2c <TIM_Base_SetConfig+0x144>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d108      	bne.n	8003e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a37      	ldr	r2, [pc, #220]	@ (8003f1c <TIM_Base_SetConfig+0x134>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01f      	beq.n	8003e82 <TIM_Base_SetConfig+0x9a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e48:	d01b      	beq.n	8003e82 <TIM_Base_SetConfig+0x9a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a34      	ldr	r2, [pc, #208]	@ (8003f20 <TIM_Base_SetConfig+0x138>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d017      	beq.n	8003e82 <TIM_Base_SetConfig+0x9a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a33      	ldr	r2, [pc, #204]	@ (8003f24 <TIM_Base_SetConfig+0x13c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <TIM_Base_SetConfig+0x9a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a32      	ldr	r2, [pc, #200]	@ (8003f28 <TIM_Base_SetConfig+0x140>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00f      	beq.n	8003e82 <TIM_Base_SetConfig+0x9a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a32      	ldr	r2, [pc, #200]	@ (8003f30 <TIM_Base_SetConfig+0x148>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00b      	beq.n	8003e82 <TIM_Base_SetConfig+0x9a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a31      	ldr	r2, [pc, #196]	@ (8003f34 <TIM_Base_SetConfig+0x14c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d007      	beq.n	8003e82 <TIM_Base_SetConfig+0x9a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a30      	ldr	r2, [pc, #192]	@ (8003f38 <TIM_Base_SetConfig+0x150>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d003      	beq.n	8003e82 <TIM_Base_SetConfig+0x9a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f2c <TIM_Base_SetConfig+0x144>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d108      	bne.n	8003e94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a18      	ldr	r2, [pc, #96]	@ (8003f1c <TIM_Base_SetConfig+0x134>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <TIM_Base_SetConfig+0x100>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a19      	ldr	r2, [pc, #100]	@ (8003f28 <TIM_Base_SetConfig+0x140>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00f      	beq.n	8003ee8 <TIM_Base_SetConfig+0x100>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a19      	ldr	r2, [pc, #100]	@ (8003f30 <TIM_Base_SetConfig+0x148>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00b      	beq.n	8003ee8 <TIM_Base_SetConfig+0x100>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a18      	ldr	r2, [pc, #96]	@ (8003f34 <TIM_Base_SetConfig+0x14c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d007      	beq.n	8003ee8 <TIM_Base_SetConfig+0x100>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a17      	ldr	r2, [pc, #92]	@ (8003f38 <TIM_Base_SetConfig+0x150>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d003      	beq.n	8003ee8 <TIM_Base_SetConfig+0x100>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a12      	ldr	r2, [pc, #72]	@ (8003f2c <TIM_Base_SetConfig+0x144>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d103      	bne.n	8003ef0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d105      	bne.n	8003f0e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f023 0201 	bic.w	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]
  }
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40013400 	.word	0x40013400
 8003f2c:	40015000 	.word	0x40015000
 8003f30:	40014000 	.word	0x40014000
 8003f34:	40014400 	.word	0x40014400
 8003f38:	40014800 	.word	0x40014800

08003f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b08b      	sub	sp, #44	@ 0x2c
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	613b      	str	r3, [r7, #16]
  return result;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003fee:	2320      	movs	r3, #32
 8003ff0:	e003      	b.n	8003ffa <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	2103      	movs	r1, #3
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	401a      	ands	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	61fb      	str	r3, [r7, #28]
  return result;
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800401c:	2320      	movs	r3, #32
 800401e:	e003      	b.n	8004028 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	fab3 f383 	clz	r3, r3
 8004026:	b2db      	uxtb	r3, r3
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	431a      	orrs	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	601a      	str	r2, [r3, #0]
}
 8004036:	bf00      	nop
 8004038:	372c      	adds	r7, #44	@ 0x2c
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	43db      	mvns	r3, r3
 8004056:	401a      	ands	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	431a      	orrs	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	605a      	str	r2, [r3, #4]
}
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004072:	b480      	push	{r7}
 8004074:	b08b      	sub	sp, #44	@ 0x2c
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	fa93 f3a3 	rbit	r3, r3
 800408c:	613b      	str	r3, [r7, #16]
  return result;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004098:	2320      	movs	r3, #32
 800409a:	e003      	b.n	80040a4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	2103      	movs	r1, #3
 80040a8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	401a      	ands	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	61fb      	str	r3, [r7, #28]
  return result;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80040c6:	2320      	movs	r3, #32
 80040c8:	e003      	b.n	80040d2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	431a      	orrs	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80040e0:	bf00      	nop
 80040e2:	372c      	adds	r7, #44	@ 0x2c
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b08b      	sub	sp, #44	@ 0x2c
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa93 f3a3 	rbit	r3, r3
 8004106:	613b      	str	r3, [r7, #16]
  return result;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004112:	2320      	movs	r3, #32
 8004114:	e003      	b.n	800411e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	fab3 f383 	clz	r3, r3
 800411c:	b2db      	uxtb	r3, r3
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	2103      	movs	r1, #3
 8004122:	fa01 f303 	lsl.w	r3, r1, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	401a      	ands	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	fa93 f3a3 	rbit	r3, r3
 8004134:	61fb      	str	r3, [r7, #28]
  return result;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004140:	2320      	movs	r3, #32
 8004142:	e003      	b.n	800414c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	431a      	orrs	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	60da      	str	r2, [r3, #12]
}
 800415a:	bf00      	nop
 800415c:	372c      	adds	r7, #44	@ 0x2c
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004166:	b480      	push	{r7}
 8004168:	b08b      	sub	sp, #44	@ 0x2c
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1a      	ldr	r2, [r3, #32]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	fa93 f3a3 	rbit	r3, r3
 8004180:	613b      	str	r3, [r7, #16]
  return result;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800418c:	2320      	movs	r3, #32
 800418e:	e003      	b.n	8004198 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	fab3 f383 	clz	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	210f      	movs	r1, #15
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	401a      	ands	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	fa93 f3a3 	rbit	r3, r3
 80041ae:	61fb      	str	r3, [r7, #28]
  return result;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80041ba:	2320      	movs	r3, #32
 80041bc:	e003      	b.n	80041c6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	431a      	orrs	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80041d4:	bf00      	nop
 80041d6:	372c      	adds	r7, #44	@ 0x2c
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b08b      	sub	sp, #44	@ 0x2c
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	613b      	str	r3, [r7, #16]
  return result;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004208:	2320      	movs	r3, #32
 800420a:	e003      	b.n	8004214 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	210f      	movs	r1, #15
 8004218:	fa01 f303 	lsl.w	r3, r1, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	401a      	ands	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	fa93 f3a3 	rbit	r3, r3
 800422c:	61fb      	str	r3, [r7, #28]
  return result;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004238:	2320      	movs	r3, #32
 800423a:	e003      	b.n	8004244 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	fa01 f303 	lsl.w	r3, r1, r3
 800424c:	431a      	orrs	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004252:	bf00      	nop
 8004254:	372c      	adds	r7, #44	@ 0x2c
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b088      	sub	sp, #32
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	60fb      	str	r3, [r7, #12]
  return result;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <LL_GPIO_Init+0x26>
    return 32U;
 8004280:	2320      	movs	r3, #32
 8004282:	e003      	b.n	800428c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800428e:	e048      	b.n	8004322 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	2101      	movs	r1, #1
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	fa01 f303 	lsl.w	r3, r1, r3
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d03a      	beq.n	800431c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d003      	beq.n	80042b6 <LL_GPIO_Init+0x58>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d10e      	bne.n	80042d4 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	461a      	mov	r2, r3
 80042bc:	69b9      	ldr	r1, [r7, #24]
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fed7 	bl	8004072 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6819      	ldr	r1, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	461a      	mov	r2, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff feb7 	bl	8004042 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	461a      	mov	r2, r3
 80042da:	69b9      	ldr	r1, [r7, #24]
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ff05 	bl	80040ec <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d111      	bne.n	800430e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2bff      	cmp	r3, #255	@ 0xff
 80042ee:	d807      	bhi.n	8004300 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	461a      	mov	r2, r3
 80042f6:	69b9      	ldr	r1, [r7, #24]
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ff34 	bl	8004166 <LL_GPIO_SetAFPin_0_7>
 80042fe:	e006      	b.n	800430e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	461a      	mov	r2, r3
 8004306:	69b9      	ldr	r1, [r7, #24]
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ff69 	bl	80041e0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	461a      	mov	r2, r3
 8004314:	69b9      	ldr	r1, [r7, #24]
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff fe56 	bl	8003fc8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	3301      	adds	r3, #1
 8004320:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1af      	bne.n	8004290 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3720      	adds	r7, #32
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004340:	4b07      	ldr	r3, [pc, #28]	@ (8004360 <LL_RCC_HSI_IsReady+0x24>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800434c:	d101      	bne.n	8004352 <LL_RCC_HSI_IsReady+0x16>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <LL_RCC_HSI_IsReady+0x18>
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000

08004364 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004368:	4b07      	ldr	r3, [pc, #28]	@ (8004388 <LL_RCC_LSE_IsReady+0x24>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b02      	cmp	r3, #2
 8004374:	d101      	bne.n	800437a <LL_RCC_LSE_IsReady+0x16>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <LL_RCC_LSE_IsReady+0x18>
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000

0800438c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004390:	4b04      	ldr	r3, [pc, #16]	@ (80043a4 <LL_RCC_GetSysClkSource+0x18>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030c 	and.w	r3, r3, #12
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000

080043a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80043ac:	4b04      	ldr	r3, [pc, #16]	@ (80043c0 <LL_RCC_GetAHBPrescaler+0x18>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000

080043c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80043c8:	4b04      	ldr	r3, [pc, #16]	@ (80043dc <LL_RCC_GetAPB1Prescaler+0x18>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000

080043e0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80043e4:	4b04      	ldr	r3, [pc, #16]	@ (80043f8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000

080043fc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004404:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <LL_RCC_GetUSARTClockSource+0x24>)
 8004406:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	401a      	ands	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	4313      	orrs	r3, r2
}
 8004414:	4618      	mov	r0, r3
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40021000 	.word	0x40021000

08004424 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800442c:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <LL_RCC_GetUARTClockSource+0x24>)
 800442e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	401a      	ands	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	041b      	lsls	r3, r3, #16
 800443a:	4313      	orrs	r3, r2
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	40021000 	.word	0x40021000

0800444c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004450:	4b04      	ldr	r3, [pc, #16]	@ (8004464 <LL_RCC_PLL_GetMainSource+0x18>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0303 	and.w	r3, r3, #3
}
 8004458:	4618      	mov	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000

08004468 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800446c:	4b04      	ldr	r3, [pc, #16]	@ (8004480 <LL_RCC_PLL_GetN+0x18>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004476:	4618      	mov	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40021000 	.word	0x40021000

08004484 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004488:	4b04      	ldr	r3, [pc, #16]	@ (800449c <LL_RCC_PLL_GetR+0x18>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000

080044a0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80044a4:	4b04      	ldr	r3, [pc, #16]	@ (80044b8 <LL_RCC_PLL_GetDivider+0x18>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000

080044bc <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d132      	bne.n	8004534 <LL_RCC_GetUSARTClockFreq+0x78>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ff94 	bl	80043fc <LL_RCC_GetUSARTClockSource>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 80044da:	d016      	beq.n	800450a <LL_RCC_GetUSARTClockFreq+0x4e>
 80044dc:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 80044e0:	d81c      	bhi.n	800451c <LL_RCC_GetUSARTClockFreq+0x60>
 80044e2:	4a51      	ldr	r2, [pc, #324]	@ (8004628 <LL_RCC_GetUSARTClockFreq+0x16c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <LL_RCC_GetUSARTClockFreq+0x34>
 80044e8:	4a50      	ldr	r2, [pc, #320]	@ (800462c <LL_RCC_GetUSARTClockFreq+0x170>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <LL_RCC_GetUSARTClockFreq+0x3c>
 80044ee:	e015      	b.n	800451c <LL_RCC_GetUSARTClockFreq+0x60>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80044f0:	f000 f92e 	bl	8004750 <RCC_GetSystemClockFreq>
 80044f4:	60f8      	str	r0, [r7, #12]
        break;
 80044f6:	e092      	b.n	800461e <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80044f8:	f7ff ff20 	bl	800433c <LL_RCC_HSI_IsReady>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8082 	beq.w	8004608 <LL_RCC_GetUSARTClockFreq+0x14c>
        {
          usart_frequency = HSI_VALUE;
 8004504:	4b4a      	ldr	r3, [pc, #296]	@ (8004630 <LL_RCC_GetUSARTClockFreq+0x174>)
 8004506:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004508:	e07e      	b.n	8004608 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800450a:	f7ff ff2b 	bl	8004364 <LL_RCC_LSE_IsReady>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d07b      	beq.n	800460c <LL_RCC_GetUSARTClockFreq+0x150>
        {
          usart_frequency = LSE_VALUE;
 8004514:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004518:	60fb      	str	r3, [r7, #12]
        }
        break;
 800451a:	e077      	b.n	800460c <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800451c:	f000 f918 	bl	8004750 <RCC_GetSystemClockFreq>
 8004520:	4603      	mov	r3, r0
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f93a 	bl	800479c <RCC_GetHCLKClockFreq>
 8004528:	4603      	mov	r3, r0
 800452a:	4618      	mov	r0, r3
 800452c:	f000 f964 	bl	80047f8 <RCC_GetPCLK2ClockFreq>
 8004530:	60f8      	str	r0, [r7, #12]
        break;
 8004532:	e074      	b.n	800461e <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b0c      	cmp	r3, #12
 8004538:	d131      	bne.n	800459e <LL_RCC_GetUSARTClockFreq+0xe2>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ff5e 	bl	80043fc <LL_RCC_GetUSARTClockSource>
 8004540:	4603      	mov	r3, r0
 8004542:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8004546:	d015      	beq.n	8004574 <LL_RCC_GetUSARTClockFreq+0xb8>
 8004548:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 800454c:	d81b      	bhi.n	8004586 <LL_RCC_GetUSARTClockFreq+0xca>
 800454e:	4a39      	ldr	r2, [pc, #228]	@ (8004634 <LL_RCC_GetUSARTClockFreq+0x178>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <LL_RCC_GetUSARTClockFreq+0xa0>
 8004554:	4a38      	ldr	r2, [pc, #224]	@ (8004638 <LL_RCC_GetUSARTClockFreq+0x17c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <LL_RCC_GetUSARTClockFreq+0xa8>
 800455a:	e014      	b.n	8004586 <LL_RCC_GetUSARTClockFreq+0xca>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800455c:	f000 f8f8 	bl	8004750 <RCC_GetSystemClockFreq>
 8004560:	60f8      	str	r0, [r7, #12]
        break;
 8004562:	e05c      	b.n	800461e <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004564:	f7ff feea 	bl	800433c <LL_RCC_HSI_IsReady>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d050      	beq.n	8004610 <LL_RCC_GetUSARTClockFreq+0x154>
        {
          usart_frequency = HSI_VALUE;
 800456e:	4b30      	ldr	r3, [pc, #192]	@ (8004630 <LL_RCC_GetUSARTClockFreq+0x174>)
 8004570:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004572:	e04d      	b.n	8004610 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004574:	f7ff fef6 	bl	8004364 <LL_RCC_LSE_IsReady>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d04a      	beq.n	8004614 <LL_RCC_GetUSARTClockFreq+0x158>
        {
          usart_frequency = LSE_VALUE;
 800457e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004582:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004584:	e046      	b.n	8004614 <LL_RCC_GetUSARTClockFreq+0x158>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004586:	f000 f8e3 	bl	8004750 <RCC_GetSystemClockFreq>
 800458a:	4603      	mov	r3, r0
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f905 	bl	800479c <RCC_GetHCLKClockFreq>
 8004592:	4603      	mov	r3, r0
 8004594:	4618      	mov	r0, r3
 8004596:	f000 f919 	bl	80047cc <RCC_GetPCLK1ClockFreq>
 800459a:	60f8      	str	r0, [r7, #12]
        break;
 800459c:	e03f      	b.n	800461e <LL_RCC_GetUSARTClockFreq+0x162>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b30      	cmp	r3, #48	@ 0x30
 80045a2:	d13c      	bne.n	800461e <LL_RCC_GetUSARTClockFreq+0x162>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff ff29 	bl	80043fc <LL_RCC_GetUSARTClockSource>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80045b0:	d015      	beq.n	80045de <LL_RCC_GetUSARTClockFreq+0x122>
 80045b2:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80045b6:	d81b      	bhi.n	80045f0 <LL_RCC_GetUSARTClockFreq+0x134>
 80045b8:	4a20      	ldr	r2, [pc, #128]	@ (800463c <LL_RCC_GetUSARTClockFreq+0x180>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <LL_RCC_GetUSARTClockFreq+0x10a>
 80045be:	4a20      	ldr	r2, [pc, #128]	@ (8004640 <LL_RCC_GetUSARTClockFreq+0x184>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <LL_RCC_GetUSARTClockFreq+0x112>
 80045c4:	e014      	b.n	80045f0 <LL_RCC_GetUSARTClockFreq+0x134>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80045c6:	f000 f8c3 	bl	8004750 <RCC_GetSystemClockFreq>
 80045ca:	60f8      	str	r0, [r7, #12]
          break;
 80045cc:	e027      	b.n	800461e <LL_RCC_GetUSARTClockFreq+0x162>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80045ce:	f7ff feb5 	bl	800433c <LL_RCC_HSI_IsReady>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01f      	beq.n	8004618 <LL_RCC_GetUSARTClockFreq+0x15c>
          {
            usart_frequency = HSI_VALUE;
 80045d8:	4b15      	ldr	r3, [pc, #84]	@ (8004630 <LL_RCC_GetUSARTClockFreq+0x174>)
 80045da:	60fb      	str	r3, [r7, #12]
          }
          break;
 80045dc:	e01c      	b.n	8004618 <LL_RCC_GetUSARTClockFreq+0x15c>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80045de:	f7ff fec1 	bl	8004364 <LL_RCC_LSE_IsReady>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d019      	beq.n	800461c <LL_RCC_GetUSARTClockFreq+0x160>
          {
            usart_frequency = LSE_VALUE;
 80045e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ec:	60fb      	str	r3, [r7, #12]
          }
          break;
 80045ee:	e015      	b.n	800461c <LL_RCC_GetUSARTClockFreq+0x160>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80045f0:	f000 f8ae 	bl	8004750 <RCC_GetSystemClockFreq>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f8d0 	bl	800479c <RCC_GetHCLKClockFreq>
 80045fc:	4603      	mov	r3, r0
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f8e4 	bl	80047cc <RCC_GetPCLK1ClockFreq>
 8004604:	60f8      	str	r0, [r7, #12]
          break;
 8004606:	e00a      	b.n	800461e <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8004608:	bf00      	nop
 800460a:	e008      	b.n	800461e <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 800460c:	bf00      	nop
 800460e:	e006      	b.n	800461e <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8004610:	bf00      	nop
 8004612:	e004      	b.n	800461e <LL_RCC_GetUSARTClockFreq+0x162>
        break;
 8004614:	bf00      	nop
 8004616:	e002      	b.n	800461e <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 8004618:	bf00      	nop
 800461a:	e000      	b.n	800461e <LL_RCC_GetUSARTClockFreq+0x162>
          break;
 800461c:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800461e:	68fb      	ldr	r3, [r7, #12]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	00030001 	.word	0x00030001
 800462c:	00030002 	.word	0x00030002
 8004630:	00f42400 	.word	0x00f42400
 8004634:	000c0004 	.word	0x000c0004
 8004638:	000c0008 	.word	0x000c0008
 800463c:	00300010 	.word	0x00300010
 8004640:	00300020 	.word	0x00300020

08004644 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2bc0      	cmp	r3, #192	@ 0xc0
 8004654:	d134      	bne.n	80046c0 <LL_RCC_GetUARTClockFreq+0x7c>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff fee4 	bl	8004424 <LL_RCC_GetUARTClockSource>
 800465c:	4603      	mov	r3, r0
 800465e:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8004662:	d015      	beq.n	8004690 <LL_RCC_GetUARTClockFreq+0x4c>
 8004664:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8004668:	d81b      	bhi.n	80046a2 <LL_RCC_GetUARTClockFreq+0x5e>
 800466a:	4a34      	ldr	r2, [pc, #208]	@ (800473c <LL_RCC_GetUARTClockFreq+0xf8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <LL_RCC_GetUARTClockFreq+0x34>
 8004670:	4a33      	ldr	r2, [pc, #204]	@ (8004740 <LL_RCC_GetUARTClockFreq+0xfc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <LL_RCC_GetUARTClockFreq+0x3c>
 8004676:	e014      	b.n	80046a2 <LL_RCC_GetUARTClockFreq+0x5e>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004678:	f000 f86a 	bl	8004750 <RCC_GetSystemClockFreq>
 800467c:	60f8      	str	r0, [r7, #12]
        break;
 800467e:	e01f      	b.n	80046c0 <LL_RCC_GetUARTClockFreq+0x7c>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004680:	f7ff fe5c 	bl	800433c <LL_RCC_HSI_IsReady>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d017      	beq.n	80046ba <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = HSI_VALUE;
 800468a:	4b2e      	ldr	r3, [pc, #184]	@ (8004744 <LL_RCC_GetUARTClockFreq+0x100>)
 800468c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800468e:	e014      	b.n	80046ba <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004690:	f7ff fe68 	bl	8004364 <LL_RCC_LSE_IsReady>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d011      	beq.n	80046be <LL_RCC_GetUARTClockFreq+0x7a>
        {
          uart_frequency = LSE_VALUE;
 800469a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800469e:	60fb      	str	r3, [r7, #12]
        }
        break;
 80046a0:	e00d      	b.n	80046be <LL_RCC_GetUARTClockFreq+0x7a>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80046a2:	f000 f855 	bl	8004750 <RCC_GetSystemClockFreq>
 80046a6:	4603      	mov	r3, r0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 f877 	bl	800479c <RCC_GetHCLKClockFreq>
 80046ae:	4603      	mov	r3, r0
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 f88b 	bl	80047cc <RCC_GetPCLK1ClockFreq>
 80046b6:	60f8      	str	r0, [r7, #12]
        break;
 80046b8:	e002      	b.n	80046c0 <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 80046ba:	bf00      	nop
 80046bc:	e000      	b.n	80046c0 <LL_RCC_GetUARTClockFreq+0x7c>
        break;
 80046be:	bf00      	nop
    }
  }

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046c6:	d134      	bne.n	8004732 <LL_RCC_GetUARTClockFreq+0xee>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff feab 	bl	8004424 <LL_RCC_GetUARTClockSource>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 80046d4:	d015      	beq.n	8004702 <LL_RCC_GetUARTClockFreq+0xbe>
 80046d6:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 80046da:	d81b      	bhi.n	8004714 <LL_RCC_GetUARTClockFreq+0xd0>
 80046dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004748 <LL_RCC_GetUARTClockFreq+0x104>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d003      	beq.n	80046ea <LL_RCC_GetUARTClockFreq+0xa6>
 80046e2:	4a1a      	ldr	r2, [pc, #104]	@ (800474c <LL_RCC_GetUARTClockFreq+0x108>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <LL_RCC_GetUARTClockFreq+0xae>
 80046e8:	e014      	b.n	8004714 <LL_RCC_GetUARTClockFreq+0xd0>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80046ea:	f000 f831 	bl	8004750 <RCC_GetSystemClockFreq>
 80046ee:	60f8      	str	r0, [r7, #12]
        break;
 80046f0:	e01f      	b.n	8004732 <LL_RCC_GetUARTClockFreq+0xee>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80046f2:	f7ff fe23 	bl	800433c <LL_RCC_HSI_IsReady>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d017      	beq.n	800472c <LL_RCC_GetUARTClockFreq+0xe8>
        {
          uart_frequency = HSI_VALUE;
 80046fc:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <LL_RCC_GetUARTClockFreq+0x100>)
 80046fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004700:	e014      	b.n	800472c <LL_RCC_GetUARTClockFreq+0xe8>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004702:	f7ff fe2f 	bl	8004364 <LL_RCC_LSE_IsReady>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d011      	beq.n	8004730 <LL_RCC_GetUARTClockFreq+0xec>
        {
          uart_frequency = LSE_VALUE;
 800470c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004710:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004712:	e00d      	b.n	8004730 <LL_RCC_GetUARTClockFreq+0xec>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004714:	f000 f81c 	bl	8004750 <RCC_GetSystemClockFreq>
 8004718:	4603      	mov	r3, r0
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f83e 	bl	800479c <RCC_GetHCLKClockFreq>
 8004720:	4603      	mov	r3, r0
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f852 	bl	80047cc <RCC_GetPCLK1ClockFreq>
 8004728:	60f8      	str	r0, [r7, #12]
        break;
 800472a:	e002      	b.n	8004732 <LL_RCC_GetUARTClockFreq+0xee>
        break;
 800472c:	bf00      	nop
 800472e:	e000      	b.n	8004732 <LL_RCC_GetUARTClockFreq+0xee>
        break;
 8004730:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8004732:	68fb      	ldr	r3, [r7, #12]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	00c00040 	.word	0x00c00040
 8004740:	00c00080 	.word	0x00c00080
 8004744:	00f42400 	.word	0x00f42400
 8004748:	03000100 	.word	0x03000100
 800474c:	03000200 	.word	0x03000200

08004750 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004756:	f7ff fe19 	bl	800438c <LL_RCC_GetSysClkSource>
 800475a:	4603      	mov	r3, r0
 800475c:	2b0c      	cmp	r3, #12
 800475e:	d00c      	beq.n	800477a <RCC_GetSystemClockFreq+0x2a>
 8004760:	2b0c      	cmp	r3, #12
 8004762:	d80e      	bhi.n	8004782 <RCC_GetSystemClockFreq+0x32>
 8004764:	2b04      	cmp	r3, #4
 8004766:	d002      	beq.n	800476e <RCC_GetSystemClockFreq+0x1e>
 8004768:	2b08      	cmp	r3, #8
 800476a:	d003      	beq.n	8004774 <RCC_GetSystemClockFreq+0x24>
 800476c:	e009      	b.n	8004782 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800476e:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <RCC_GetSystemClockFreq+0x44>)
 8004770:	607b      	str	r3, [r7, #4]
      break;
 8004772:	e009      	b.n	8004788 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004774:	4b08      	ldr	r3, [pc, #32]	@ (8004798 <RCC_GetSystemClockFreq+0x48>)
 8004776:	607b      	str	r3, [r7, #4]
      break;
 8004778:	e006      	b.n	8004788 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800477a:	f000 f853 	bl	8004824 <RCC_PLL_GetFreqDomain_SYS>
 800477e:	6078      	str	r0, [r7, #4]
      break;
 8004780:	e002      	b.n	8004788 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 8004782:	4b04      	ldr	r3, [pc, #16]	@ (8004794 <RCC_GetSystemClockFreq+0x44>)
 8004784:	607b      	str	r3, [r7, #4]
      break;
 8004786:	bf00      	nop
  }

  return frequency;
 8004788:	687b      	ldr	r3, [r7, #4]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	00f42400 	.word	0x00f42400
 8004798:	007a1200 	.word	0x007a1200

0800479c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80047a4:	f7ff fe00 	bl	80043a8 <LL_RCC_GetAHBPrescaler>
 80047a8:	4603      	mov	r3, r0
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	4a05      	ldr	r2, [pc, #20]	@ (80047c8 <RCC_GetHCLKClockFreq+0x2c>)
 80047b2:	5cd3      	ldrb	r3, [r2, r3]
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	0800cd24 	.word	0x0800cd24

080047cc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80047d4:	f7ff fdf6 	bl	80043c4 <LL_RCC_GetAPB1Prescaler>
 80047d8:	4603      	mov	r3, r0
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	4a05      	ldr	r2, [pc, #20]	@ (80047f4 <RCC_GetPCLK1ClockFreq+0x28>)
 80047de:	5cd3      	ldrb	r3, [r2, r3]
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	0800cd34 	.word	0x0800cd34

080047f8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004800:	f7ff fdee 	bl	80043e0 <LL_RCC_GetAPB2Prescaler>
 8004804:	4603      	mov	r3, r0
 8004806:	0adb      	lsrs	r3, r3, #11
 8004808:	4a05      	ldr	r2, [pc, #20]	@ (8004820 <RCC_GetPCLK2ClockFreq+0x28>)
 800480a:	5cd3      	ldrb	r3, [r2, r3]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	0800cd34 	.word	0x0800cd34

08004824 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800482a:	f7ff fe0f 	bl	800444c <LL_RCC_PLL_GetMainSource>
 800482e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d003      	beq.n	800483e <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b03      	cmp	r3, #3
 800483a:	d003      	beq.n	8004844 <RCC_PLL_GetFreqDomain_SYS+0x20>
 800483c:	e005      	b.n	800484a <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800483e:	4b11      	ldr	r3, [pc, #68]	@ (8004884 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004840:	607b      	str	r3, [r7, #4]
      break;
 8004842:	e005      	b.n	8004850 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004844:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8004846:	607b      	str	r3, [r7, #4]
      break;
 8004848:	e002      	b.n	8004850 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 800484a:	4b0e      	ldr	r3, [pc, #56]	@ (8004884 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800484c:	607b      	str	r3, [r7, #4]
      break;
 800484e:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004850:	f7ff fe0a 	bl	8004468 <LL_RCC_PLL_GetN>
 8004854:	4602      	mov	r2, r0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	fb03 f402 	mul.w	r4, r3, r2
 800485c:	f7ff fe20 	bl	80044a0 <LL_RCC_PLL_GetDivider>
 8004860:	4603      	mov	r3, r0
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	3301      	adds	r3, #1
 8004866:	fbb4 f4f3 	udiv	r4, r4, r3
 800486a:	f7ff fe0b 	bl	8004484 <LL_RCC_PLL_GetR>
 800486e:	4603      	mov	r3, r0
 8004870:	0e5b      	lsrs	r3, r3, #25
 8004872:	3301      	adds	r3, #1
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800487a:	4618      	mov	r0, r3
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	bd90      	pop	{r4, r7, pc}
 8004882:	bf00      	nop
 8004884:	00f42400 	.word	0x00f42400
 8004888:	007a1200 	.word	0x007a1200

0800488c <LL_USART_IsEnabled>:
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <LL_USART_IsEnabled+0x18>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <LL_USART_IsEnabled+0x1a>
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <LL_USART_SetPrescaler>:
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	f023 030f 	bic.w	r3, r3, #15
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	b292      	uxth	r2, r2
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <LL_USART_SetStopBitsLength>:
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	605a      	str	r2, [r3, #4]
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <LL_USART_SetHWFlowCtrl>:
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	609a      	str	r2, [r3, #8]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <LL_USART_SetBaudRate>:
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b0b      	cmp	r3, #11
 800493a:	d83c      	bhi.n	80049b6 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d039      	beq.n	80049b6 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004948:	d122      	bne.n	8004990 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	4b1c      	ldr	r3, [pc, #112]	@ (80049c4 <LL_USART_SetBaudRate+0x9c>)
 8004952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	005a      	lsls	r2, r3, #1
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	441a      	add	r2, r3
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	b29b      	uxth	r3, r3
 800496c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8004974:	4013      	ands	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	b29b      	uxth	r3, r3
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	60da      	str	r2, [r3, #12]
}
 800498e:	e012      	b.n	80049b6 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	4b0b      	ldr	r3, [pc, #44]	@ (80049c4 <LL_USART_SetBaudRate+0x9c>)
 8004998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	fbb2 f2f3 	udiv	r2, r2, r3
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	441a      	add	r2, r3
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	60da      	str	r2, [r3, #12]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	0800cd3c 	.word	0x0800cd3c

080049c8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff ff56 	bl	800488c <LL_USART_IsEnabled>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d165      	bne.n	8004ab2 <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b34      	ldr	r3, [pc, #208]	@ (8004abc <LL_USART_Init+0xf4>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	6891      	ldr	r1, [r2, #8]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	6912      	ldr	r2, [r2, #16]
 80049f6:	4311      	orrs	r1, r2
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	6952      	ldr	r2, [r2, #20]
 80049fc:	4311      	orrs	r1, r2
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	69d2      	ldr	r2, [r2, #28]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ff62 	bl	80048da <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff6f 	bl	8004900 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a26      	ldr	r2, [pc, #152]	@ (8004ac0 <LL_USART_Init+0xf8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d104      	bne.n	8004a34 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004a2a:	2003      	movs	r0, #3
 8004a2c:	f7ff fd46 	bl	80044bc <LL_RCC_GetUSARTClockFreq>
 8004a30:	60b8      	str	r0, [r7, #8]
 8004a32:	e023      	b.n	8004a7c <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a23      	ldr	r2, [pc, #140]	@ (8004ac4 <LL_USART_Init+0xfc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d104      	bne.n	8004a46 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004a3c:	200c      	movs	r0, #12
 8004a3e:	f7ff fd3d 	bl	80044bc <LL_RCC_GetUSARTClockFreq>
 8004a42:	60b8      	str	r0, [r7, #8]
 8004a44:	e01a      	b.n	8004a7c <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac8 <LL_USART_Init+0x100>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d104      	bne.n	8004a58 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8004a4e:	2030      	movs	r0, #48	@ 0x30
 8004a50:	f7ff fd34 	bl	80044bc <LL_RCC_GetUSARTClockFreq>
 8004a54:	60b8      	str	r0, [r7, #8]
 8004a56:	e011      	b.n	8004a7c <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004acc <LL_USART_Init+0x104>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d104      	bne.n	8004a6a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8004a60:	20c0      	movs	r0, #192	@ 0xc0
 8004a62:	f7ff fdef 	bl	8004644 <LL_RCC_GetUARTClockFreq>
 8004a66:	60b8      	str	r0, [r7, #8]
 8004a68:	e008      	b.n	8004a7c <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a18      	ldr	r2, [pc, #96]	@ (8004ad0 <LL_USART_Init+0x108>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d104      	bne.n	8004a7c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8004a72:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8004a76:	f7ff fde5 	bl	8004644 <LL_RCC_GetUARTClockFreq>
 8004a7a:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d011      	beq.n	8004aa6 <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00d      	beq.n	8004aa6 <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff ff41 	bl	8004928 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ff00 	bl	80048b2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	efff69f3 	.word	0xefff69f3
 8004ac0:	40013800 	.word	0x40013800
 8004ac4:	40004400 	.word	0x40004400
 8004ac8:	40004800 	.word	0x40004800
 8004acc:	40004c00 	.word	0x40004c00
 8004ad0:	40005000 	.word	0x40005000

08004ad4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ae4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004ae8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b0a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004b0e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	4013      	ands	r3, r2
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b0a7      	sub	sp, #156	@ 0x9c
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bca:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	78db      	ldrb	r3, [r3, #3]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d81f      	bhi.n	8004c16 <USB_ActivateEndpoint+0x72>
 8004bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <USB_ActivateEndpoint+0x38>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004c09 	.word	0x08004c09
 8004be4:	08004c1f 	.word	0x08004c1f
 8004be8:	08004bfb 	.word	0x08004bfb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004bec:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004bf0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bf4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004bf8:	e012      	b.n	8004c20 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004bfa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004bfe:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004c02:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004c06:	e00b      	b.n	8004c20 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c08:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004c0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c10:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8004c14:	e004      	b.n	8004c20 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8004c1c:	e000      	b.n	8004c20 <USB_ActivateEndpoint+0x7c>
      break;
 8004c1e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	441a      	add	r2, r3
 8004c2a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	b21b      	sxth	r3, r3
 8004c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5a:	b21a      	sxth	r2, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	b21b      	sxth	r3, r3
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b21b      	sxth	r3, r3
 8004c66:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	441a      	add	r2, r3
 8004c74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	7b1b      	ldrb	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f040 8180 	bne.w	8004f96 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	785b      	ldrb	r3, [r3, #1]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8084 	beq.w	8004da8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	61bb      	str	r3, [r7, #24]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	00da      	lsls	r2, r3, #3
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	88db      	ldrh	r3, [r3, #6]
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	827b      	strh	r3, [r7, #18]
 8004ce2:	8a7b      	ldrh	r3, [r7, #18]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01b      	beq.n	8004d24 <USB_ActivateEndpoint+0x180>
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	823b      	strh	r3, [r7, #16]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	8a3b      	ldrh	r3, [r7, #16]
 8004d10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	78db      	ldrb	r3, [r3, #3]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d020      	beq.n	8004d6e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d42:	81bb      	strh	r3, [r7, #12]
 8004d44:	89bb      	ldrh	r3, [r7, #12]
 8004d46:	f083 0320 	eor.w	r3, r3, #32
 8004d4a:	81bb      	strh	r3, [r7, #12]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	441a      	add	r2, r3
 8004d56:	89bb      	ldrh	r3, [r7, #12]
 8004d58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	8013      	strh	r3, [r2, #0]
 8004d6c:	e3f9      	b.n	8005562 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d84:	81fb      	strh	r3, [r7, #14]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	89fb      	ldrh	r3, [r7, #14]
 8004d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	8013      	strh	r3, [r2, #0]
 8004da6:	e3dc      	b.n	8005562 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db8:	4413      	add	r3, r2
 8004dba:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	00da      	lsls	r2, r3, #3
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	88db      	ldrh	r3, [r3, #6]
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dda:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dec:	4413      	add	r3, r2
 8004dee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	00da      	lsls	r2, r3, #3
 8004df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df8:	4413      	add	r3, r2
 8004dfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	801a      	strh	r2, [r3, #0]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <USB_ActivateEndpoint+0x28a>
 8004e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	e041      	b.n	8004eb2 <USB_ActivateEndpoint+0x30e>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e34:	d81c      	bhi.n	8004e70 <USB_ActivateEndpoint+0x2cc>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d004      	beq.n	8004e56 <USB_ActivateEndpoint+0x2b2>
 8004e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e50:	3301      	adds	r3, #1
 8004e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	029b      	lsls	r3, r3, #10
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	801a      	strh	r2, [r3, #0]
 8004e6e:	e020      	b.n	8004eb2 <USB_ActivateEndpoint+0x30e>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d104      	bne.n	8004e90 <USB_ActivateEndpoint+0x2ec>
 8004e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	029b      	lsls	r3, r3, #10
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004ec0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01b      	beq.n	8004f02 <USB_ActivateEndpoint+0x35e>
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee0:	843b      	strh	r3, [r7, #32]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	8c3b      	ldrh	r3, [r7, #32]
 8004eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d124      	bne.n	8004f54 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f20:	83bb      	strh	r3, [r7, #28]
 8004f22:	8bbb      	ldrh	r3, [r7, #28]
 8004f24:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004f28:	83bb      	strh	r3, [r7, #28]
 8004f2a:	8bbb      	ldrh	r3, [r7, #28]
 8004f2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f30:	83bb      	strh	r3, [r7, #28]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	8bbb      	ldrh	r3, [r7, #28]
 8004f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	8013      	strh	r3, [r2, #0]
 8004f52:	e306      	b.n	8005562 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6a:	83fb      	strh	r3, [r7, #30]
 8004f6c:	8bfb      	ldrh	r3, [r7, #30]
 8004f6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f72:	83fb      	strh	r3, [r7, #30]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	441a      	add	r2, r3
 8004f7e:	8bfb      	ldrh	r3, [r7, #30]
 8004f80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	8013      	strh	r3, [r2, #0]
 8004f94:	e2e5      	b.n	8005562 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	78db      	ldrb	r3, [r3, #3]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d11e      	bne.n	8004fdc <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	441a      	add	r2, r3
 8004fc2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004fc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	8013      	strh	r3, [r2, #0]
 8004fda:	e01d      	b.n	8005018 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	441a      	add	r2, r3
 8005000:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8005004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800500c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005014:	b29b      	uxth	r3, r3
 8005016:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005022:	b29b      	uxth	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005028:	4413      	add	r3, r2
 800502a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	00da      	lsls	r2, r3, #3
 8005032:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005034:	4413      	add	r3, r2
 8005036:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800503a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	891b      	ldrh	r3, [r3, #8]
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	b29b      	uxth	r3, r3
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800504a:	801a      	strh	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005056:	b29b      	uxth	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800505c:	4413      	add	r3, r2
 800505e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	00da      	lsls	r2, r3, #3
 8005066:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005068:	4413      	add	r3, r2
 800506a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800506e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	895b      	ldrh	r3, [r3, #10]
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	b29b      	uxth	r3, r3
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800507e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	785b      	ldrb	r3, [r3, #1]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f040 81af 	bne.w	80053e8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800509a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800509e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01d      	beq.n	80050e2 <USB_ActivateEndpoint+0x53e>
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050bc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80050ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050de:	b29b      	uxth	r3, r3
 80050e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80050f2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80050f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01d      	beq.n	800513a <USB_ActivateEndpoint+0x596>
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005114:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8005126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800512a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800512e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005132:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	785b      	ldrb	r3, [r3, #1]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d16b      	bne.n	800521a <USB_ActivateEndpoint+0x676>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800514c:	b29b      	uxth	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005152:	4413      	add	r3, r2
 8005154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	00da      	lsls	r2, r3, #3
 800515c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800515e:	4413      	add	r3, r2
 8005160:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005164:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005170:	b29a      	uxth	r2, r3
 8005172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005174:	801a      	strh	r2, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10a      	bne.n	8005194 <USB_ActivateEndpoint+0x5f0>
 800517e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800518c:	b29a      	uxth	r2, r3
 800518e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	e05d      	b.n	8005250 <USB_ActivateEndpoint+0x6ac>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	2b3e      	cmp	r3, #62	@ 0x3e
 800519a:	d81c      	bhi.n	80051d6 <USB_ActivateEndpoint+0x632>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <USB_ActivateEndpoint+0x618>
 80051b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051b6:	3301      	adds	r3, #1
 80051b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	029b      	lsls	r3, r3, #10
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	4313      	orrs	r3, r2
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	e03c      	b.n	8005250 <USB_ActivateEndpoint+0x6ac>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f003 031f 	and.w	r3, r3, #31
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d104      	bne.n	80051f6 <USB_ActivateEndpoint+0x652>
 80051ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051f0:	3b01      	subs	r3, #1
 80051f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005200:	b29b      	uxth	r3, r3
 8005202:	029b      	lsls	r3, r3, #10
 8005204:	b29b      	uxth	r3, r3
 8005206:	4313      	orrs	r3, r2
 8005208:	b29b      	uxth	r3, r3
 800520a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005212:	b29a      	uxth	r2, r3
 8005214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005216:	801a      	strh	r2, [r3, #0]
 8005218:	e01a      	b.n	8005250 <USB_ActivateEndpoint+0x6ac>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d116      	bne.n	8005250 <USB_ActivateEndpoint+0x6ac>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	657b      	str	r3, [r7, #84]	@ 0x54
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800522c:	b29b      	uxth	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005232:	4413      	add	r3, r2
 8005234:	657b      	str	r3, [r7, #84]	@ 0x54
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	00da      	lsls	r2, r3, #3
 800523c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800523e:	4413      	add	r3, r2
 8005240:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005244:	653b      	str	r3, [r7, #80]	@ 0x50
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	b29a      	uxth	r2, r3
 800524c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	647b      	str	r3, [r7, #68]	@ 0x44
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d16b      	bne.n	8005334 <USB_ActivateEndpoint+0x790>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005266:	b29b      	uxth	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526c:	4413      	add	r3, r2
 800526e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	00da      	lsls	r2, r3, #3
 8005276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005278:	4413      	add	r3, r2
 800527a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800527e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800528a:	b29a      	uxth	r2, r3
 800528c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <USB_ActivateEndpoint+0x70a>
 8005298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	e05b      	b.n	8005366 <USB_ActivateEndpoint+0x7c2>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80052b4:	d81c      	bhi.n	80052f0 <USB_ActivateEndpoint+0x74c>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d004      	beq.n	80052d6 <USB_ActivateEndpoint+0x732>
 80052cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052d0:	3301      	adds	r3, #1
 80052d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29a      	uxth	r2, r3
 80052dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	029b      	lsls	r3, r3, #10
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	4313      	orrs	r3, r2
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	e03a      	b.n	8005366 <USB_ActivateEndpoint+0x7c2>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	2b00      	cmp	r3, #0
 8005304:	d104      	bne.n	8005310 <USB_ActivateEndpoint+0x76c>
 8005306:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800530a:	3b01      	subs	r3, #1
 800530c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29a      	uxth	r2, r3
 8005316:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800531a:	b29b      	uxth	r3, r3
 800531c:	029b      	lsls	r3, r3, #10
 800531e:	b29b      	uxth	r3, r3
 8005320:	4313      	orrs	r3, r2
 8005322:	b29b      	uxth	r3, r3
 8005324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532c:	b29a      	uxth	r2, r3
 800532e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e018      	b.n	8005366 <USB_ActivateEndpoint+0x7c2>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d114      	bne.n	8005366 <USB_ActivateEndpoint+0x7c2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005342:	b29b      	uxth	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005348:	4413      	add	r3, r2
 800534a:	647b      	str	r3, [r7, #68]	@ 0x44
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	00da      	lsls	r2, r3, #3
 8005352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005354:	4413      	add	r3, r2
 8005356:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800535a:	643b      	str	r3, [r7, #64]	@ 0x40
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	b29a      	uxth	r2, r3
 8005362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005364:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800537e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005380:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005384:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005386:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005388:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800538c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	441a      	add	r2, r3
 8005398:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800539a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800539e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053c4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	441a      	add	r2, r3
 80053d0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80053d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	8013      	strh	r3, [r2, #0]
 80053e6:	e0bc      	b.n	8005562 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80053f8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80053fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01d      	beq.n	8005440 <USB_ActivateEndpoint+0x89c>
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29b      	uxth	r3, r3
 8005412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800541a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	441a      	add	r2, r3
 8005428:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800542c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005430:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005434:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800543c:	b29b      	uxth	r3, r3
 800543e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8005450:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8005454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01d      	beq.n	8005498 <USB_ActivateEndpoint+0x8f4>
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800546e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005472:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8005484:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005488:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800548c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005490:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005494:	b29b      	uxth	r3, r3
 8005496:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	78db      	ldrb	r3, [r3, #3]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d024      	beq.n	80054ea <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054b6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80054ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80054be:	f083 0320 	eor.w	r3, r3, #32
 80054c2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80054d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	8013      	strh	r3, [r2, #0]
 80054e8:	e01d      	b.n	8005526 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005500:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800551a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800551e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005522:	b29b      	uxth	r3, r3
 8005524:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	441a      	add	r2, r3
 800554a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800554e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005552:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005556:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800555a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800555e:	b29b      	uxth	r3, r3
 8005560:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005562:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8005566:	4618      	mov	r0, r3
 8005568:	379c      	adds	r7, #156	@ 0x9c
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop

08005574 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005574:	b480      	push	{r7}
 8005576:	b08d      	sub	sp, #52	@ 0x34
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	7b1b      	ldrb	r3, [r3, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 808e 	bne.w	80056a4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	785b      	ldrb	r3, [r3, #1]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d044      	beq.n	800561a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	81bb      	strh	r3, [r7, #12]
 800559e:	89bb      	ldrh	r3, [r7, #12]
 80055a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01b      	beq.n	80055e0 <USB_DeactivateEndpoint+0x6c>
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055be:	817b      	strh	r3, [r7, #10]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	441a      	add	r2, r3
 80055ca:	897b      	ldrh	r3, [r7, #10]
 80055cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055dc:	b29b      	uxth	r3, r3
 80055de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055f6:	813b      	strh	r3, [r7, #8]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	441a      	add	r2, r3
 8005602:	893b      	ldrh	r3, [r7, #8]
 8005604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005608:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800560c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005614:	b29b      	uxth	r3, r3
 8005616:	8013      	strh	r3, [r2, #0]
 8005618:	e192      	b.n	8005940 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	827b      	strh	r3, [r7, #18]
 8005628:	8a7b      	ldrh	r3, [r7, #18]
 800562a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01b      	beq.n	800566a <USB_DeactivateEndpoint+0xf6>
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29b      	uxth	r3, r3
 8005640:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005648:	823b      	strh	r3, [r7, #16]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	441a      	add	r2, r3
 8005654:	8a3b      	ldrh	r3, [r7, #16]
 8005656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800565a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800565e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005666:	b29b      	uxth	r3, r3
 8005668:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800567c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005680:	81fb      	strh	r3, [r7, #14]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	441a      	add	r2, r3
 800568c:	89fb      	ldrh	r3, [r7, #14]
 800568e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800569a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569e:	b29b      	uxth	r3, r3
 80056a0:	8013      	strh	r3, [r2, #0]
 80056a2:	e14d      	b.n	8005940 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f040 80a5 	bne.w	80057f8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	843b      	strh	r3, [r7, #32]
 80056bc:	8c3b      	ldrh	r3, [r7, #32]
 80056be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d01b      	beq.n	80056fe <USB_DeactivateEndpoint+0x18a>
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056dc:	83fb      	strh	r3, [r7, #30]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	441a      	add	r2, r3
 80056e8:	8bfb      	ldrh	r3, [r7, #30]
 80056ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	83bb      	strh	r3, [r7, #28]
 800570c:	8bbb      	ldrh	r3, [r7, #28]
 800570e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01b      	beq.n	800574e <USB_DeactivateEndpoint+0x1da>
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800572c:	837b      	strh	r3, [r7, #26]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	441a      	add	r2, r3
 8005738:	8b7b      	ldrh	r3, [r7, #26]
 800573a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800573e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005746:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800574a:	b29b      	uxth	r3, r3
 800574c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29b      	uxth	r3, r3
 800575c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005764:	833b      	strh	r3, [r7, #24]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	8b3b      	ldrh	r3, [r7, #24]
 8005772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800577a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800577e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005782:	b29b      	uxth	r3, r3
 8005784:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579c:	82fb      	strh	r3, [r7, #22]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	441a      	add	r2, r3
 80057a8:	8afb      	ldrh	r3, [r7, #22]
 80057aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d4:	82bb      	strh	r3, [r7, #20]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	441a      	add	r2, r3
 80057e0:	8abb      	ldrh	r3, [r7, #20]
 80057e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	8013      	strh	r3, [r2, #0]
 80057f6:	e0a3      	b.n	8005940 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005806:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01b      	beq.n	8005848 <USB_DeactivateEndpoint+0x2d4>
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005826:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800583c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005856:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01b      	beq.n	8005898 <USB_DeactivateEndpoint+0x324>
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005876:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	441a      	add	r2, r3
 8005882:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005884:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005888:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800588c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005890:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005894:	b29b      	uxth	r3, r3
 8005896:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	441a      	add	r2, r3
 80058ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80058bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	441a      	add	r2, r3
 80058f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005904:	b29b      	uxth	r3, r3
 8005906:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800591a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	441a      	add	r2, r3
 800592a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800592c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005930:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800593c:	b29b      	uxth	r3, r3
 800593e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3734      	adds	r7, #52	@ 0x34
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b0ac      	sub	sp, #176	@ 0xb0
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	2b01      	cmp	r3, #1
 800595e:	f040 84ca 	bne.w	80062f6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	429a      	cmp	r2, r3
 800596c:	d904      	bls.n	8005978 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005976:	e003      	b.n	8005980 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	7b1b      	ldrb	r3, [r3, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d122      	bne.n	80059ce <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	6959      	ldr	r1, [r3, #20]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	88da      	ldrh	r2, [r3, #6]
 8005990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005994:	b29b      	uxth	r3, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 febd 	bl	8006716 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	613b      	str	r3, [r7, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4413      	add	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	00da      	lsls	r2, r3, #3
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	4413      	add	r3, r2
 80059ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	f000 bc6f 	b.w	80062ac <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	78db      	ldrb	r3, [r3, #3]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	f040 831e 	bne.w	8006014 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	6a1a      	ldr	r2, [r3, #32]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	f240 82cf 	bls.w	8005f84 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005a0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a16:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6a1a      	ldr	r2, [r3, #32]
 8005a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a2a:	1ad2      	subs	r2, r2, r3
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 814f 	beq.w	8005ce6 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d16b      	bne.n	8005b2c <USB_EPStartXfer+0x1de>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a64:	4413      	add	r3, r2
 8005a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	00da      	lsls	r2, r3, #3
 8005a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a70:	4413      	add	r3, r2
 8005a72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	801a      	strh	r2, [r3, #0]
 8005a88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <USB_EPStartXfer+0x158>
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	e05b      	b.n	8005b5e <USB_EPStartXfer+0x210>
 8005aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005aaa:	2b3e      	cmp	r3, #62	@ 0x3e
 8005aac:	d81c      	bhi.n	8005ae8 <USB_EPStartXfer+0x19a>
 8005aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d004      	beq.n	8005ace <USB_EPStartXfer+0x180>
 8005ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	029b      	lsls	r3, r3, #10
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	e03a      	b.n	8005b5e <USB_EPStartXfer+0x210>
 8005ae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <USB_EPStartXfer+0x1ba>
 8005afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b02:	3b01      	subs	r3, #1
 8005b04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	029b      	lsls	r3, r3, #10
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	801a      	strh	r2, [r3, #0]
 8005b2a:	e018      	b.n	8005b5e <USB_EPStartXfer+0x210>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d114      	bne.n	8005b5e <USB_EPStartXfer+0x210>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b40:	4413      	add	r3, r2
 8005b42:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	00da      	lsls	r2, r3, #3
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	895b      	ldrh	r3, [r3, #10]
 8005b62:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6959      	ldr	r1, [r3, #20]
 8005b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fdce 	bl	8006716 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	695a      	ldr	r2, [r3, #20]
 8005b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b82:	441a      	add	r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	6a1a      	ldr	r2, [r3, #32]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d907      	bls.n	8005ba4 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	6a1a      	ldr	r2, [r3, #32]
 8005b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b9c:	1ad2      	subs	r2, r2, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	621a      	str	r2, [r3, #32]
 8005ba2:	e006      	b.n	8005bb2 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	785b      	ldrb	r3, [r3, #1]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d16b      	bne.n	8005c92 <USB_EPStartXfer+0x344>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	61bb      	str	r3, [r7, #24]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	4413      	add	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	00da      	lsls	r2, r3, #3
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <USB_EPStartXfer+0x2be>
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	801a      	strh	r2, [r3, #0]
 8005c0a:	e05d      	b.n	8005cc8 <USB_EPStartXfer+0x37a>
 8005c0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c10:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c12:	d81c      	bhi.n	8005c4e <USB_EPStartXfer+0x300>
 8005c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c18:	085b      	lsrs	r3, r3, #1
 8005c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d004      	beq.n	8005c34 <USB_EPStartXfer+0x2e6>
 8005c2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c2e:	3301      	adds	r3, #1
 8005c30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	4313      	orrs	r3, r2
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	e03c      	b.n	8005cc8 <USB_EPStartXfer+0x37a>
 8005c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <USB_EPStartXfer+0x320>
 8005c64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	029b      	lsls	r3, r3, #10
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	e01a      	b.n	8005cc8 <USB_EPStartXfer+0x37a>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d116      	bne.n	8005cc8 <USB_EPStartXfer+0x37a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	623b      	str	r3, [r7, #32]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	4413      	add	r3, r2
 8005cac:	623b      	str	r3, [r7, #32]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	00da      	lsls	r2, r3, #3
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	891b      	ldrh	r3, [r3, #8]
 8005ccc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	6959      	ldr	r1, [r3, #20]
 8005cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fd19 	bl	8006716 <USB_WritePMA>
 8005ce4:	e2e2      	b.n	80062ac <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d16b      	bne.n	8005dc6 <USB_EPStartXfer+0x478>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cfe:	4413      	add	r3, r2
 8005d00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	00da      	lsls	r2, r3, #3
 8005d08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10a      	bne.n	8005d40 <USB_EPStartXfer+0x3f2>
 8005d2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	e05d      	b.n	8005dfc <USB_EPStartXfer+0x4ae>
 8005d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d44:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d46:	d81c      	bhi.n	8005d82 <USB_EPStartXfer+0x434>
 8005d48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d4c:	085b      	lsrs	r3, r3, #1
 8005d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <USB_EPStartXfer+0x41a>
 8005d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d62:	3301      	adds	r3, #1
 8005d64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	029b      	lsls	r3, r3, #10
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	e03c      	b.n	8005dfc <USB_EPStartXfer+0x4ae>
 8005d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d104      	bne.n	8005da2 <USB_EPStartXfer+0x454>
 8005d98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005da2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	029b      	lsls	r3, r3, #10
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4313      	orrs	r3, r2
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e01a      	b.n	8005dfc <USB_EPStartXfer+0x4ae>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d116      	bne.n	8005dfc <USB_EPStartXfer+0x4ae>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dde:	4413      	add	r3, r2
 8005de0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	00da      	lsls	r2, r3, #3
 8005de8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dea:	4413      	add	r3, r2
 8005dec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dfa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	891b      	ldrh	r3, [r3, #8]
 8005e00:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6959      	ldr	r1, [r3, #20]
 8005e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fc7f 	bl	8006716 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e20:	441a      	add	r2, r3
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6a1a      	ldr	r2, [r3, #32]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d907      	bls.n	8005e42 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6a1a      	ldr	r2, [r3, #32]
 8005e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e3a:	1ad2      	subs	r2, r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	621a      	str	r2, [r3, #32]
 8005e40:	e006      	b.n	8005e50 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d16b      	bne.n	8005f34 <USB_EPStartXfer+0x5e6>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6c:	4413      	add	r3, r2
 8005e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	00da      	lsls	r2, r3, #3
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	4413      	add	r3, r2
 8005e7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <USB_EPStartXfer+0x560>
 8005e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eaa:	801a      	strh	r2, [r3, #0]
 8005eac:	e05b      	b.n	8005f66 <USB_EPStartXfer+0x618>
 8005eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005eb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005eb4:	d81c      	bhi.n	8005ef0 <USB_EPStartXfer+0x5a2>
 8005eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d004      	beq.n	8005ed6 <USB_EPStartXfer+0x588>
 8005ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	029b      	lsls	r3, r3, #10
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eec:	801a      	strh	r2, [r3, #0]
 8005eee:	e03a      	b.n	8005f66 <USB_EPStartXfer+0x618>
 8005ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d104      	bne.n	8005f10 <USB_EPStartXfer+0x5c2>
 8005f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	029b      	lsls	r3, r3, #10
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	4313      	orrs	r3, r2
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	e018      	b.n	8005f66 <USB_EPStartXfer+0x618>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d114      	bne.n	8005f66 <USB_EPStartXfer+0x618>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f48:	4413      	add	r3, r2
 8005f4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	00da      	lsls	r2, r3, #3
 8005f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	895b      	ldrh	r3, [r3, #10]
 8005f6a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6959      	ldr	r1, [r3, #20]
 8005f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fbca 	bl	8006716 <USB_WritePMA>
 8005f82:	e193      	b.n	80062ac <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	441a      	add	r2, r3
 8005fb0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005fb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fd8:	4413      	add	r3, r2
 8005fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	00da      	lsls	r2, r3, #3
 8005fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005fea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ff4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	891b      	ldrh	r3, [r3, #8]
 8005ffa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6959      	ldr	r1, [r3, #20]
 8006002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006006:	b29b      	uxth	r3, r3
 8006008:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fb82 	bl	8006716 <USB_WritePMA>
 8006012:	e14b      	b.n	80062ac <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6a1a      	ldr	r2, [r3, #32]
 8006018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800601c:	1ad2      	subs	r2, r2, r3
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 809a 	beq.w	800616e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	673b      	str	r3, [r7, #112]	@ 0x70
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	785b      	ldrb	r3, [r3, #1]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d16b      	bne.n	800611e <USB_EPStartXfer+0x7d0>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	66bb      	str	r3, [r7, #104]	@ 0x68
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006050:	b29b      	uxth	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006056:	4413      	add	r3, r2
 8006058:	66bb      	str	r3, [r7, #104]	@ 0x68
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	00da      	lsls	r2, r3, #3
 8006060:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006062:	4413      	add	r3, r2
 8006064:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006068:	667b      	str	r3, [r7, #100]	@ 0x64
 800606a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006074:	b29a      	uxth	r2, r3
 8006076:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <USB_EPStartXfer+0x74a>
 8006082:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006090:	b29a      	uxth	r2, r3
 8006092:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	e05b      	b.n	8006150 <USB_EPStartXfer+0x802>
 8006098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800609c:	2b3e      	cmp	r3, #62	@ 0x3e
 800609e:	d81c      	bhi.n	80060da <USB_EPStartXfer+0x78c>
 80060a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <USB_EPStartXfer+0x772>
 80060b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060ba:	3301      	adds	r3, #1
 80060bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	029b      	lsls	r3, r3, #10
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	4313      	orrs	r3, r2
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	e03a      	b.n	8006150 <USB_EPStartXfer+0x802>
 80060da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060e8:	f003 031f 	and.w	r3, r3, #31
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d104      	bne.n	80060fa <USB_EPStartXfer+0x7ac>
 80060f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060f4:	3b01      	subs	r3, #1
 80060f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006104:	b29b      	uxth	r3, r3
 8006106:	029b      	lsls	r3, r3, #10
 8006108:	b29b      	uxth	r3, r3
 800610a:	4313      	orrs	r3, r2
 800610c:	b29b      	uxth	r3, r3
 800610e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006116:	b29a      	uxth	r2, r3
 8006118:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800611a:	801a      	strh	r2, [r3, #0]
 800611c:	e018      	b.n	8006150 <USB_EPStartXfer+0x802>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d114      	bne.n	8006150 <USB_EPStartXfer+0x802>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612c:	b29b      	uxth	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006132:	4413      	add	r3, r2
 8006134:	673b      	str	r3, [r7, #112]	@ 0x70
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	00da      	lsls	r2, r3, #3
 800613c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800613e:	4413      	add	r3, r2
 8006140:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006144:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800614a:	b29a      	uxth	r2, r3
 800614c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800614e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	895b      	ldrh	r3, [r3, #10]
 8006154:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	6959      	ldr	r1, [r3, #20]
 800615c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006160:	b29b      	uxth	r3, r3
 8006162:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fad5 	bl	8006716 <USB_WritePMA>
 800616c:	e09e      	b.n	80062ac <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	785b      	ldrb	r3, [r3, #1]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d16b      	bne.n	800624e <USB_EPStartXfer+0x900>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006180:	b29b      	uxth	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006186:	4413      	add	r3, r2
 8006188:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	00da      	lsls	r2, r3, #3
 8006190:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006192:	4413      	add	r3, r2
 8006194:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006198:	67bb      	str	r3, [r7, #120]	@ 0x78
 800619a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061a8:	801a      	strh	r2, [r3, #0]
 80061aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <USB_EPStartXfer+0x87a>
 80061b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061c4:	801a      	strh	r2, [r3, #0]
 80061c6:	e063      	b.n	8006290 <USB_EPStartXfer+0x942>
 80061c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80061ce:	d81c      	bhi.n	800620a <USB_EPStartXfer+0x8bc>
 80061d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061d4:	085b      	lsrs	r3, r3, #1
 80061d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d004      	beq.n	80061f0 <USB_EPStartXfer+0x8a2>
 80061e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80061ea:	3301      	adds	r3, #1
 80061ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	029b      	lsls	r3, r3, #10
 80061fe:	b29b      	uxth	r3, r3
 8006200:	4313      	orrs	r3, r2
 8006202:	b29a      	uxth	r2, r3
 8006204:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	e042      	b.n	8006290 <USB_EPStartXfer+0x942>
 800620a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006218:	f003 031f 	and.w	r3, r3, #31
 800621c:	2b00      	cmp	r3, #0
 800621e:	d104      	bne.n	800622a <USB_EPStartXfer+0x8dc>
 8006220:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006224:	3b01      	subs	r3, #1
 8006226:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800622a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29a      	uxth	r2, r3
 8006230:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006234:	b29b      	uxth	r3, r3
 8006236:	029b      	lsls	r3, r3, #10
 8006238:	b29b      	uxth	r3, r3
 800623a:	4313      	orrs	r3, r2
 800623c:	b29b      	uxth	r3, r3
 800623e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006246:	b29a      	uxth	r2, r3
 8006248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	e020      	b.n	8006290 <USB_EPStartXfer+0x942>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d11c      	bne.n	8006290 <USB_EPStartXfer+0x942>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006262:	b29b      	uxth	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800626a:	4413      	add	r3, r2
 800626c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	00da      	lsls	r2, r3, #3
 8006276:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800627a:	4413      	add	r3, r2
 800627c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006280:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006288:	b29a      	uxth	r2, r3
 800628a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800628e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	891b      	ldrh	r3, [r3, #8]
 8006294:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	6959      	ldr	r1, [r3, #20]
 800629c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa35 	bl	8006716 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062c2:	817b      	strh	r3, [r7, #10]
 80062c4:	897b      	ldrh	r3, [r7, #10]
 80062c6:	f083 0310 	eor.w	r3, r3, #16
 80062ca:	817b      	strh	r3, [r7, #10]
 80062cc:	897b      	ldrh	r3, [r7, #10]
 80062ce:	f083 0320 	eor.w	r3, r3, #32
 80062d2:	817b      	strh	r3, [r7, #10]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	441a      	add	r2, r3
 80062de:	897b      	ldrh	r3, [r7, #10]
 80062e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	8013      	strh	r3, [r2, #0]
 80062f4:	e0d5      	b.n	80064a2 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	7b1b      	ldrb	r3, [r3, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d156      	bne.n	80063ac <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d122      	bne.n	800634c <USB_EPStartXfer+0x9fe>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	78db      	ldrb	r3, [r3, #3]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d11e      	bne.n	800634c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006320:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006324:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	441a      	add	r2, r3
 8006332:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006336:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800633a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800633e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006346:	b29b      	uxth	r3, r3
 8006348:	8013      	strh	r3, [r2, #0]
 800634a:	e01d      	b.n	8006388 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800635e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006362:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	441a      	add	r2, r3
 8006370:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800637c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	429a      	cmp	r2, r3
 8006392:	d907      	bls.n	80063a4 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	699a      	ldr	r2, [r3, #24]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	1ad2      	subs	r2, r2, r3
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	619a      	str	r2, [r3, #24]
 80063a2:	e054      	b.n	800644e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2200      	movs	r2, #0
 80063a8:	619a      	str	r2, [r3, #24]
 80063aa:	e050      	b.n	800644e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	78db      	ldrb	r3, [r3, #3]
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d142      	bne.n	800643a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d048      	beq.n	800644e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063cc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80063d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <USB_EPStartXfer+0xa96>
 80063d8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80063dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063e4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80063e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d12e      	bne.n	800644e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063f0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80063f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d128      	bne.n	800644e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800640e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006412:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	441a      	add	r2, r3
 8006420:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8006424:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006428:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800642c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006430:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006434:	b29b      	uxth	r3, r3
 8006436:	8013      	strh	r3, [r2, #0]
 8006438:	e009      	b.n	800644e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	78db      	ldrb	r3, [r3, #3]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d103      	bne.n	800644a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2200      	movs	r2, #0
 8006446:	619a      	str	r2, [r3, #24]
 8006448:	e001      	b.n	800644e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e02a      	b.n	80064a4 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006464:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006468:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800646c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006470:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006474:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006478:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800647c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	441a      	add	r2, r3
 800648a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800649a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	37b0      	adds	r7, #176	@ 0xb0
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d020      	beq.n	8006500 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064d4:	81bb      	strh	r3, [r7, #12]
 80064d6:	89bb      	ldrh	r3, [r7, #12]
 80064d8:	f083 0310 	eor.w	r3, r3, #16
 80064dc:	81bb      	strh	r3, [r7, #12]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	441a      	add	r2, r3
 80064e8:	89bb      	ldrh	r3, [r7, #12]
 80064ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	8013      	strh	r3, [r2, #0]
 80064fe:	e01f      	b.n	8006540 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006516:	81fb      	strh	r3, [r7, #14]
 8006518:	89fb      	ldrh	r3, [r7, #14]
 800651a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800651e:	81fb      	strh	r3, [r7, #14]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	441a      	add	r2, r3
 800652a:	89fb      	ldrh	r3, [r7, #14]
 800652c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800653c:	b29b      	uxth	r3, r3
 800653e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800654e:	b480      	push	{r7}
 8006550:	b087      	sub	sp, #28
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d04c      	beq.n	80065fa <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	823b      	strh	r3, [r7, #16]
 800656e:	8a3b      	ldrh	r3, [r7, #16]
 8006570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01b      	beq.n	80065b0 <USB_EPClearStall+0x62>
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	b29b      	uxth	r3, r3
 8006586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800658a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658e:	81fb      	strh	r3, [r7, #14]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	441a      	add	r2, r3
 800659a:	89fb      	ldrh	r3, [r7, #14]
 800659c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	78db      	ldrb	r3, [r3, #3]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d06c      	beq.n	8006692 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ce:	81bb      	strh	r3, [r7, #12]
 80065d0:	89bb      	ldrh	r3, [r7, #12]
 80065d2:	f083 0320 	eor.w	r3, r3, #32
 80065d6:	81bb      	strh	r3, [r7, #12]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	89bb      	ldrh	r3, [r7, #12]
 80065e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	8013      	strh	r3, [r2, #0]
 80065f8:	e04b      	b.n	8006692 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	82fb      	strh	r3, [r7, #22]
 8006608:	8afb      	ldrh	r3, [r7, #22]
 800660a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01b      	beq.n	800664a <USB_EPClearStall+0xfc>
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006628:	82bb      	strh	r3, [r7, #20]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	441a      	add	r2, r3
 8006634:	8abb      	ldrh	r3, [r7, #20]
 8006636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800663a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800663e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006646:	b29b      	uxth	r3, r3
 8006648:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	b29b      	uxth	r3, r3
 8006658:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800665c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006660:	827b      	strh	r3, [r7, #18]
 8006662:	8a7b      	ldrh	r3, [r7, #18]
 8006664:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006668:	827b      	strh	r3, [r7, #18]
 800666a:	8a7b      	ldrh	r3, [r7, #18]
 800666c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006670:	827b      	strh	r3, [r7, #18]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	441a      	add	r2, r3
 800667c:	8a7b      	ldrh	r3, [r7, #18]
 800667e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800668a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668e:	b29b      	uxth	r3, r3
 8006690:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d103      	bne.n	80066ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2280      	movs	r2, #128	@ 0x80
 80066b6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006704:	b29b      	uxth	r3, r3
 8006706:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006708:	68fb      	ldr	r3, [r7, #12]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006716:	b480      	push	{r7}
 8006718:	b08b      	sub	sp, #44	@ 0x2c
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	4611      	mov	r1, r2
 8006722:	461a      	mov	r2, r3
 8006724:	460b      	mov	r3, r1
 8006726:	80fb      	strh	r3, [r7, #6]
 8006728:	4613      	mov	r3, r2
 800672a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800672c:	88bb      	ldrh	r3, [r7, #4]
 800672e:	3301      	adds	r3, #1
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800673c:	88fa      	ldrh	r2, [r7, #6]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006746:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	627b      	str	r3, [r7, #36]	@ 0x24
 800674c:	e01c      	b.n	8006788 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	3301      	adds	r3, #1
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	b21b      	sxth	r3, r3
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	b21a      	sxth	r2, r3
 8006760:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006764:	4313      	orrs	r3, r2
 8006766:	b21b      	sxth	r3, r3
 8006768:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	8a7a      	ldrh	r2, [r7, #18]
 800676e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	3302      	adds	r3, #2
 8006774:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	3301      	adds	r3, #1
 800677a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	3301      	adds	r3, #1
 8006780:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	3b01      	subs	r3, #1
 8006786:	627b      	str	r3, [r7, #36]	@ 0x24
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1df      	bne.n	800674e <USB_WritePMA+0x38>
  }
}
 800678e:	bf00      	nop
 8006790:	bf00      	nop
 8006792:	372c      	adds	r7, #44	@ 0x2c
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800679c:	b480      	push	{r7}
 800679e:	b08b      	sub	sp, #44	@ 0x2c
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4611      	mov	r1, r2
 80067a8:	461a      	mov	r2, r3
 80067aa:	460b      	mov	r3, r1
 80067ac:	80fb      	strh	r3, [r7, #6]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80067b2:	88bb      	ldrh	r3, [r7, #4]
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067c2:	88fa      	ldrh	r2, [r7, #6]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067d2:	e018      	b.n	8006806 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	3302      	adds	r3, #2
 80067e0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	3301      	adds	r3, #1
 80067ee:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	3301      	adds	r3, #1
 80067fe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	3b01      	subs	r3, #1
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e3      	bne.n	80067d4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800680c:	88bb      	ldrh	r3, [r7, #4]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	b29b      	uxth	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	701a      	strb	r2, [r3, #0]
  }
}
 8006828:	bf00      	nop
 800682a:	372c      	adds	r7, #44	@ 0x2c
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8006838:	4907      	ldr	r1, [pc, #28]	@ (8006858 <MX_FATFS_Init+0x24>)
 800683a:	4808      	ldr	r0, [pc, #32]	@ (800685c <MX_FATFS_Init+0x28>)
 800683c:	f002 ff9a 	bl	8009774 <FATFS_LinkDriver>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8006846:	f04f 33ff 	mov.w	r3, #4294967295
 800684a:	e003      	b.n	8006854 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800684c:	4b04      	ldr	r3, [pc, #16]	@ (8006860 <MX_FATFS_Init+0x2c>)
 800684e:	2201      	movs	r2, #1
 8006850:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8006852:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8006854:	4618      	mov	r0, r3
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000274 	.word	0x20000274
 800685c:	20000010 	.word	0x20000010
 8006860:	20000278 	.word	0x20000278

08006864 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	4603      	mov	r3, r0
 800686c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800686e:	4b06      	ldr	r3, [pc, #24]	@ (8006888 <USER_initialize+0x24>)
 8006870:	2201      	movs	r2, #1
 8006872:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006874:	4b04      	ldr	r3, [pc, #16]	@ (8006888 <USER_initialize+0x24>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800687a:	4618      	mov	r0, r3
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	2000000c 	.word	0x2000000c

0800688c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	4603      	mov	r3, r0
 8006894:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006896:	4b06      	ldr	r3, [pc, #24]	@ (80068b0 <USER_status+0x24>)
 8006898:	2201      	movs	r2, #1
 800689a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800689c:	4b04      	ldr	r3, [pc, #16]	@ (80068b0 <USER_status+0x24>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	2000000c 	.word	0x2000000c

080068b4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4603      	mov	r3, r0
 80068c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80068c4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b085      	sub	sp, #20
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
 80068de:	4603      	mov	r3, r0
 80068e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80068e2:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	603a      	str	r2, [r7, #0]
 80068fa:	71fb      	strb	r3, [r7, #7]
 80068fc:	460b      	mov	r3, r1
 80068fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	73fb      	strb	r3, [r7, #15]
    return res;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800691e:	f44f 701d 	mov.w	r0, #628	@ 0x274
 8006922:	f006 f87b 	bl	800ca1c <USBD_static_malloc>
 8006926:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8006936:	2302      	movs	r3, #2
 8006938:	e034      	b.n	80069a4 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	7c1b      	ldrb	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d115      	bne.n	8006976 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800694a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800694e:	2202      	movs	r2, #2
 8006950:	2101      	movs	r1, #1
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f005 fee9 	bl	800c72a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006960:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006964:	2202      	movs	r2, #2
 8006966:	2181      	movs	r1, #129	@ 0x81
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f005 fede 	bl	800c72a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	871a      	strh	r2, [r3, #56]	@ 0x38
 8006974:	e012      	b.n	800699c <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006976:	2340      	movs	r3, #64	@ 0x40
 8006978:	2202      	movs	r2, #2
 800697a:	2101      	movs	r1, #1
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f005 fed4 	bl	800c72a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800698a:	2340      	movs	r3, #64	@ 0x40
 800698c:	2202      	movs	r2, #2
 800698e:	2181      	movs	r1, #129	@ 0x81
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f005 feca 	bl	800c72a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	871a      	strh	r2, [r3, #56]	@ 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f998 	bl	8006cd2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80069b8:	2101      	movs	r1, #1
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f005 fedb 	bl	800c776 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80069c8:	2181      	movs	r1, #129	@ 0x81
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f005 fed3 	bl	800c776 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00c      	beq.n	80069fa <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f9d4 	bl	8006d8e <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80069ec:	4618      	mov	r0, r3
 80069ee:	f006 f823 	bl	800ca38 <USBD_static_free>
    pdev->pClassData = NULL;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a14:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e0db      	b.n	8006be0 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d04e      	beq.n	8006ad2 <USBD_MSC_Setup+0xce>
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	f040 80cb 	bne.w	8006bd0 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006a40:	d002      	beq.n	8006a48 <USBD_MSC_Setup+0x44>
 8006a42:	2bff      	cmp	r3, #255	@ 0xff
 8006a44:	d025      	beq.n	8006a92 <USBD_MSC_Setup+0x8e>
 8006a46:	e03c      	b.n	8006ac2 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	885b      	ldrh	r3, [r3, #2]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d119      	bne.n	8006a84 <USBD_MSC_Setup+0x80>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	88db      	ldrh	r3, [r3, #6]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d115      	bne.n	8006a84 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	da10      	bge.n	8006a84 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	4798      	blx	r3
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	461a      	mov	r2, r3
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2201      	movs	r2, #1
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f002 fdcb 	bl	8009616 <USBD_CtlSendData>
 8006a80:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a82:	e025      	b.n	8006ad0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f002 fd54 	bl	8009534 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	75fb      	strb	r3, [r7, #23]
          break;
 8006a90:	e01e      	b.n	8006ad0 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	885b      	ldrh	r3, [r3, #2]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10c      	bne.n	8006ab4 <USBD_MSC_Setup+0xb0>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	88db      	ldrh	r3, [r3, #6]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d108      	bne.n	8006ab4 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	db03      	blt.n	8006ab4 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f948 	bl	8006d42 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ab2:	e00d      	b.n	8006ad0 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f002 fd3c 	bl	8009534 <USBD_CtlError>
            ret = USBD_FAIL;
 8006abc:	2303      	movs	r3, #3
 8006abe:	75fb      	strb	r3, [r7, #23]
          break;
 8006ac0:	e006      	b.n	8006ad0 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f002 fd35 	bl	8009534 <USBD_CtlError>
          ret = USBD_FAIL;
 8006aca:	2303      	movs	r3, #3
 8006acc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ace:	bf00      	nop
      }
      break;
 8006ad0:	e085      	b.n	8006bde <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	2b0b      	cmp	r3, #11
 8006ad8:	d871      	bhi.n	8006bbe <USBD_MSC_Setup+0x1ba>
 8006ada:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae0 <USBD_MSC_Setup+0xdc>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006b11 	.word	0x08006b11
 8006ae4:	08006b8d 	.word	0x08006b8d
 8006ae8:	08006bbf 	.word	0x08006bbf
 8006aec:	08006bbf 	.word	0x08006bbf
 8006af0:	08006bbf 	.word	0x08006bbf
 8006af4:	08006bbf 	.word	0x08006bbf
 8006af8:	08006bbf 	.word	0x08006bbf
 8006afc:	08006bbf 	.word	0x08006bbf
 8006b00:	08006bbf 	.word	0x08006bbf
 8006b04:	08006bbf 	.word	0x08006bbf
 8006b08:	08006b3b 	.word	0x08006b3b
 8006b0c:	08006b65 	.word	0x08006b65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d107      	bne.n	8006b2c <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b1c:	f107 030e 	add.w	r3, r7, #14
 8006b20:	2202      	movs	r2, #2
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f002 fd76 	bl	8009616 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b2a:	e050      	b.n	8006bce <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f002 fd00 	bl	8009534 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b34:	2303      	movs	r3, #3
 8006b36:	75fb      	strb	r3, [r7, #23]
          break;
 8006b38:	e049      	b.n	8006bce <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d107      	bne.n	8006b56 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	3304      	adds	r3, #4
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f002 fd61 	bl	8009616 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b54:	e03b      	b.n	8006bce <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f002 fceb 	bl	8009534 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	75fb      	strb	r3, [r7, #23]
          break;
 8006b62:	e034      	b.n	8006bce <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d106      	bne.n	8006b7e <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	885b      	ldrh	r3, [r3, #2]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	461a      	mov	r2, r3
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b7c:	e027      	b.n	8006bce <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f002 fcd7 	bl	8009534 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b86:	2303      	movs	r3, #3
 8006b88:	75fb      	strb	r3, [r7, #23]
          break;
 8006b8a:	e020      	b.n	8006bce <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d119      	bne.n	8006bcc <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	885b      	ldrh	r3, [r3, #2]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d115      	bne.n	8006bcc <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	889b      	ldrh	r3, [r3, #4]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f005 fe03 	bl	800c7b4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	889b      	ldrh	r3, [r3, #4]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa82 	bl	80070c0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8006bbc:	e006      	b.n	8006bcc <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f002 fcb7 	bl	8009534 <USBD_CtlError>
          ret = USBD_FAIL;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006bca:	e000      	b.n	8006bce <USBD_MSC_Setup+0x1ca>
          break;
 8006bcc:	bf00      	nop
      }
      break;
 8006bce:	e006      	b.n	8006bde <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f002 fcae 	bl	8009534 <USBD_CtlError>
      ret = USBD_FAIL;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	75fb      	strb	r3, [r7, #23]
      break;
 8006bdc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f8dc 	bl	8006db6 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f902 	bl	8006e22 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006c36:	4b03      	ldr	r3, [pc, #12]	@ (8006c44 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	2000005c 	.word	0x2000005c

08006c48 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006c56:	4b03      	ldr	r3, [pc, #12]	@ (8006c64 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	2000007c 	.word	0x2000007c

08006c68 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006c76:	4b03      	ldr	r3, [pc, #12]	@ (8006c84 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	2000009c 	.word	0x2000009c

08006c88 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	220a      	movs	r2, #10
 8006c94:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006c96:	4b03      	ldr	r3, [pc, #12]	@ (8006ca4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	200000bc 	.word	0x200000bc

08006ca8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e004      	b.n	8006cc6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ce0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d028      	beq.n	8006d3a <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2000      	movs	r0, #0
 8006d16:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006d18:	2101      	movs	r1, #1
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f005 fd4a 	bl	800c7b4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006d20:	2181      	movs	r1, #129	@ 0x81
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f005 fd46 	bl	800c7b4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8006d2e:	231f      	movs	r3, #31
 8006d30:	2101      	movs	r1, #1
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f005 fe07 	bl	800c946 <USBD_LL_PrepareReceive>
 8006d38:	e000      	b.n	8006d3c <MSC_BOT_Init+0x6a>
    return;
 8006d3a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d50:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d016      	beq.n	8006d86 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8006d64:	2181      	movs	r1, #129	@ 0x81
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f005 fd62 	bl	800c830 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f005 fd5e 	bl	800c830 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8006d7a:	231f      	movs	r3, #31
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f005 fde1 	bl	800c946 <USBD_LL_PrepareReceive>
 8006d84:	e000      	b.n	8006d88 <MSC_BOT_Reset+0x46>
    return;
 8006d86:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d9c:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	721a      	strb	r2, [r3, #8]
  }
}
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006dc8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d020      	beq.n	8006e12 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	7a1b      	ldrb	r3, [r3, #8]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d005      	beq.n	8006de4 <MSC_BOT_DataIn+0x2e>
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	db1c      	blt.n	8006e16 <MSC_BOT_DataIn+0x60>
 8006ddc:	3b03      	subs	r3, #3
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d819      	bhi.n	8006e16 <MSC_BOT_DataIn+0x60>
 8006de2:	e011      	b.n	8006e08 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8006df0:	461a      	mov	r2, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f992 	bl	800711c <SCSI_ProcessCmd>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	da0d      	bge.n	8006e1a <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006dfe:	2101      	movs	r1, #1
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f8fb 	bl	8006ffc <MSC_BOT_SendCSW>
      }
      break;
 8006e06:	e008      	b.n	8006e1a <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006e08:	2100      	movs	r1, #0
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f8f6 	bl	8006ffc <MSC_BOT_SendCSW>
      break;
 8006e10:	e004      	b.n	8006e1c <MSC_BOT_DataIn+0x66>
    return;
 8006e12:	bf00      	nop
 8006e14:	e002      	b.n	8006e1c <MSC_BOT_DataIn+0x66>

    default:
      break;
 8006e16:	bf00      	nop
 8006e18:	e000      	b.n	8006e1c <MSC_BOT_DataIn+0x66>
      break;
 8006e1a:	bf00      	nop
  }
}
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e34:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01c      	beq.n	8006e76 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	7a1b      	ldrb	r3, [r3, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <MSC_BOT_DataOut+0x28>
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d004      	beq.n	8006e52 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006e48:	e018      	b.n	8006e7c <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f81a 	bl	8006e84 <MSC_BOT_CBW_Decode>
      break;
 8006e50:	e014      	b.n	8006e7c <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f95b 	bl	800711c <SCSI_ProcessCmd>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	da06      	bge.n	8006e7a <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f8c4 	bl	8006ffc <MSC_BOT_SendCSW>
      break;
 8006e74:	e001      	b.n	8006e7a <MSC_BOT_DataOut+0x58>
    return;
 8006e76:	bf00      	nop
 8006e78:	e000      	b.n	8006e7c <MSC_BOT_DataOut+0x5a>
      break;
 8006e7a:	bf00      	nop
  }
}
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e92:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d077      	beq.n	8006f8a <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f005 fd67 	bl	800c988 <USBD_LL_GetRxDataSize>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b1f      	cmp	r3, #31
 8006ebe:	d114      	bne.n	8006eea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006ec6:	4a34      	ldr	r2, [pc, #208]	@ (8006f98 <MSC_BOT_CBW_Decode+0x114>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d10e      	bne.n	8006eea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d809      	bhi.n	8006eea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d004      	beq.n	8006eea <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006ee6:	2b10      	cmp	r3, #16
 8006ee8:	d90e      	bls.n	8006f08 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006ef0:	2320      	movs	r3, #32
 8006ef2:	2205      	movs	r2, #5
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fdbc 	bl	8007a72 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2202      	movs	r2, #2
 8006efe:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f8ab 	bl	800705c <MSC_BOT_Abort>
 8006f06:	e043      	b.n	8006f90 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8006f14:	461a      	mov	r2, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f900 	bl	800711c <SCSI_ProcessCmd>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	da0c      	bge.n	8006f3c <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	7a1b      	ldrb	r3, [r3, #8]
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d104      	bne.n	8006f34 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f865 	bl	8006ffc <MSC_BOT_SendCSW>
 8006f32:	e02d      	b.n	8006f90 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f891 	bl	800705c <MSC_BOT_Abort>
 8006f3a:	e029      	b.n	8006f90 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	7a1b      	ldrb	r3, [r3, #8]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d024      	beq.n	8006f8e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d020      	beq.n	8006f8e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d01c      	beq.n	8006f8e <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d009      	beq.n	8006f70 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f103 0110 	add.w	r1, r3, #16
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	461a      	mov	r2, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f817 	bl	8006f9c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006f6e:	e00f      	b.n	8006f90 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006f78:	2100      	movs	r1, #0
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f83e 	bl	8006ffc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006f80:	e006      	b.n	8006f90 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f86a 	bl	800705c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006f88:	e002      	b.n	8006f90 <MSC_BOT_CBW_Decode+0x10c>
    return;
 8006f8a:	bf00      	nop
 8006f8c:	e000      	b.n	8006f90 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 8006f8e:	bf00      	nop
    }
  }
}
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	43425355 	.word	0x43425355

08006f9c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006fae:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	bf28      	it	cs
 8006fbc:	4613      	movcs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d015      	beq.n	8006ff2 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	1ad2      	subs	r2, r2, r3
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2204      	movs	r2, #4
 8006fe2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	2181      	movs	r1, #129	@ 0x81
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f005 fc8a 	bl	800c904 <USBD_LL_Transmit>
 8006ff0:	e000      	b.n	8006ff4 <MSC_BOT_SendData+0x58>
    return;
 8006ff2:	bf00      	nop
}
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800700e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d01b      	beq.n	800704e <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4a0f      	ldr	r2, [pc, #60]	@ (8007058 <MSC_BOT_SendCSW+0x5c>)
 800701a:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	78fa      	ldrb	r2, [r7, #3]
 8007022:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 8007032:	230d      	movs	r3, #13
 8007034:	2181      	movs	r1, #129	@ 0x81
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f005 fc64 	bl	800c904 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8007042:	231f      	movs	r3, #31
 8007044:	2101      	movs	r1, #1
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f005 fc7d 	bl	800c946 <USBD_LL_PrepareReceive>
 800704c:	e000      	b.n	8007050 <MSC_BOT_SendCSW+0x54>
    return;
 800704e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	53425355 	.word	0x53425355

0800705c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800706a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d022      	beq.n	80070b8 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10c      	bne.n	8007096 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007082:	2b00      	cmp	r3, #0
 8007084:	d007      	beq.n	8007096 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800708a:	2b00      	cmp	r3, #0
 800708c:	d103      	bne.n	8007096 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800708e:	2101      	movs	r1, #1
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f005 fbae 	bl	800c7f2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007096:	2181      	movs	r1, #129	@ 0x81
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f005 fbaa 	bl	800c7f2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	7a5b      	ldrb	r3, [r3, #9]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d109      	bne.n	80070ba <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80070a6:	2181      	movs	r1, #129	@ 0x81
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f005 fba2 	bl	800c7f2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80070ae:	2101      	movs	r1, #1
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f005 fb9e 	bl	800c7f2 <USBD_LL_StallEP>
 80070b6:	e000      	b.n	80070ba <MSC_BOT_Abort+0x5e>
    return;
 80070b8:	bf00      	nop
  }
}
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070d2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d019      	beq.n	800710e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	7a5b      	ldrb	r3, [r3, #9]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d108      	bne.n	80070f4 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80070e2:	2181      	movs	r1, #129	@ 0x81
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f005 fb84 	bl	800c7f2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80070ea:	2101      	movs	r1, #1
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f005 fb80 	bl	800c7f2 <USBD_LL_StallEP>
 80070f2:	e00f      	b.n	8007114 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80070f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	da0a      	bge.n	8007112 <MSC_BOT_CplClrFeature+0x52>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	7a5b      	ldrb	r3, [r3, #9]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d006      	beq.n	8007112 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007104:	2101      	movs	r1, #1
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff ff78 	bl	8006ffc <MSC_BOT_SendCSW>
 800710c:	e002      	b.n	8007114 <MSC_BOT_CplClrFeature+0x54>
    return;
 800710e:	bf00      	nop
 8007110:	e000      	b.n	8007114 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8007112:	bf00      	nop
  }
}
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	460b      	mov	r3, r1
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007130:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d102      	bne.n	800713e <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8007138:	f04f 33ff 	mov.w	r3, #4294967295
 800713c:	e168      	b.n	8007410 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2baa      	cmp	r3, #170	@ 0xaa
 8007144:	f000 8144 	beq.w	80073d0 <SCSI_ProcessCmd+0x2b4>
 8007148:	2baa      	cmp	r3, #170	@ 0xaa
 800714a:	f300 8153 	bgt.w	80073f4 <SCSI_ProcessCmd+0x2d8>
 800714e:	2ba8      	cmp	r3, #168	@ 0xa8
 8007150:	f000 812c 	beq.w	80073ac <SCSI_ProcessCmd+0x290>
 8007154:	2ba8      	cmp	r3, #168	@ 0xa8
 8007156:	f300 814d 	bgt.w	80073f4 <SCSI_ProcessCmd+0x2d8>
 800715a:	2b5a      	cmp	r3, #90	@ 0x5a
 800715c:	f300 80c0 	bgt.w	80072e0 <SCSI_ProcessCmd+0x1c4>
 8007160:	2b00      	cmp	r3, #0
 8007162:	f2c0 8147 	blt.w	80073f4 <SCSI_ProcessCmd+0x2d8>
 8007166:	2b5a      	cmp	r3, #90	@ 0x5a
 8007168:	f200 8144 	bhi.w	80073f4 <SCSI_ProcessCmd+0x2d8>
 800716c:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <SCSI_ProcessCmd+0x58>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	080072e7 	.word	0x080072e7
 8007178:	080073f5 	.word	0x080073f5
 800717c:	080073f5 	.word	0x080073f5
 8007180:	080072f9 	.word	0x080072f9
 8007184:	080073f5 	.word	0x080073f5
 8007188:	080073f5 	.word	0x080073f5
 800718c:	080073f5 	.word	0x080073f5
 8007190:	080073f5 	.word	0x080073f5
 8007194:	080073f5 	.word	0x080073f5
 8007198:	080073f5 	.word	0x080073f5
 800719c:	080073f5 	.word	0x080073f5
 80071a0:	080073f5 	.word	0x080073f5
 80071a4:	080073f5 	.word	0x080073f5
 80071a8:	080073f5 	.word	0x080073f5
 80071ac:	080073f5 	.word	0x080073f5
 80071b0:	080073f5 	.word	0x080073f5
 80071b4:	080073f5 	.word	0x080073f5
 80071b8:	080073f5 	.word	0x080073f5
 80071bc:	0800730b 	.word	0x0800730b
 80071c0:	080073f5 	.word	0x080073f5
 80071c4:	080073f5 	.word	0x080073f5
 80071c8:	080073f5 	.word	0x080073f5
 80071cc:	080073f5 	.word	0x080073f5
 80071d0:	080073f5 	.word	0x080073f5
 80071d4:	080073f5 	.word	0x080073f5
 80071d8:	080073f5 	.word	0x080073f5
 80071dc:	08007341 	.word	0x08007341
 80071e0:	0800731d 	.word	0x0800731d
 80071e4:	080073f5 	.word	0x080073f5
 80071e8:	080073f5 	.word	0x080073f5
 80071ec:	0800732f 	.word	0x0800732f
 80071f0:	080073f5 	.word	0x080073f5
 80071f4:	080073f5 	.word	0x080073f5
 80071f8:	080073f5 	.word	0x080073f5
 80071fc:	080073f5 	.word	0x080073f5
 8007200:	08007365 	.word	0x08007365
 8007204:	080073f5 	.word	0x080073f5
 8007208:	08007377 	.word	0x08007377
 800720c:	080073f5 	.word	0x080073f5
 8007210:	080073f5 	.word	0x080073f5
 8007214:	0800739b 	.word	0x0800739b
 8007218:	080073f5 	.word	0x080073f5
 800721c:	080073bf 	.word	0x080073bf
 8007220:	080073f5 	.word	0x080073f5
 8007224:	080073f5 	.word	0x080073f5
 8007228:	080073f5 	.word	0x080073f5
 800722c:	080073f5 	.word	0x080073f5
 8007230:	080073e3 	.word	0x080073e3
 8007234:	080073f5 	.word	0x080073f5
 8007238:	080073f5 	.word	0x080073f5
 800723c:	080073f5 	.word	0x080073f5
 8007240:	080073f5 	.word	0x080073f5
 8007244:	080073f5 	.word	0x080073f5
 8007248:	080073f5 	.word	0x080073f5
 800724c:	080073f5 	.word	0x080073f5
 8007250:	080073f5 	.word	0x080073f5
 8007254:	080073f5 	.word	0x080073f5
 8007258:	080073f5 	.word	0x080073f5
 800725c:	080073f5 	.word	0x080073f5
 8007260:	080073f5 	.word	0x080073f5
 8007264:	080073f5 	.word	0x080073f5
 8007268:	080073f5 	.word	0x080073f5
 800726c:	080073f5 	.word	0x080073f5
 8007270:	080073f5 	.word	0x080073f5
 8007274:	080073f5 	.word	0x080073f5
 8007278:	080073f5 	.word	0x080073f5
 800727c:	080073f5 	.word	0x080073f5
 8007280:	080073f5 	.word	0x080073f5
 8007284:	080073f5 	.word	0x080073f5
 8007288:	080073f5 	.word	0x080073f5
 800728c:	080073f5 	.word	0x080073f5
 8007290:	080073f5 	.word	0x080073f5
 8007294:	080073f5 	.word	0x080073f5
 8007298:	080073f5 	.word	0x080073f5
 800729c:	080073f5 	.word	0x080073f5
 80072a0:	080073f5 	.word	0x080073f5
 80072a4:	080073f5 	.word	0x080073f5
 80072a8:	080073f5 	.word	0x080073f5
 80072ac:	080073f5 	.word	0x080073f5
 80072b0:	080073f5 	.word	0x080073f5
 80072b4:	080073f5 	.word	0x080073f5
 80072b8:	080073f5 	.word	0x080073f5
 80072bc:	080073f5 	.word	0x080073f5
 80072c0:	080073f5 	.word	0x080073f5
 80072c4:	080073f5 	.word	0x080073f5
 80072c8:	080073f5 	.word	0x080073f5
 80072cc:	080073f5 	.word	0x080073f5
 80072d0:	080073f5 	.word	0x080073f5
 80072d4:	080073f5 	.word	0x080073f5
 80072d8:	080073f5 	.word	0x080073f5
 80072dc:	08007353 	.word	0x08007353
 80072e0:	2b9e      	cmp	r3, #158	@ 0x9e
 80072e2:	d051      	beq.n	8007388 <SCSI_ProcessCmd+0x26c>
 80072e4:	e086      	b.n	80073f4 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80072e6:	7afb      	ldrb	r3, [r7, #11]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	4619      	mov	r1, r3
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f893 	bl	8007418 <SCSI_TestUnitReady>
 80072f2:	4603      	mov	r3, r0
 80072f4:	75fb      	strb	r3, [r7, #23]
      break;
 80072f6:	e089      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80072f8:	7afb      	ldrb	r3, [r7, #11]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	4619      	mov	r1, r3
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 fb38 	bl	8007974 <SCSI_RequestSense>
 8007304:	4603      	mov	r3, r0
 8007306:	75fb      	strb	r3, [r7, #23]
      break;
 8007308:	e080      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800730a:	7afb      	ldrb	r3, [r7, #11]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	4619      	mov	r1, r3
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f8d1 	bl	80074b8 <SCSI_Inquiry>
 8007316:	4603      	mov	r3, r0
 8007318:	75fb      	strb	r3, [r7, #23]
      break;
 800731a:	e077      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800731c:	7afb      	ldrb	r3, [r7, #11]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	4619      	mov	r1, r3
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 fbec 	bl	8007b00 <SCSI_StartStopUnit>
 8007328:	4603      	mov	r3, r0
 800732a:	75fb      	strb	r3, [r7, #23]
      break;
 800732c:	e06e      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	4619      	mov	r1, r3
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 fc34 	bl	8007ba2 <SCSI_AllowPreventRemovable>
 800733a:	4603      	mov	r3, r0
 800733c:	75fb      	strb	r3, [r7, #23]
      break;
 800733e:	e065      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8007340:	7afb      	ldrb	r3, [r7, #11]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	4619      	mov	r1, r3
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 fabc 	bl	80078c4 <SCSI_ModeSense6>
 800734c:	4603      	mov	r3, r0
 800734e:	75fb      	strb	r3, [r7, #23]
      break;
 8007350:	e05c      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8007352:	7afb      	ldrb	r3, [r7, #11]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	4619      	mov	r1, r3
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 fadf 	bl	800791c <SCSI_ModeSense10>
 800735e:	4603      	mov	r3, r0
 8007360:	75fb      	strb	r3, [r7, #23]
      break;
 8007362:	e053      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	4619      	mov	r1, r3
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fa37 	bl	80077de <SCSI_ReadFormatCapacity>
 8007370:	4603      	mov	r3, r0
 8007372:	75fb      	strb	r3, [r7, #23]
      break;
 8007374:	e04a      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8007376:	7afb      	ldrb	r3, [r7, #11]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	4619      	mov	r1, r3
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 f90f 	bl	80075a0 <SCSI_ReadCapacity10>
 8007382:	4603      	mov	r3, r0
 8007384:	75fb      	strb	r3, [r7, #23]
      break;
 8007386:	e041      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007388:	7afb      	ldrb	r3, [r7, #11]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	4619      	mov	r1, r3
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 f97b 	bl	800768a <SCSI_ReadCapacity16>
 8007394:	4603      	mov	r3, r0
 8007396:	75fb      	strb	r3, [r7, #23]
      break;
 8007398:	e038      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800739a:	7afb      	ldrb	r3, [r7, #11]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	4619      	mov	r1, r3
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 fc27 	bl	8007bf4 <SCSI_Read10>
 80073a6:	4603      	mov	r3, r0
 80073a8:	75fb      	strb	r3, [r7, #23]
      break;
 80073aa:	e02f      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80073ac:	7afb      	ldrb	r3, [r7, #11]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	4619      	mov	r1, r3
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 fcbe 	bl	8007d34 <SCSI_Read12>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75fb      	strb	r3, [r7, #23]
      break;
 80073bc:	e026      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80073be:	7afb      	ldrb	r3, [r7, #11]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	4619      	mov	r1, r3
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 fd60 	bl	8007e8a <SCSI_Write10>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]
      break;
 80073ce:	e01d      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80073d0:	7afb      	ldrb	r3, [r7, #11]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	4619      	mov	r1, r3
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 fe1c 	bl	8008014 <SCSI_Write12>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]
      break;
 80073e0:	e014      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80073e2:	7afb      	ldrb	r3, [r7, #11]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	4619      	mov	r1, r3
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fee8 	bl	80081be <SCSI_Verify10>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]
      break;
 80073f2:	e00b      	b.n	800740c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80073f4:	7af9      	ldrb	r1, [r7, #11]
 80073f6:	2320      	movs	r3, #32
 80073f8:	2205      	movs	r2, #5
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fb39 	bl	8007a72 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2202      	movs	r2, #2
 8007404:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8007406:	23ff      	movs	r3, #255	@ 0xff
 8007408:	75fb      	strb	r3, [r7, #23]
      break;
 800740a:	bf00      	nop
  }

  return ret;
 800740c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	460b      	mov	r3, r1
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800742c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8007434:	f04f 33ff 	mov.w	r3, #4294967295
 8007438:	e03a      	b.n	80074b0 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800744a:	2320      	movs	r3, #32
 800744c:	2205      	movs	r2, #5
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 fb0f 	bl	8007a72 <SCSI_SenseCode>

    return -1;
 8007454:	f04f 33ff 	mov.w	r3, #4294967295
 8007458:	e02a      	b.n	80074b0 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007460:	2b02      	cmp	r3, #2
 8007462:	d10b      	bne.n	800747c <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007464:	7af9      	ldrb	r1, [r7, #11]
 8007466:	233a      	movs	r3, #58	@ 0x3a
 8007468:	2202      	movs	r2, #2
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 fb01 	bl	8007a72 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2205      	movs	r2, #5
 8007474:	721a      	strb	r2, [r3, #8]
    return -1;
 8007476:	f04f 33ff 	mov.w	r3, #4294967295
 800747a:	e019      	b.n	80074b0 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	7afa      	ldrb	r2, [r7, #11]
 8007486:	4610      	mov	r0, r2
 8007488:	4798      	blx	r3
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007490:	7af9      	ldrb	r1, [r7, #11]
 8007492:	233a      	movs	r3, #58	@ 0x3a
 8007494:	2202      	movs	r2, #2
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 faeb 	bl	8007a72 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2205      	movs	r2, #5
 80074a0:	721a      	strb	r2, [r3, #8]

    return -1;
 80074a2:	f04f 33ff 	mov.w	r3, #4294967295
 80074a6:	e003      	b.n	80074b0 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2200      	movs	r2, #0
 80074ac:	60da      	str	r2, [r3, #12]

  return 0;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	460b      	mov	r3, r1
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80074cc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d102      	bne.n	80074da <SCSI_Inquiry+0x22>
  {
    return -1;
 80074d4:	f04f 33ff 	mov.w	r3, #4294967295
 80074d8:	e059      	b.n	800758e <SCSI_Inquiry+0xd6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80074ea:	2320      	movs	r3, #32
 80074ec:	2205      	movs	r2, #5
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 fabf 	bl	8007a72 <SCSI_SenseCode>
    return -1;
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
 80074f8:	e049      	b.n	800758e <SCSI_Inquiry+0xd6>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	3301      	adds	r3, #1
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d020      	beq.n	800754a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3302      	adds	r3, #2
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d105      	bne.n	800751e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007512:	2206      	movs	r2, #6
 8007514:	4920      	ldr	r1, [pc, #128]	@ (8007598 <SCSI_Inquiry+0xe0>)
 8007516:	69b8      	ldr	r0, [r7, #24]
 8007518:	f000 ffb4 	bl	8008484 <SCSI_UpdateBotData>
 800751c:	e036      	b.n	800758c <SCSI_Inquiry+0xd4>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3302      	adds	r3, #2
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b80      	cmp	r3, #128	@ 0x80
 8007526:	d105      	bne.n	8007534 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007528:	2208      	movs	r2, #8
 800752a:	491c      	ldr	r1, [pc, #112]	@ (800759c <SCSI_Inquiry+0xe4>)
 800752c:	69b8      	ldr	r0, [r7, #24]
 800752e:	f000 ffa9 	bl	8008484 <SCSI_UpdateBotData>
 8007532:	e02b      	b.n	800758c <SCSI_Inquiry+0xd4>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800753a:	2324      	movs	r3, #36	@ 0x24
 800753c:	2205      	movs	r2, #5
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fa97 	bl	8007a72 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8007544:	f04f 33ff 	mov.w	r3, #4294967295
 8007548:	e021      	b.n	800758e <SCSI_Inquiry+0xd6>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007550:	69d9      	ldr	r1, [r3, #28]
 8007552:	7afa      	ldrb	r2, [r7, #11]
 8007554:	4613      	mov	r3, r2
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	440b      	add	r3, r1
 800755e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	3304      	adds	r3, #4
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	3305      	adds	r3, #5
 8007568:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3304      	adds	r3, #4
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	461a      	mov	r2, r3
 8007572:	8bfb      	ldrh	r3, [r7, #30]
 8007574:	4293      	cmp	r3, r2
 8007576:	d303      	bcc.n	8007580 <SCSI_Inquiry+0xc8>
    {
      len = params[4];
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3304      	adds	r3, #4
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8007580:	8bfb      	ldrh	r3, [r7, #30]
 8007582:	461a      	mov	r2, r3
 8007584:	6979      	ldr	r1, [r7, #20]
 8007586:	69b8      	ldr	r0, [r7, #24]
 8007588:	f000 ff7c 	bl	8008484 <SCSI_UpdateBotData>
  }

  return 0;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	200000c8 	.word	0x200000c8
 800759c:	200000d0 	.word	0x200000d0

080075a0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	460b      	mov	r3, r1
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 80075bc:	f04f 33ff 	mov.w	r3, #4294967295
 80075c0:	e05f      	b.n	8007682 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 80075d6:	7af8      	ldrb	r0, [r7, #11]
 80075d8:	4798      	blx	r3
 80075da:	4603      	mov	r3, r0
 80075dc:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80075de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d104      	bne.n	80075f0 <SCSI_ReadCapacity10+0x50>
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d108      	bne.n	8007602 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80075f0:	7af9      	ldrb	r1, [r7, #11]
 80075f2:	233a      	movs	r3, #58	@ 0x3a
 80075f4:	2202      	movs	r2, #2
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 fa3b 	bl	8007a72 <SCSI_SenseCode>
    return -1;
 80075fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007600:	e03f      	b.n	8007682 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007608:	3b01      	subs	r3, #1
 800760a:	0e1b      	lsrs	r3, r3, #24
 800760c:	b2da      	uxtb	r2, r3
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007618:	3b01      	subs	r3, #1
 800761a:	0c1b      	lsrs	r3, r3, #16
 800761c:	b2da      	uxtb	r2, r3
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007628:	3b01      	subs	r3, #1
 800762a:	0a1b      	lsrs	r3, r3, #8
 800762c:	b2da      	uxtb	r2, r3
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8007638:	b2db      	uxtb	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	b2da      	uxtb	r2, r3
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007648:	161b      	asrs	r3, r3, #24
 800764a:	b2da      	uxtb	r2, r3
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007656:	141b      	asrs	r3, r3, #16
 8007658:	b2da      	uxtb	r2, r3
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	b29b      	uxth	r3, r3
 8007668:	b2da      	uxtb	r2, r3
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007674:	b2da      	uxtb	r2, r3
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2208      	movs	r2, #8
 800767e:	60da      	str	r2, [r3, #12]

  return 0;
 8007680:	2300      	movs	r3, #0

}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b088      	sub	sp, #32
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	460b      	mov	r3, r1
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800769e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d102      	bne.n	80076ac <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 80076a6:	f04f 33ff 	mov.w	r3, #4294967295
 80076aa:	e094      	b.n	80077d6 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 80076c0:	7af8      	ldrb	r0, [r7, #11]
 80076c2:	4798      	blx	r3
 80076c4:	4603      	mov	r3, r0
 80076c6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80076c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <SCSI_ReadCapacity16+0x50>
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d108      	bne.n	80076ec <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80076da:	7af9      	ldrb	r1, [r7, #11]
 80076dc:	233a      	movs	r3, #58	@ 0x3a
 80076de:	2202      	movs	r2, #2
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f9c6 	bl	8007a72 <SCSI_SenseCode>
    return -1;
 80076e6:	f04f 33ff 	mov.w	r3, #4294967295
 80076ea:	e074      	b.n	80077d6 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	330a      	adds	r3, #10
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	330b      	adds	r3, #11
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80076fc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	330c      	adds	r3, #12
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007706:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	320d      	adds	r2, #13
 800770c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800770e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007714:	2300      	movs	r3, #0
 8007716:	77fb      	strb	r3, [r7, #31]
 8007718:	e007      	b.n	800772a <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 800771a:	7ffb      	ldrb	r3, [r7, #31]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	4413      	add	r3, r2
 8007720:	2200      	movs	r2, #0
 8007722:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007724:	7ffb      	ldrb	r3, [r7, #31]
 8007726:	3301      	adds	r3, #1
 8007728:	77fb      	strb	r3, [r7, #31]
 800772a:	7ffa      	ldrb	r2, [r7, #31]
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	429a      	cmp	r2, r3
 8007732:	d3f2      	bcc.n	800771a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800773a:	3b01      	subs	r3, #1
 800773c:	0e1b      	lsrs	r3, r3, #24
 800773e:	b2da      	uxtb	r2, r3
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800774a:	3b01      	subs	r3, #1
 800774c:	0c1b      	lsrs	r3, r3, #16
 800774e:	b2da      	uxtb	r2, r3
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800775a:	3b01      	subs	r3, #1
 800775c:	0a1b      	lsrs	r3, r3, #8
 800775e:	b2da      	uxtb	r2, r3
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800776a:	b2db      	uxtb	r3, r3
 800776c:	3b01      	subs	r3, #1
 800776e:	b2da      	uxtb	r2, r3
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800777a:	161b      	asrs	r3, r3, #24
 800777c:	b2da      	uxtb	r2, r3
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007788:	141b      	asrs	r3, r3, #16
 800778a:	b2da      	uxtb	r2, r3
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8007796:	0a1b      	lsrs	r3, r3, #8
 8007798:	b29b      	uxth	r3, r3
 800779a:	b2da      	uxtb	r2, r3
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	330a      	adds	r3, #10
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	330b      	adds	r3, #11
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80077bc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	330c      	adds	r3, #12
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80077c6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	320d      	adds	r2, #13
 80077cc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80077ce:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	60da      	str	r2, [r3, #12]

  return 0;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3720      	adds	r7, #32
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b088      	sub	sp, #32
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	460b      	mov	r3, r1
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80077f2:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d102      	bne.n	8007800 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80077fa:	f04f 33ff 	mov.w	r3, #4294967295
 80077fe:	e05c      	b.n	80078ba <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f107 0214 	add.w	r2, r7, #20
 800780c:	f107 0110 	add.w	r1, r7, #16
 8007810:	7af8      	ldrb	r0, [r7, #11]
 8007812:	4798      	blx	r3
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d104      	bne.n	800782a <SCSI_ReadFormatCapacity+0x4c>
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007826:	2b02      	cmp	r3, #2
 8007828:	d108      	bne.n	800783c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800782a:	7af9      	ldrb	r1, [r7, #11]
 800782c:	233a      	movs	r3, #58	@ 0x3a
 800782e:	2202      	movs	r2, #2
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 f91e 	bl	8007a72 <SCSI_SenseCode>
    return -1;
 8007836:	f04f 33ff 	mov.w	r3, #4294967295
 800783a:	e03e      	b.n	80078ba <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 800783c:	2300      	movs	r3, #0
 800783e:	83fb      	strh	r3, [r7, #30]
 8007840:	e007      	b.n	8007852 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8007842:	8bfb      	ldrh	r3, [r7, #30]
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	4413      	add	r3, r2
 8007848:	2200      	movs	r2, #0
 800784a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800784c:	8bfb      	ldrh	r3, [r7, #30]
 800784e:	3301      	adds	r3, #1
 8007850:	83fb      	strh	r3, [r7, #30]
 8007852:	8bfb      	ldrh	r3, [r7, #30]
 8007854:	2b0b      	cmp	r3, #11
 8007856:	d9f4      	bls.n	8007842 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	2208      	movs	r2, #8
 800785c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	3b01      	subs	r3, #1
 8007862:	0e1b      	lsrs	r3, r3, #24
 8007864:	b2da      	uxtb	r2, r3
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	3b01      	subs	r3, #1
 800786e:	0c1b      	lsrs	r3, r3, #16
 8007870:	b2da      	uxtb	r2, r3
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	3b01      	subs	r3, #1
 800787a:	0a1b      	lsrs	r3, r3, #8
 800787c:	b2da      	uxtb	r2, r3
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b2da      	uxtb	r2, r3
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	2202      	movs	r2, #2
 8007892:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007894:	8abb      	ldrh	r3, [r7, #20]
 8007896:	141b      	asrs	r3, r3, #16
 8007898:	b2da      	uxtb	r2, r3
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800789e:	8abb      	ldrh	r3, [r7, #20]
 80078a0:	0a1b      	lsrs	r3, r3, #8
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80078aa:	8abb      	ldrh	r3, [r7, #20]
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	220c      	movs	r2, #12
 80078b6:	60da      	str	r2, [r3, #12]

  return 0;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	460b      	mov	r3, r1
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80078d8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80078da:	2317      	movs	r3, #23
 80078dc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <SCSI_ModeSense6+0x26>
  {
    return -1;
 80078e4:	f04f 33ff 	mov.w	r3, #4294967295
 80078e8:	e011      	b.n	800790e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3304      	adds	r3, #4
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	461a      	mov	r2, r3
 80078f2:	8afb      	ldrh	r3, [r7, #22]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d303      	bcc.n	8007900 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3304      	adds	r3, #4
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007900:	8afb      	ldrh	r3, [r7, #22]
 8007902:	461a      	mov	r2, r3
 8007904:	4904      	ldr	r1, [pc, #16]	@ (8007918 <SCSI_ModeSense6+0x54>)
 8007906:	6938      	ldr	r0, [r7, #16]
 8007908:	f000 fdbc 	bl	8008484 <SCSI_UpdateBotData>

  return 0;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	200000d8 	.word	0x200000d8

0800791c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	460b      	mov	r3, r1
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007930:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8007932:	231b      	movs	r3, #27
 8007934:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d102      	bne.n	8007942 <SCSI_ModeSense10+0x26>
  {
    return -1;
 800793c:	f04f 33ff 	mov.w	r3, #4294967295
 8007940:	e011      	b.n	8007966 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3308      	adds	r3, #8
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	8afb      	ldrh	r3, [r7, #22]
 800794c:	4293      	cmp	r3, r2
 800794e:	d303      	bcc.n	8007958 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3308      	adds	r3, #8
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8007958:	8afb      	ldrh	r3, [r7, #22]
 800795a:	461a      	mov	r2, r3
 800795c:	4904      	ldr	r1, [pc, #16]	@ (8007970 <SCSI_ModeSense10+0x54>)
 800795e:	6938      	ldr	r0, [r7, #16]
 8007960:	f000 fd90 	bl	8008484 <SCSI_UpdateBotData>

  return 0;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	200000f0 	.word	0x200000f0

08007974 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	460b      	mov	r3, r1
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007988:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d102      	bne.n	8007996 <SCSI_RequestSense+0x22>
  {
    return -1;
 8007990:	f04f 33ff 	mov.w	r3, #4294967295
 8007994:	e069      	b.n	8007a6a <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80079a6:	2320      	movs	r3, #32
 80079a8:	2205      	movs	r2, #5
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f861 	bl	8007a72 <SCSI_SenseCode>
    return -1;
 80079b0:	f04f 33ff 	mov.w	r3, #4294967295
 80079b4:	e059      	b.n	8007a6a <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80079b6:	2300      	movs	r3, #0
 80079b8:	75fb      	strb	r3, [r7, #23]
 80079ba:	e007      	b.n	80079cc <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	4413      	add	r3, r2
 80079c2:	2200      	movs	r2, #0
 80079c4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	3301      	adds	r3, #1
 80079ca:	75fb      	strb	r3, [r7, #23]
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	2b11      	cmp	r3, #17
 80079d0:	d9f4      	bls.n	80079bc <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	2270      	movs	r2, #112	@ 0x70
 80079d6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	220c      	movs	r2, #12
 80079dc:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d02e      	beq.n	8007a4c <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80079f4:	461a      	mov	r2, r3
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	3248      	adds	r2, #72	@ 0x48
 80079fa:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	3348      	adds	r3, #72	@ 0x48
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	4413      	add	r3, r2
 8007a10:	791a      	ldrb	r2, [r3, #4]
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	3348      	adds	r3, #72	@ 0x48
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	4413      	add	r3, r2
 8007a24:	795a      	ldrb	r2, [r3, #5]
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007a30:	3301      	adds	r3, #1
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	d103      	bne.n	8007a4c <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2212      	movs	r2, #18
 8007a50:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3304      	adds	r3, #4
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b12      	cmp	r3, #18
 8007a5a:	d805      	bhi.n	8007a68 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	4608      	mov	r0, r1
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	461a      	mov	r2, r3
 8007a80:	4603      	mov	r3, r0
 8007a82:	70fb      	strb	r3, [r7, #3]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70bb      	strb	r3, [r7, #2]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a92:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d02c      	beq.n	8007af4 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3248      	adds	r2, #72	@ 0x48
 8007aa6:	78b9      	ldrb	r1, [r7, #2]
 8007aa8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	3348      	adds	r3, #72	@ 0x48
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	4413      	add	r3, r2
 8007aba:	787a      	ldrb	r2, [r7, #1]
 8007abc:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	3348      	adds	r3, #72	@ 0x48
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	4413      	add	r3, r2
 8007acc:	2200      	movs	r2, #0
 8007ace:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d105      	bne.n	8007af6 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8007af2:	e000      	b.n	8007af6 <SCSI_SenseCode+0x84>
    return;
 8007af4:	bf00      	nop
  }
}
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b14:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d102      	bne.n	8007b22 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8007b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b20:	e03b      	b.n	8007b9a <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d10f      	bne.n	8007b4c <SCSI_StartStopUnit+0x4c>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3304      	adds	r3, #4
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	f003 0303 	and.w	r3, r3, #3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d108      	bne.n	8007b4c <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007b3a:	7af9      	ldrb	r1, [r7, #11]
 8007b3c:	2324      	movs	r3, #36	@ 0x24
 8007b3e:	2205      	movs	r2, #5
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff ff96 	bl	8007a72 <SCSI_SenseCode>

    return -1;
 8007b46:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4a:	e026      	b.n	8007b9a <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3304      	adds	r3, #4
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d104      	bne.n	8007b64 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8007b62:	e016      	b.n	8007b92 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	3304      	adds	r3, #4
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d104      	bne.n	8007b7c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8007b7a:	e00a      	b.n	8007b92 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	f003 0303 	and.w	r3, r3, #3
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d103      	bne.n	8007b92 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2200      	movs	r2, #0
 8007b96:	60da      	str	r2, [r3, #12]

  return 0;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b087      	sub	sp, #28
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	460b      	mov	r3, r1
 8007bac:	607a      	str	r2, [r7, #4]
 8007bae:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007bb6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d102      	bne.n	8007bc4 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8007bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc2:	e011      	b.n	8007be8 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d104      	bne.n	8007bd8 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8007bd6:	e003      	b.n	8007be0 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	2200      	movs	r2, #0
 8007be4:	60da      	str	r2, [r3, #12]

  return 0;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	371c      	adds	r7, #28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d102      	bne.n	8007c16 <SCSI_Read10+0x22>
  {
    return -1;
 8007c10:	f04f 33ff 	mov.w	r3, #4294967295
 8007c14:	e08a      	b.n	8007d2c <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	7a1b      	ldrb	r3, [r3, #8]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d17c      	bne.n	8007d18 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007c24:	b25b      	sxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	db0a      	blt.n	8007c40 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007c30:	2320      	movs	r3, #32
 8007c32:	2205      	movs	r2, #5
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7ff ff1c 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 8007c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3e:	e075      	b.n	8007d2c <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d108      	bne.n	8007c5c <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c4a:	7af9      	ldrb	r1, [r7, #11]
 8007c4c:	233a      	movs	r3, #58	@ 0x3a
 8007c4e:	2202      	movs	r2, #2
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f7ff ff0e 	bl	8007a72 <SCSI_SenseCode>

      return -1;
 8007c56:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5a:	e067      	b.n	8007d2c <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	7afa      	ldrb	r2, [r7, #11]
 8007c66:	4610      	mov	r0, r2
 8007c68:	4798      	blx	r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d008      	beq.n	8007c82 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c70:	7af9      	ldrb	r1, [r7, #11]
 8007c72:	233a      	movs	r3, #58	@ 0x3a
 8007c74:	2202      	movs	r2, #2
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fefb 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 8007c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c80:	e054      	b.n	8007d2c <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3302      	adds	r3, #2
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	3303      	adds	r3, #3
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c92:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3304      	adds	r3, #4
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007c9c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	3205      	adds	r2, #5
 8007ca2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007ca4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3307      	adds	r3, #7
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	3208      	adds	r2, #8
 8007cb8:	7812      	ldrb	r2, [r2, #0]
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007cce:	7af9      	ldrb	r1, [r7, #11]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 faad 	bl	8008230 <SCSI_CheckAddressRange>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	da02      	bge.n	8007ce2 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce0:	e024      	b.n	8007d2c <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007cee:	6979      	ldr	r1, [r7, #20]
 8007cf0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8007cf4:	fb01 f303 	mul.w	r3, r1, r3
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d00a      	beq.n	8007d12 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007d02:	2320      	movs	r3, #32
 8007d04:	2205      	movs	r2, #5
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7ff feb3 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 8007d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d10:	e00c      	b.n	8007d2c <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2202      	movs	r2, #2
 8007d16:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d1e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	4619      	mov	r1, r3
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 faab 	bl	8008280 <SCSI_ProcessRead>
 8007d2a:	4603      	mov	r3, r0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d48:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <SCSI_Read12+0x22>
  {
    return -1;
 8007d50:	f04f 33ff 	mov.w	r3, #4294967295
 8007d54:	e095      	b.n	8007e82 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	7a1b      	ldrb	r3, [r3, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f040 8087 	bne.w	8007e6e <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007d66:	b25b      	sxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	db0a      	blt.n	8007d82 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007d72:	2320      	movs	r3, #32
 8007d74:	2205      	movs	r2, #5
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f7ff fe7b 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 8007d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d80:	e07f      	b.n	8007e82 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d108      	bne.n	8007d9e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007d8c:	7af9      	ldrb	r1, [r7, #11]
 8007d8e:	233a      	movs	r3, #58	@ 0x3a
 8007d90:	2202      	movs	r2, #2
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff fe6d 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 8007d98:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9c:	e071      	b.n	8007e82 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	7afa      	ldrb	r2, [r7, #11]
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d008      	beq.n	8007dc4 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007db2:	7af9      	ldrb	r1, [r7, #11]
 8007db4:	233a      	movs	r3, #58	@ 0x3a
 8007db6:	2202      	movs	r2, #2
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f7ff fe5a 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 8007dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc2:	e05e      	b.n	8007e82 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3302      	adds	r3, #2
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3303      	adds	r3, #3
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007dd4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007dde:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	3205      	adds	r2, #5
 8007de4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007de6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3306      	adds	r3, #6
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3307      	adds	r3, #7
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007dfe:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3308      	adds	r3, #8
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007e08:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	3209      	adds	r2, #9
 8007e0e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007e10:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007e24:	7af9      	ldrb	r1, [r7, #11]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 fa02 	bl	8008230 <SCSI_CheckAddressRange>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	da02      	bge.n	8007e38 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007e32:	f04f 33ff 	mov.w	r3, #4294967295
 8007e36:	e024      	b.n	8007e82 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007e44:	6979      	ldr	r1, [r7, #20]
 8007e46:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 8007e4a:	fb01 f303 	mul.w	r3, r1, r3
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d00a      	beq.n	8007e68 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007e58:	2320      	movs	r3, #32
 8007e5a:	2205      	movs	r2, #5
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f7ff fe08 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 8007e62:	f04f 33ff 	mov.w	r3, #4294967295
 8007e66:	e00c      	b.n	8007e82 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e74:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007e76:	7afb      	ldrb	r3, [r7, #11]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 fa00 	bl	8008280 <SCSI_ProcessRead>
 8007e80:	4603      	mov	r3, r0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b086      	sub	sp, #24
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	460b      	mov	r3, r1
 8007e94:	607a      	str	r2, [r7, #4]
 8007e96:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e9e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d102      	bne.n	8007eac <SCSI_Write10+0x22>
  {
    return -1;
 8007ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eaa:	e0af      	b.n	800800c <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	7a1b      	ldrb	r3, [r3, #8]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f040 80a5 	bne.w	8008000 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10a      	bne.n	8007ed6 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007ec6:	2320      	movs	r3, #32
 8007ec8:	2205      	movs	r2, #5
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f7ff fdd1 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 8007ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed4:	e09a      	b.n	800800c <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007edc:	b25b      	sxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	da0a      	bge.n	8007ef8 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007ee8:	2320      	movs	r3, #32
 8007eea:	2205      	movs	r2, #5
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f7ff fdc0 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef6:	e089      	b.n	800800c <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	7afa      	ldrb	r2, [r7, #11]
 8007f02:	4610      	mov	r0, r2
 8007f04:	4798      	blx	r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d008      	beq.n	8007f1e <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f0c:	7af9      	ldrb	r1, [r7, #11]
 8007f0e:	233a      	movs	r3, #58	@ 0x3a
 8007f10:	2202      	movs	r2, #2
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff fdad 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 8007f18:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1c:	e076      	b.n	800800c <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	7afa      	ldrb	r2, [r7, #11]
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d008      	beq.n	8007f44 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007f32:	7af9      	ldrb	r1, [r7, #11]
 8007f34:	2327      	movs	r3, #39	@ 0x27
 8007f36:	2202      	movs	r2, #2
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f7ff fd9a 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 8007f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f42:	e063      	b.n	800800c <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3302      	adds	r3, #2
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3303      	adds	r3, #3
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007f54:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007f5e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	3205      	adds	r2, #5
 8007f64:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007f66:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3307      	adds	r3, #7
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	3208      	adds	r2, #8
 8007f7a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007f90:	7af9      	ldrb	r1, [r7, #11]
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 f94c 	bl	8008230 <SCSI_CheckAddressRange>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	da02      	bge.n	8007fa4 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa2:	e033      	b.n	800800c <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8007fb0:	fb02 f303 	mul.w	r3, r2, r3
 8007fb4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d00a      	beq.n	8007fd8 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007fc8:	2320      	movs	r3, #32
 8007fca:	2205      	movs	r2, #5
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff fd50 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 8007fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd6:	e019      	b.n	800800c <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fde:	bf28      	it	cs
 8007fe0:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8007fe4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	f103 0210 	add.w	r2, r3, #16
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f004 fca5 	bl	800c946 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e005      	b.n	800800c <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8008000:	7afb      	ldrb	r3, [r7, #11]
 8008002:	4619      	mov	r1, r3
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f9b4 	bl	8008372 <SCSI_ProcessWrite>
 800800a:	4603      	mov	r3, r0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	460b      	mov	r3, r1
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008028:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <SCSI_Write12+0x22>
  {
    return -1;
 8008030:	f04f 33ff 	mov.w	r3, #4294967295
 8008034:	e0bf      	b.n	80081b6 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	7a1b      	ldrb	r3, [r3, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	f040 80b5 	bne.w	80081aa <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10a      	bne.n	8008060 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008050:	2320      	movs	r3, #32
 8008052:	2205      	movs	r2, #5
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f7ff fd0c 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 800805a:	f04f 33ff 	mov.w	r3, #4294967295
 800805e:	e0aa      	b.n	80081b6 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8008066:	b25b      	sxtb	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	da0a      	bge.n	8008082 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008072:	2320      	movs	r3, #32
 8008074:	2205      	movs	r2, #5
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fcfb 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 800807c:	f04f 33ff 	mov.w	r3, #4294967295
 8008080:	e099      	b.n	80081b6 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	7afa      	ldrb	r2, [r7, #11]
 800808c:	4610      	mov	r0, r2
 800808e:	4798      	blx	r3
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008096:	7af9      	ldrb	r1, [r7, #11]
 8008098:	233a      	movs	r3, #58	@ 0x3a
 800809a:	2202      	movs	r2, #2
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff fce8 	bl	8007a72 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2205      	movs	r2, #5
 80080a6:	721a      	strb	r2, [r3, #8]
      return -1;
 80080a8:	f04f 33ff 	mov.w	r3, #4294967295
 80080ac:	e083      	b.n	80081b6 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	7afa      	ldrb	r2, [r7, #11]
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00b      	beq.n	80080da <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80080c2:	7af9      	ldrb	r1, [r7, #11]
 80080c4:	2327      	movs	r3, #39	@ 0x27
 80080c6:	2202      	movs	r2, #2
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f7ff fcd2 	bl	8007a72 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2205      	movs	r2, #5
 80080d2:	721a      	strb	r2, [r3, #8]
      return -1;
 80080d4:	f04f 33ff 	mov.w	r3, #4294967295
 80080d8:	e06d      	b.n	80081b6 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3302      	adds	r3, #2
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3303      	adds	r3, #3
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80080ea:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3304      	adds	r3, #4
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80080f4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	3205      	adds	r2, #5
 80080fa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80080fc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3306      	adds	r3, #6
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3307      	adds	r3, #7
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008114:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3308      	adds	r3, #8
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800811e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	3209      	adds	r2, #9
 8008124:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8008126:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800813a:	7af9      	ldrb	r1, [r7, #11]
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 f877 	bl	8008230 <SCSI_CheckAddressRange>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	da02      	bge.n	800814e <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008148:	f04f 33ff 	mov.w	r3, #4294967295
 800814c:	e033      	b.n	80081b6 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800815a:	fb02 f303 	mul.w	r3, r2, r3
 800815e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	429a      	cmp	r2, r3
 800816a:	d00a      	beq.n	8008182 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008172:	2320      	movs	r3, #32
 8008174:	2205      	movs	r2, #5
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f7ff fc7b 	bl	8007a72 <SCSI_SenseCode>
      return -1;
 800817c:	f04f 33ff 	mov.w	r3, #4294967295
 8008180:	e019      	b.n	80081b6 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008188:	bf28      	it	cs
 800818a:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800818e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2201      	movs	r2, #1
 8008194:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f103 0210 	add.w	r2, r3, #16
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	2101      	movs	r1, #1
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f004 fbd0 	bl	800c946 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	e005      	b.n	80081b6 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 80081aa:	7afb      	ldrb	r3, [r7, #11]
 80081ac:	4619      	mov	r1, r3
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f8df 	bl	8008372 <SCSI_ProcessWrite>
 80081b4:	4603      	mov	r3, r0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b086      	sub	sp, #24
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	460b      	mov	r3, r1
 80081c8:	607a      	str	r2, [r7, #4]
 80081ca:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081d2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d102      	bne.n	80081e0 <SCSI_Verify10+0x22>
  {
    return -1;
 80081da:	f04f 33ff 	mov.w	r3, #4294967295
 80081de:	e023      	b.n	8008228 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3301      	adds	r3, #1
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d008      	beq.n	8008200 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80081ee:	7af9      	ldrb	r1, [r7, #11]
 80081f0:	2324      	movs	r3, #36	@ 0x24
 80081f2:	2205      	movs	r2, #5
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7ff fc3c 	bl	8007a72 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80081fa:	f04f 33ff 	mov.w	r3, #4294967295
 80081fe:	e013      	b.n	8008228 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800820c:	7af9      	ldrb	r1, [r7, #11]
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 f80e 	bl	8008230 <SCSI_CheckAddressRange>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	da02      	bge.n	8008220 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 800821a:	f04f 33ff 	mov.w	r3, #4294967295
 800821e:	e003      	b.n	8008228 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	2200      	movs	r2, #0
 8008224:	60da      	str	r2, [r3, #12]

  return 0;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	607a      	str	r2, [r7, #4]
 800823a:	603b      	str	r3, [r7, #0]
 800823c:	460b      	mov	r3, r1
 800823e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008246:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d102      	bne.n	8008254 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 800824e:	f04f 33ff 	mov.w	r3, #4294967295
 8008252:	e011      	b.n	8008278 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	441a      	add	r2, r3
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8008260:	429a      	cmp	r2, r3
 8008262:	d908      	bls.n	8008276 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8008264:	7af9      	ldrb	r1, [r7, #11]
 8008266:	2321      	movs	r3, #33	@ 0x21
 8008268:	2205      	movs	r2, #5
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f7ff fc01 	bl	8007a72 <SCSI_SenseCode>
    return -1;
 8008270:	f04f 33ff 	mov.w	r3, #4294967295
 8008274:	e000      	b.n	8008278 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008280:	b590      	push	{r4, r7, lr}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008292:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 80082a0:	fb02 f303 	mul.w	r3, r2, r3
 80082a4:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d102      	bne.n	80082b2 <SCSI_ProcessRead+0x32>
  {
    return -1;
 80082ac:	f04f 33ff 	mov.w	r3, #4294967295
 80082b0:	e05b      	b.n	800836a <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082b8:	bf28      	it	cs
 80082ba:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80082be:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082c6:	691c      	ldr	r4, [r3, #16]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f103 0110 	add.w	r1, r3, #16
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80082da:	4618      	mov	r0, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	78f8      	ldrb	r0, [r7, #3]
 80082e6:	47a0      	blx	r4
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	da08      	bge.n	8008300 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80082ee:	78f9      	ldrb	r1, [r7, #3]
 80082f0:	2311      	movs	r3, #17
 80082f2:	2204      	movs	r2, #4
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff fbbc 	bl	8007a72 <SCSI_SenseCode>
    return -1;
 80082fa:	f04f 33ff 	mov.w	r3, #4294967295
 80082fe:	e034      	b.n	800836a <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f103 0210 	add.w	r2, r3, #16
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2181      	movs	r1, #129	@ 0x81
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f004 fafa 	bl	800c904 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800831c:	4619      	mov	r1, r3
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	fbb3 f3f1 	udiv	r3, r3, r1
 8008324:	441a      	add	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 8008338:	4619      	mov	r1, r3
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008340:	1ad2      	subs	r2, r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	1ad2      	subs	r2, r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800835e:	2b00      	cmp	r3, #0
 8008360:	d102      	bne.n	8008368 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2203      	movs	r2, #3
 8008366:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	bd90      	pop	{r4, r7, pc}

08008372 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008372:	b590      	push	{r4, r7, lr}
 8008374:	b085      	sub	sp, #20
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008384:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 8008392:	fb02 f303 	mul.w	r3, r2, r3
 8008396:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d102      	bne.n	80083a4 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	e06b      	b.n	800847c <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083aa:	bf28      	it	cs
 80083ac:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80083b0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083b8:	695c      	ldr	r4, [r3, #20]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f103 0110 	add.w	r1, r3, #16
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80083cc:	4618      	mov	r0, r3
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	78f8      	ldrb	r0, [r7, #3]
 80083d8:	47a0      	blx	r4
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	da08      	bge.n	80083f2 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80083e0:	78f9      	ldrb	r1, [r7, #3]
 80083e2:	2303      	movs	r3, #3
 80083e4:	2204      	movs	r2, #4
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7ff fb43 	bl	8007a72 <SCSI_SenseCode>
    return -1;
 80083ec:	f04f 33ff 	mov.w	r3, #4294967295
 80083f0:	e044      	b.n	800847c <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 80083fe:	4619      	mov	r1, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	fbb3 f3f1 	udiv	r3, r3, r1
 8008406:	441a      	add	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800841a:	4619      	mov	r1, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008422:	1ad2      	subs	r2, r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	1ad2      	subs	r2, r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008440:	2b00      	cmp	r3, #0
 8008442:	d104      	bne.n	800844e <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008444:	2100      	movs	r1, #0
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7fe fdd8 	bl	8006ffc <MSC_BOT_SendCSW>
 800844c:	e015      	b.n	800847a <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800845a:	fb02 f303 	mul.w	r3, r2, r3
 800845e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008462:	bf28      	it	cs
 8008464:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008468:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f103 0210 	add.w	r2, r3, #16
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2101      	movs	r1, #1
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f004 fa66 	bl	800c946 <USBD_LL_PrepareReceive>
  }

  return 0;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	bd90      	pop	{r4, r7, pc}

08008484 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8008492:	88fb      	ldrh	r3, [r7, #6]
 8008494:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d102      	bne.n	80084a2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800849c:	f04f 33ff 	mov.w	r3, #4294967295
 80084a0:	e013      	b.n	80084ca <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80084a2:	8afa      	ldrh	r2, [r7, #22]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80084a8:	e00b      	b.n	80084c2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80084aa:	8afb      	ldrh	r3, [r7, #22]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80084b0:	8afb      	ldrh	r3, [r7, #22]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	441a      	add	r2, r3
 80084b6:	8afb      	ldrh	r3, [r7, #22]
 80084b8:	7811      	ldrb	r1, [r2, #0]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4413      	add	r3, r2
 80084be:	460a      	mov	r2, r1
 80084c0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80084c2:	8afb      	ldrh	r3, [r7, #22]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1f0      	bne.n	80084aa <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	371c      	adds	r7, #28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b086      	sub	sp, #24
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	4613      	mov	r3, r2
 80084e2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e01f      	b.n	800852e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	79fa      	ldrb	r2, [r7, #7]
 8008520:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f004 f890 	bl	800c648 <USBD_LL_Init>
 8008528:	4603      	mov	r3, r0
 800852a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800852c:	7dfb      	ldrb	r3, [r7, #23]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008540:	2300      	movs	r3, #0
 8008542:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800854a:	2303      	movs	r3, #3
 800854c:	e016      	b.n	800857c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800855c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00b      	beq.n	800857a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856a:	f107 020e 	add.w	r2, r7, #14
 800856e:	4610      	mov	r0, r2
 8008570:	4798      	blx	r3
 8008572:	4602      	mov	r2, r0
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f004 f8b1 	bl	800c6f4 <USBD_LL_Start>
 8008592:	4603      	mov	r3, r0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	460b      	mov	r3, r1
 80085bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085be:	2303      	movs	r3, #3
 80085c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d009      	beq.n	80085e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	4611      	mov	r1, r2
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	4798      	blx	r3
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d007      	beq.n	8008610 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	4611      	mov	r1, r2
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	4798      	blx	r3
  }

  return USBD_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	4618      	mov	r0, r3
 800862e:	f000 ff47 	bl	80094c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008640:	461a      	mov	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800864e:	f003 031f 	and.w	r3, r3, #31
 8008652:	2b02      	cmp	r3, #2
 8008654:	d01a      	beq.n	800868c <USBD_LL_SetupStage+0x72>
 8008656:	2b02      	cmp	r3, #2
 8008658:	d822      	bhi.n	80086a0 <USBD_LL_SetupStage+0x86>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <USBD_LL_SetupStage+0x4a>
 800865e:	2b01      	cmp	r3, #1
 8008660:	d00a      	beq.n	8008678 <USBD_LL_SetupStage+0x5e>
 8008662:	e01d      	b.n	80086a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f9ef 	bl	8008a50 <USBD_StdDevReq>
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]
      break;
 8008676:	e020      	b.n	80086ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fa53 	bl	8008b2c <USBD_StdItfReq>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]
      break;
 800868a:	e016      	b.n	80086ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fa92 	bl	8008bbe <USBD_StdEPReq>
 800869a:	4603      	mov	r3, r0
 800869c:	73fb      	strb	r3, [r7, #15]
      break;
 800869e:	e00c      	b.n	80086ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80086a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f004 f89f 	bl	800c7f2 <USBD_LL_StallEP>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]
      break;
 80086b8:	bf00      	nop
  }

  return ret;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	460b      	mov	r3, r1
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80086d2:	7afb      	ldrb	r3, [r7, #11]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d138      	bne.n	800874a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80086de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d14a      	bne.n	8008780 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	689a      	ldr	r2, [r3, #8]
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d913      	bls.n	800871e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	689a      	ldr	r2, [r3, #8]
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	68da      	ldr	r2, [r3, #12]
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	4293      	cmp	r3, r2
 800870e:	bf28      	it	cs
 8008710:	4613      	movcs	r3, r2
 8008712:	461a      	mov	r2, r3
 8008714:	6879      	ldr	r1, [r7, #4]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 ffa9 	bl	800966e <USBD_CtlContinueRx>
 800871c:	e030      	b.n	8008780 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b03      	cmp	r3, #3
 8008728:	d10b      	bne.n	8008742 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 ffa4 	bl	8009690 <USBD_CtlSendStatus>
 8008748:	e01a      	b.n	8008780 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b03      	cmp	r3, #3
 8008754:	d114      	bne.n	8008780 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00e      	beq.n	8008780 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	7afa      	ldrb	r2, [r7, #11]
 800876c:	4611      	mov	r1, r2
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	4798      	blx	r3
 8008772:	4603      	mov	r3, r0
 8008774:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800877c:	7dfb      	ldrb	r3, [r7, #23]
 800877e:	e000      	b.n	8008782 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b086      	sub	sp, #24
 800878e:	af00      	add	r7, sp, #0
 8008790:	60f8      	str	r0, [r7, #12]
 8008792:	460b      	mov	r3, r1
 8008794:	607a      	str	r2, [r7, #4]
 8008796:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008798:	7afb      	ldrb	r3, [r7, #11]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d16b      	bne.n	8008876 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3314      	adds	r3, #20
 80087a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d156      	bne.n	800885c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d914      	bls.n	80087e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	689a      	ldr	r2, [r3, #8]
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	1ad2      	subs	r2, r2, r3
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	461a      	mov	r2, r3
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 ff3b 	bl	800964c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087d6:	2300      	movs	r3, #0
 80087d8:	2200      	movs	r2, #0
 80087da:	2100      	movs	r1, #0
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f004 f8b2 	bl	800c946 <USBD_LL_PrepareReceive>
 80087e2:	e03b      	b.n	800885c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	68da      	ldr	r2, [r3, #12]
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d11c      	bne.n	800882a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d316      	bcc.n	800882a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008806:	429a      	cmp	r2, r3
 8008808:	d20f      	bcs.n	800882a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800880a:	2200      	movs	r2, #0
 800880c:	2100      	movs	r1, #0
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 ff1c 	bl	800964c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800881c:	2300      	movs	r3, #0
 800881e:	2200      	movs	r2, #0
 8008820:	2100      	movs	r1, #0
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f004 f88f 	bl	800c946 <USBD_LL_PrepareReceive>
 8008828:	e018      	b.n	800885c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b03      	cmp	r3, #3
 8008834:	d10b      	bne.n	800884e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d005      	beq.n	800884e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800884e:	2180      	movs	r1, #128	@ 0x80
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f003 ffce 	bl	800c7f2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f000 ff2d 	bl	80096b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008862:	2b01      	cmp	r3, #1
 8008864:	d122      	bne.n	80088ac <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f7ff fe98 	bl	800859c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008874:	e01a      	b.n	80088ac <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b03      	cmp	r3, #3
 8008880:	d114      	bne.n	80088ac <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00e      	beq.n	80088ac <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	7afa      	ldrb	r2, [r7, #11]
 8008898:	4611      	mov	r1, r2
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	4798      	blx	r3
 800889e:	4603      	mov	r3, r0
 80088a0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	e000      	b.n	80088ae <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e02f      	b.n	800894a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00f      	beq.n	8008914 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d009      	beq.n	8008914 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	6852      	ldr	r2, [r2, #4]
 800890c:	b2d2      	uxtb	r2, r2
 800890e:	4611      	mov	r1, r2
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008914:	2340      	movs	r3, #64	@ 0x40
 8008916:	2200      	movs	r2, #0
 8008918:	2100      	movs	r1, #0
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f003 ff05 	bl	800c72a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2240      	movs	r2, #64	@ 0x40
 800892c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008930:	2340      	movs	r3, #64	@ 0x40
 8008932:	2200      	movs	r2, #0
 8008934:	2180      	movs	r1, #128	@ 0x80
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f003 fef7 	bl	800c72a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2240      	movs	r2, #64	@ 0x40
 8008946:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008952:	b480      	push	{r7}
 8008954:	b083      	sub	sp, #12
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	460b      	mov	r3, r1
 800895c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008980:	b2da      	uxtb	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2204      	movs	r2, #4
 800898c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800899e:	b480      	push	{r7}
 80089a0:	b083      	sub	sp, #12
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d106      	bne.n	80089c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e012      	b.n	8008a0a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d10b      	bne.n	8008a08 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b087      	sub	sp, #28
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	3301      	adds	r3, #1
 8008a28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	b21a      	sxth	r2, r3
 8008a38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	b21b      	sxth	r3, r3
 8008a40:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a42:	89fb      	ldrh	r3, [r7, #14]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a66:	2b40      	cmp	r3, #64	@ 0x40
 8008a68:	d005      	beq.n	8008a76 <USBD_StdDevReq+0x26>
 8008a6a:	2b40      	cmp	r3, #64	@ 0x40
 8008a6c:	d853      	bhi.n	8008b16 <USBD_StdDevReq+0xc6>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00b      	beq.n	8008a8a <USBD_StdDevReq+0x3a>
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	d14f      	bne.n	8008b16 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	4798      	blx	r3
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]
      break;
 8008a88:	e04a      	b.n	8008b20 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	785b      	ldrb	r3, [r3, #1]
 8008a8e:	2b09      	cmp	r3, #9
 8008a90:	d83b      	bhi.n	8008b0a <USBD_StdDevReq+0xba>
 8008a92:	a201      	add	r2, pc, #4	@ (adr r2, 8008a98 <USBD_StdDevReq+0x48>)
 8008a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a98:	08008aed 	.word	0x08008aed
 8008a9c:	08008b01 	.word	0x08008b01
 8008aa0:	08008b0b 	.word	0x08008b0b
 8008aa4:	08008af7 	.word	0x08008af7
 8008aa8:	08008b0b 	.word	0x08008b0b
 8008aac:	08008acb 	.word	0x08008acb
 8008ab0:	08008ac1 	.word	0x08008ac1
 8008ab4:	08008b0b 	.word	0x08008b0b
 8008ab8:	08008ae3 	.word	0x08008ae3
 8008abc:	08008ad5 	.word	0x08008ad5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f9de 	bl	8008e84 <USBD_GetDescriptor>
          break;
 8008ac8:	e024      	b.n	8008b14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fb6d 	bl	80091ac <USBD_SetAddress>
          break;
 8008ad2:	e01f      	b.n	8008b14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fbac 	bl	8009234 <USBD_SetConfig>
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]
          break;
 8008ae0:	e018      	b.n	8008b14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fc4b 	bl	8009380 <USBD_GetConfig>
          break;
 8008aea:	e013      	b.n	8008b14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fc7c 	bl	80093ec <USBD_GetStatus>
          break;
 8008af4:	e00e      	b.n	8008b14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fcab 	bl	8009454 <USBD_SetFeature>
          break;
 8008afe:	e009      	b.n	8008b14 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fcba 	bl	800947c <USBD_ClrFeature>
          break;
 8008b08:	e004      	b.n	8008b14 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fd11 	bl	8009534 <USBD_CtlError>
          break;
 8008b12:	bf00      	nop
      }
      break;
 8008b14:	e004      	b.n	8008b20 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fd0b 	bl	8009534 <USBD_CtlError>
      break;
 8008b1e:	bf00      	nop
  }

  return ret;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop

08008b2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b42:	2b40      	cmp	r3, #64	@ 0x40
 8008b44:	d005      	beq.n	8008b52 <USBD_StdItfReq+0x26>
 8008b46:	2b40      	cmp	r3, #64	@ 0x40
 8008b48:	d82f      	bhi.n	8008baa <USBD_StdItfReq+0x7e>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <USBD_StdItfReq+0x26>
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	d12b      	bne.n	8008baa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d81d      	bhi.n	8008b9c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	889b      	ldrh	r3, [r3, #4]
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d813      	bhi.n	8008b92 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	4798      	blx	r3
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	88db      	ldrh	r3, [r3, #6]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d110      	bne.n	8008ba6 <USBD_StdItfReq+0x7a>
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10d      	bne.n	8008ba6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fd80 	bl	8009690 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b90:	e009      	b.n	8008ba6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fccd 	bl	8009534 <USBD_CtlError>
          break;
 8008b9a:	e004      	b.n	8008ba6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fcc8 	bl	8009534 <USBD_CtlError>
          break;
 8008ba4:	e000      	b.n	8008ba8 <USBD_StdItfReq+0x7c>
          break;
 8008ba6:	bf00      	nop
      }
      break;
 8008ba8:	e004      	b.n	8008bb4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fcc1 	bl	8009534 <USBD_CtlError>
      break;
 8008bb2:	bf00      	nop
  }

  return ret;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b084      	sub	sp, #16
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	889b      	ldrh	r3, [r3, #4]
 8008bd0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bda:	2b40      	cmp	r3, #64	@ 0x40
 8008bdc:	d007      	beq.n	8008bee <USBD_StdEPReq+0x30>
 8008bde:	2b40      	cmp	r3, #64	@ 0x40
 8008be0:	f200 8145 	bhi.w	8008e6e <USBD_StdEPReq+0x2b0>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00c      	beq.n	8008c02 <USBD_StdEPReq+0x44>
 8008be8:	2b20      	cmp	r3, #32
 8008bea:	f040 8140 	bne.w	8008e6e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	4798      	blx	r3
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8008c00:	e13a      	b.n	8008e78 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d007      	beq.n	8008c1a <USBD_StdEPReq+0x5c>
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	f300 8129 	bgt.w	8008e62 <USBD_StdEPReq+0x2a4>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d07f      	beq.n	8008d14 <USBD_StdEPReq+0x156>
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d03c      	beq.n	8008c92 <USBD_StdEPReq+0xd4>
 8008c18:	e123      	b.n	8008e62 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d002      	beq.n	8008c2c <USBD_StdEPReq+0x6e>
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d016      	beq.n	8008c58 <USBD_StdEPReq+0x9a>
 8008c2a:	e02c      	b.n	8008c86 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00d      	beq.n	8008c4e <USBD_StdEPReq+0x90>
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	2b80      	cmp	r3, #128	@ 0x80
 8008c36:	d00a      	beq.n	8008c4e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f003 fdd8 	bl	800c7f2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c42:	2180      	movs	r1, #128	@ 0x80
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f003 fdd4 	bl	800c7f2 <USBD_LL_StallEP>
 8008c4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c4c:	e020      	b.n	8008c90 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fc6f 	bl	8009534 <USBD_CtlError>
              break;
 8008c56:	e01b      	b.n	8008c90 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	885b      	ldrh	r3, [r3, #2]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10e      	bne.n	8008c7e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00b      	beq.n	8008c7e <USBD_StdEPReq+0xc0>
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	2b80      	cmp	r3, #128	@ 0x80
 8008c6a:	d008      	beq.n	8008c7e <USBD_StdEPReq+0xc0>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	88db      	ldrh	r3, [r3, #6]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d104      	bne.n	8008c7e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f003 fdba 	bl	800c7f2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fd06 	bl	8009690 <USBD_CtlSendStatus>

              break;
 8008c84:	e004      	b.n	8008c90 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fc53 	bl	8009534 <USBD_CtlError>
              break;
 8008c8e:	bf00      	nop
          }
          break;
 8008c90:	e0ec      	b.n	8008e6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d002      	beq.n	8008ca4 <USBD_StdEPReq+0xe6>
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d016      	beq.n	8008cd0 <USBD_StdEPReq+0x112>
 8008ca2:	e030      	b.n	8008d06 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00d      	beq.n	8008cc6 <USBD_StdEPReq+0x108>
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
 8008cac:	2b80      	cmp	r3, #128	@ 0x80
 8008cae:	d00a      	beq.n	8008cc6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f003 fd9c 	bl	800c7f2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cba:	2180      	movs	r1, #128	@ 0x80
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f003 fd98 	bl	800c7f2 <USBD_LL_StallEP>
 8008cc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cc4:	e025      	b.n	8008d12 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fc33 	bl	8009534 <USBD_CtlError>
              break;
 8008cce:	e020      	b.n	8008d12 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	885b      	ldrh	r3, [r3, #2]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d11b      	bne.n	8008d10 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d004      	beq.n	8008cec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f003 fda2 	bl	800c830 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fccf 	bl	8009690 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	4798      	blx	r3
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008d04:	e004      	b.n	8008d10 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fc13 	bl	8009534 <USBD_CtlError>
              break;
 8008d0e:	e000      	b.n	8008d12 <USBD_StdEPReq+0x154>
              break;
 8008d10:	bf00      	nop
          }
          break;
 8008d12:	e0ab      	b.n	8008e6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d002      	beq.n	8008d26 <USBD_StdEPReq+0x168>
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d032      	beq.n	8008d8a <USBD_StdEPReq+0x1cc>
 8008d24:	e097      	b.n	8008e56 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d007      	beq.n	8008d3c <USBD_StdEPReq+0x17e>
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	2b80      	cmp	r3, #128	@ 0x80
 8008d30:	d004      	beq.n	8008d3c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fbfd 	bl	8009534 <USBD_CtlError>
                break;
 8008d3a:	e091      	b.n	8008e60 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	da0b      	bge.n	8008d5c <USBD_StdEPReq+0x19e>
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
 8008d46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	3310      	adds	r3, #16
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	4413      	add	r3, r2
 8008d58:	3304      	adds	r3, #4
 8008d5a:	e00b      	b.n	8008d74 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d62:	4613      	mov	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	4413      	add	r3, r2
 8008d72:	3304      	adds	r3, #4
 8008d74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fc47 	bl	8009616 <USBD_CtlSendData>
              break;
 8008d88:	e06a      	b.n	8008e60 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	da11      	bge.n	8008db6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d92:	7bbb      	ldrb	r3, [r7, #14]
 8008d94:	f003 020f 	and.w	r2, r3, #15
 8008d98:	6879      	ldr	r1, [r7, #4]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	440b      	add	r3, r1
 8008da4:	3324      	adds	r3, #36	@ 0x24
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d117      	bne.n	8008ddc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fbc0 	bl	8009534 <USBD_CtlError>
                  break;
 8008db4:	e054      	b.n	8008e60 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	f003 020f 	and.w	r2, r3, #15
 8008dbc:	6879      	ldr	r1, [r7, #4]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	440b      	add	r3, r1
 8008dc8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d104      	bne.n	8008ddc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fbad 	bl	8009534 <USBD_CtlError>
                  break;
 8008dda:	e041      	b.n	8008e60 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ddc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	da0b      	bge.n	8008dfc <USBD_StdEPReq+0x23e>
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	3310      	adds	r3, #16
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	4413      	add	r3, r2
 8008df8:	3304      	adds	r3, #4
 8008dfa:	e00b      	b.n	8008e14 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	4413      	add	r3, r2
 8008e12:	3304      	adds	r3, #4
 8008e14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d002      	beq.n	8008e22 <USBD_StdEPReq+0x264>
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	2b80      	cmp	r3, #128	@ 0x80
 8008e20:	d103      	bne.n	8008e2a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	e00e      	b.n	8008e48 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f003 fd1d 	bl	800c86e <USBD_LL_IsStallEP>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	e002      	b.n	8008e48 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2200      	movs	r2, #0
 8008e46:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fbe1 	bl	8009616 <USBD_CtlSendData>
              break;
 8008e54:	e004      	b.n	8008e60 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fb6b 	bl	8009534 <USBD_CtlError>
              break;
 8008e5e:	bf00      	nop
          }
          break;
 8008e60:	e004      	b.n	8008e6c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fb65 	bl	8009534 <USBD_CtlError>
          break;
 8008e6a:	bf00      	nop
      }
      break;
 8008e6c:	e004      	b.n	8008e78 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fb5f 	bl	8009534 <USBD_CtlError>
      break;
 8008e76:	bf00      	nop
  }

  return ret;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	885b      	ldrh	r3, [r3, #2]
 8008e9e:	0a1b      	lsrs	r3, r3, #8
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	2b0e      	cmp	r3, #14
 8008ea6:	f200 8152 	bhi.w	800914e <USBD_GetDescriptor+0x2ca>
 8008eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb0 <USBD_GetDescriptor+0x2c>)
 8008eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb0:	08008f21 	.word	0x08008f21
 8008eb4:	08008f39 	.word	0x08008f39
 8008eb8:	08008f79 	.word	0x08008f79
 8008ebc:	0800914f 	.word	0x0800914f
 8008ec0:	0800914f 	.word	0x0800914f
 8008ec4:	080090ef 	.word	0x080090ef
 8008ec8:	0800911b 	.word	0x0800911b
 8008ecc:	0800914f 	.word	0x0800914f
 8008ed0:	0800914f 	.word	0x0800914f
 8008ed4:	0800914f 	.word	0x0800914f
 8008ed8:	0800914f 	.word	0x0800914f
 8008edc:	0800914f 	.word	0x0800914f
 8008ee0:	0800914f 	.word	0x0800914f
 8008ee4:	0800914f 	.word	0x0800914f
 8008ee8:	08008eed 	.word	0x08008eed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ef2:	69db      	ldr	r3, [r3, #28]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	7c12      	ldrb	r2, [r2, #16]
 8008f04:	f107 0108 	add.w	r1, r7, #8
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f0e:	e126      	b.n	800915e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fb0e 	bl	8009534 <USBD_CtlError>
        err++;
 8008f18:	7afb      	ldrb	r3, [r7, #11]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	72fb      	strb	r3, [r7, #11]
      break;
 8008f1e:	e11e      	b.n	800915e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	7c12      	ldrb	r2, [r2, #16]
 8008f2c:	f107 0108 	add.w	r1, r7, #8
 8008f30:	4610      	mov	r0, r2
 8008f32:	4798      	blx	r3
 8008f34:	60f8      	str	r0, [r7, #12]
      break;
 8008f36:	e112      	b.n	800915e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	7c1b      	ldrb	r3, [r3, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10d      	bne.n	8008f5c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f48:	f107 0208 	add.w	r2, r7, #8
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4798      	blx	r3
 8008f50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	3301      	adds	r3, #1
 8008f56:	2202      	movs	r2, #2
 8008f58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f5a:	e100      	b.n	800915e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f64:	f107 0208 	add.w	r2, r7, #8
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4798      	blx	r3
 8008f6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3301      	adds	r3, #1
 8008f72:	2202      	movs	r2, #2
 8008f74:	701a      	strb	r2, [r3, #0]
      break;
 8008f76:	e0f2      	b.n	800915e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	885b      	ldrh	r3, [r3, #2]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b05      	cmp	r3, #5
 8008f80:	f200 80ac 	bhi.w	80090dc <USBD_GetDescriptor+0x258>
 8008f84:	a201      	add	r2, pc, #4	@ (adr r2, 8008f8c <USBD_GetDescriptor+0x108>)
 8008f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8a:	bf00      	nop
 8008f8c:	08008fa5 	.word	0x08008fa5
 8008f90:	08008fd9 	.word	0x08008fd9
 8008f94:	0800900d 	.word	0x0800900d
 8008f98:	08009041 	.word	0x08009041
 8008f9c:	08009075 	.word	0x08009075
 8008fa0:	080090a9 	.word	0x080090a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00b      	beq.n	8008fc8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	7c12      	ldrb	r2, [r2, #16]
 8008fbc:	f107 0108 	add.w	r1, r7, #8
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4798      	blx	r3
 8008fc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fc6:	e091      	b.n	80090ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fab2 	bl	8009534 <USBD_CtlError>
            err++;
 8008fd0:	7afb      	ldrb	r3, [r7, #11]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fd6:	e089      	b.n	80090ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00b      	beq.n	8008ffc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	7c12      	ldrb	r2, [r2, #16]
 8008ff0:	f107 0108 	add.w	r1, r7, #8
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	4798      	blx	r3
 8008ff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ffa:	e077      	b.n	80090ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fa98 	bl	8009534 <USBD_CtlError>
            err++;
 8009004:	7afb      	ldrb	r3, [r7, #11]
 8009006:	3301      	adds	r3, #1
 8009008:	72fb      	strb	r3, [r7, #11]
          break;
 800900a:	e06f      	b.n	80090ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	7c12      	ldrb	r2, [r2, #16]
 8009024:	f107 0108 	add.w	r1, r7, #8
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
 800902c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800902e:	e05d      	b.n	80090ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa7e 	bl	8009534 <USBD_CtlError>
            err++;
 8009038:	7afb      	ldrb	r3, [r7, #11]
 800903a:	3301      	adds	r3, #1
 800903c:	72fb      	strb	r3, [r7, #11]
          break;
 800903e:	e055      	b.n	80090ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	7c12      	ldrb	r2, [r2, #16]
 8009058:	f107 0108 	add.w	r1, r7, #8
 800905c:	4610      	mov	r0, r2
 800905e:	4798      	blx	r3
 8009060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009062:	e043      	b.n	80090ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fa64 	bl	8009534 <USBD_CtlError>
            err++;
 800906c:	7afb      	ldrb	r3, [r7, #11]
 800906e:	3301      	adds	r3, #1
 8009070:	72fb      	strb	r3, [r7, #11]
          break;
 8009072:	e03b      	b.n	80090ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00b      	beq.n	8009098 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	7c12      	ldrb	r2, [r2, #16]
 800908c:	f107 0108 	add.w	r1, r7, #8
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
 8009094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009096:	e029      	b.n	80090ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fa4a 	bl	8009534 <USBD_CtlError>
            err++;
 80090a0:	7afb      	ldrb	r3, [r7, #11]
 80090a2:	3301      	adds	r3, #1
 80090a4:	72fb      	strb	r3, [r7, #11]
          break;
 80090a6:	e021      	b.n	80090ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00b      	beq.n	80090cc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	7c12      	ldrb	r2, [r2, #16]
 80090c0:	f107 0108 	add.w	r1, r7, #8
 80090c4:	4610      	mov	r0, r2
 80090c6:	4798      	blx	r3
 80090c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ca:	e00f      	b.n	80090ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa30 	bl	8009534 <USBD_CtlError>
            err++;
 80090d4:	7afb      	ldrb	r3, [r7, #11]
 80090d6:	3301      	adds	r3, #1
 80090d8:	72fb      	strb	r3, [r7, #11]
          break;
 80090da:	e007      	b.n	80090ec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa28 	bl	8009534 <USBD_CtlError>
          err++;
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	3301      	adds	r3, #1
 80090e8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80090ea:	bf00      	nop
      }
      break;
 80090ec:	e037      	b.n	800915e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	7c1b      	ldrb	r3, [r3, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090fe:	f107 0208 	add.w	r2, r7, #8
 8009102:	4610      	mov	r0, r2
 8009104:	4798      	blx	r3
 8009106:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009108:	e029      	b.n	800915e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fa11 	bl	8009534 <USBD_CtlError>
        err++;
 8009112:	7afb      	ldrb	r3, [r7, #11]
 8009114:	3301      	adds	r3, #1
 8009116:	72fb      	strb	r3, [r7, #11]
      break;
 8009118:	e021      	b.n	800915e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	7c1b      	ldrb	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10d      	bne.n	800913e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800912a:	f107 0208 	add.w	r2, r7, #8
 800912e:	4610      	mov	r0, r2
 8009130:	4798      	blx	r3
 8009132:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	3301      	adds	r3, #1
 8009138:	2207      	movs	r2, #7
 800913a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800913c:	e00f      	b.n	800915e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f9f7 	bl	8009534 <USBD_CtlError>
        err++;
 8009146:	7afb      	ldrb	r3, [r7, #11]
 8009148:	3301      	adds	r3, #1
 800914a:	72fb      	strb	r3, [r7, #11]
      break;
 800914c:	e007      	b.n	800915e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f9ef 	bl	8009534 <USBD_CtlError>
      err++;
 8009156:	7afb      	ldrb	r3, [r7, #11]
 8009158:	3301      	adds	r3, #1
 800915a:	72fb      	strb	r3, [r7, #11]
      break;
 800915c:	bf00      	nop
  }

  if (err != 0U)
 800915e:	7afb      	ldrb	r3, [r7, #11]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d11e      	bne.n	80091a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	88db      	ldrh	r3, [r3, #6]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d016      	beq.n	800919a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800916c:	893b      	ldrh	r3, [r7, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00e      	beq.n	8009190 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	88da      	ldrh	r2, [r3, #6]
 8009176:	893b      	ldrh	r3, [r7, #8]
 8009178:	4293      	cmp	r3, r2
 800917a:	bf28      	it	cs
 800917c:	4613      	movcs	r3, r2
 800917e:	b29b      	uxth	r3, r3
 8009180:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009182:	893b      	ldrh	r3, [r7, #8]
 8009184:	461a      	mov	r2, r3
 8009186:	68f9      	ldr	r1, [r7, #12]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fa44 	bl	8009616 <USBD_CtlSendData>
 800918e:	e009      	b.n	80091a4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f9ce 	bl	8009534 <USBD_CtlError>
 8009198:	e004      	b.n	80091a4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fa78 	bl	8009690 <USBD_CtlSendStatus>
 80091a0:	e000      	b.n	80091a4 <USBD_GetDescriptor+0x320>
    return;
 80091a2:	bf00      	nop
  }
}
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop

080091ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	889b      	ldrh	r3, [r3, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d131      	bne.n	8009222 <USBD_SetAddress+0x76>
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	88db      	ldrh	r3, [r3, #6]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d12d      	bne.n	8009222 <USBD_SetAddress+0x76>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	885b      	ldrh	r3, [r3, #2]
 80091ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80091cc:	d829      	bhi.n	8009222 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	885b      	ldrh	r3, [r3, #2]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d104      	bne.n	80091f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f9a3 	bl	8009534 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ee:	e01d      	b.n	800922c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	7bfa      	ldrb	r2, [r7, #15]
 80091f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f003 fb62 	bl	800c8c6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fa44 	bl	8009690 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d004      	beq.n	8009218 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2202      	movs	r2, #2
 8009212:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009216:	e009      	b.n	800922c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009220:	e004      	b.n	800922c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f985 	bl	8009534 <USBD_CtlError>
  }
}
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	885b      	ldrh	r3, [r3, #2]
 8009246:	b2da      	uxtb	r2, r3
 8009248:	4b4c      	ldr	r3, [pc, #304]	@ (800937c <USBD_SetConfig+0x148>)
 800924a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800924c:	4b4b      	ldr	r3, [pc, #300]	@ (800937c <USBD_SetConfig+0x148>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d905      	bls.n	8009260 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f96c 	bl	8009534 <USBD_CtlError>
    return USBD_FAIL;
 800925c:	2303      	movs	r3, #3
 800925e:	e088      	b.n	8009372 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b02      	cmp	r3, #2
 800926a:	d002      	beq.n	8009272 <USBD_SetConfig+0x3e>
 800926c:	2b03      	cmp	r3, #3
 800926e:	d025      	beq.n	80092bc <USBD_SetConfig+0x88>
 8009270:	e071      	b.n	8009356 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009272:	4b42      	ldr	r3, [pc, #264]	@ (800937c <USBD_SetConfig+0x148>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d01c      	beq.n	80092b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800927a:	4b40      	ldr	r3, [pc, #256]	@ (800937c <USBD_SetConfig+0x148>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009284:	4b3d      	ldr	r3, [pc, #244]	@ (800937c <USBD_SetConfig+0x148>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff f991 	bl	80085b2 <USBD_SetClassConfig>
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d004      	beq.n	80092a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f949 	bl	8009534 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092a2:	e065      	b.n	8009370 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f9f3 	bl	8009690 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2203      	movs	r2, #3
 80092ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80092b2:	e05d      	b.n	8009370 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f9eb 	bl	8009690 <USBD_CtlSendStatus>
      break;
 80092ba:	e059      	b.n	8009370 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092bc:	4b2f      	ldr	r3, [pc, #188]	@ (800937c <USBD_SetConfig+0x148>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d112      	bne.n	80092ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80092cc:	4b2b      	ldr	r3, [pc, #172]	@ (800937c <USBD_SetConfig+0x148>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	461a      	mov	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092d6:	4b29      	ldr	r3, [pc, #164]	@ (800937c <USBD_SetConfig+0x148>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff f984 	bl	80085ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f9d4 	bl	8009690 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092e8:	e042      	b.n	8009370 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80092ea:	4b24      	ldr	r3, [pc, #144]	@ (800937c <USBD_SetConfig+0x148>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d02a      	beq.n	800934e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff f972 	bl	80085ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009306:	4b1d      	ldr	r3, [pc, #116]	@ (800937c <USBD_SetConfig+0x148>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009310:	4b1a      	ldr	r3, [pc, #104]	@ (800937c <USBD_SetConfig+0x148>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff f94b 	bl	80085b2 <USBD_SetClassConfig>
 800931c:	4603      	mov	r3, r0
 800931e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00f      	beq.n	8009346 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f903 	bl	8009534 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff f957 	bl	80085ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009344:	e014      	b.n	8009370 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f9a2 	bl	8009690 <USBD_CtlSendStatus>
      break;
 800934c:	e010      	b.n	8009370 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f99e 	bl	8009690 <USBD_CtlSendStatus>
      break;
 8009354:	e00c      	b.n	8009370 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f8eb 	bl	8009534 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800935e:	4b07      	ldr	r3, [pc, #28]	@ (800937c <USBD_SetConfig+0x148>)
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff f940 	bl	80085ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800936a:	2303      	movs	r3, #3
 800936c:	73fb      	strb	r3, [r7, #15]
      break;
 800936e:	bf00      	nop
  }

  return ret;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20000279 	.word	0x20000279

08009380 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	88db      	ldrh	r3, [r3, #6]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d004      	beq.n	800939c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f8cd 	bl	8009534 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800939a:	e023      	b.n	80093e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	dc02      	bgt.n	80093ae <USBD_GetConfig+0x2e>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	dc03      	bgt.n	80093b4 <USBD_GetConfig+0x34>
 80093ac:	e015      	b.n	80093da <USBD_GetConfig+0x5a>
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d00b      	beq.n	80093ca <USBD_GetConfig+0x4a>
 80093b2:	e012      	b.n	80093da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	3308      	adds	r3, #8
 80093be:	2201      	movs	r2, #1
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f927 	bl	8009616 <USBD_CtlSendData>
        break;
 80093c8:	e00c      	b.n	80093e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	3304      	adds	r3, #4
 80093ce:	2201      	movs	r2, #1
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f91f 	bl	8009616 <USBD_CtlSendData>
        break;
 80093d8:	e004      	b.n	80093e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f8a9 	bl	8009534 <USBD_CtlError>
        break;
 80093e2:	bf00      	nop
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	2b02      	cmp	r3, #2
 8009402:	d81e      	bhi.n	8009442 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	88db      	ldrh	r3, [r3, #6]
 8009408:	2b02      	cmp	r3, #2
 800940a:	d004      	beq.n	8009416 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f890 	bl	8009534 <USBD_CtlError>
        break;
 8009414:	e01a      	b.n	800944c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009422:	2b00      	cmp	r3, #0
 8009424:	d005      	beq.n	8009432 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	f043 0202 	orr.w	r2, r3, #2
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	330c      	adds	r3, #12
 8009436:	2202      	movs	r2, #2
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f8eb 	bl	8009616 <USBD_CtlSendData>
      break;
 8009440:	e004      	b.n	800944c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f875 	bl	8009534 <USBD_CtlError>
      break;
 800944a:	bf00      	nop
  }
}
 800944c:	bf00      	nop
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	885b      	ldrh	r3, [r3, #2]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d106      	bne.n	8009474 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f90e 	bl	8009690 <USBD_CtlSendStatus>
  }
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800948c:	b2db      	uxtb	r3, r3
 800948e:	3b01      	subs	r3, #1
 8009490:	2b02      	cmp	r3, #2
 8009492:	d80b      	bhi.n	80094ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	885b      	ldrh	r3, [r3, #2]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d10c      	bne.n	80094b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f8f3 	bl	8009690 <USBD_CtlSendStatus>
      }
      break;
 80094aa:	e004      	b.n	80094b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f840 	bl	8009534 <USBD_CtlError>
      break;
 80094b4:	e000      	b.n	80094b8 <USBD_ClrFeature+0x3c>
      break;
 80094b6:	bf00      	nop
  }
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	781a      	ldrb	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3301      	adds	r3, #1
 80094da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	781a      	ldrb	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	3301      	adds	r3, #1
 80094e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f7ff fa91 	bl	8008a12 <SWAPBYTE>
 80094f0:	4603      	mov	r3, r0
 80094f2:	461a      	mov	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3301      	adds	r3, #1
 80094fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3301      	adds	r3, #1
 8009502:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f7ff fa84 	bl	8008a12 <SWAPBYTE>
 800950a:	4603      	mov	r3, r0
 800950c:	461a      	mov	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3301      	adds	r3, #1
 8009516:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3301      	adds	r3, #1
 800951c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f7ff fa77 	bl	8008a12 <SWAPBYTE>
 8009524:	4603      	mov	r3, r0
 8009526:	461a      	mov	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	80da      	strh	r2, [r3, #6]
}
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800953e:	2180      	movs	r1, #128	@ 0x80
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f003 f956 	bl	800c7f2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009546:	2100      	movs	r1, #0
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f003 f952 	bl	800c7f2 <USBD_LL_StallEP>
}
 800954e:	bf00      	nop
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	60b9      	str	r1, [r7, #8]
 8009560:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d036      	beq.n	80095da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009570:	6938      	ldr	r0, [r7, #16]
 8009572:	f000 f836 	bl	80095e2 <USBD_GetLen>
 8009576:	4603      	mov	r3, r0
 8009578:	3301      	adds	r3, #1
 800957a:	b29b      	uxth	r3, r3
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	b29a      	uxth	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	4413      	add	r3, r2
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	7812      	ldrb	r2, [r2, #0]
 800958e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	3301      	adds	r3, #1
 8009594:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	4413      	add	r3, r2
 800959c:	2203      	movs	r2, #3
 800959e:	701a      	strb	r2, [r3, #0]
  idx++;
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
 80095a2:	3301      	adds	r3, #1
 80095a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095a6:	e013      	b.n	80095d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	4413      	add	r3, r2
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	7812      	ldrb	r2, [r2, #0]
 80095b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	3301      	adds	r3, #1
 80095b8:	613b      	str	r3, [r7, #16]
    idx++;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	3301      	adds	r3, #1
 80095be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	4413      	add	r3, r2
 80095c6:	2200      	movs	r2, #0
 80095c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	3301      	adds	r3, #1
 80095ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e7      	bne.n	80095a8 <USBD_GetString+0x52>
 80095d8:	e000      	b.n	80095dc <USBD_GetString+0x86>
    return;
 80095da:	bf00      	nop
  }
}
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b085      	sub	sp, #20
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095f2:	e005      	b.n	8009600 <USBD_GetLen+0x1e>
  {
    len++;
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	3301      	adds	r3, #1
 80095f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	3301      	adds	r3, #1
 80095fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1f5      	bne.n	80095f4 <USBD_GetLen+0x12>
  }

  return len;
 8009608:	7bfb      	ldrb	r3, [r7, #15]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2202      	movs	r2, #2
 8009626:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	2100      	movs	r1, #0
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f003 f961 	bl	800c904 <USBD_LL_Transmit>

  return USBD_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	2100      	movs	r1, #0
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f003 f950 	bl	800c904 <USBD_LL_Transmit>

  return USBD_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b084      	sub	sp, #16
 8009672:	af00      	add	r7, sp, #0
 8009674:	60f8      	str	r0, [r7, #12]
 8009676:	60b9      	str	r1, [r7, #8]
 8009678:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	2100      	movs	r1, #0
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f003 f960 	bl	800c946 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2204      	movs	r2, #4
 800969c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096a0:	2300      	movs	r3, #0
 80096a2:	2200      	movs	r2, #0
 80096a4:	2100      	movs	r1, #0
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f003 f92c 	bl	800c904 <USBD_LL_Transmit>

  return USBD_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2205      	movs	r2, #5
 80096c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096c6:	2300      	movs	r3, #0
 80096c8:	2200      	movs	r2, #0
 80096ca:	2100      	movs	r1, #0
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f003 f93a 	bl	800c946 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	4613      	mov	r3, r2
 80096e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80096ea:	2301      	movs	r3, #1
 80096ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80096f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009770 <FATFS_LinkDriverEx+0x94>)
 80096f4:	7a5b      	ldrb	r3, [r3, #9]
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d131      	bne.n	8009760 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80096fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009770 <FATFS_LinkDriverEx+0x94>)
 80096fe:	7a5b      	ldrb	r3, [r3, #9]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	461a      	mov	r2, r3
 8009704:	4b1a      	ldr	r3, [pc, #104]	@ (8009770 <FATFS_LinkDriverEx+0x94>)
 8009706:	2100      	movs	r1, #0
 8009708:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800970a:	4b19      	ldr	r3, [pc, #100]	@ (8009770 <FATFS_LinkDriverEx+0x94>)
 800970c:	7a5b      	ldrb	r3, [r3, #9]
 800970e:	b2db      	uxtb	r3, r3
 8009710:	4a17      	ldr	r2, [pc, #92]	@ (8009770 <FATFS_LinkDriverEx+0x94>)
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800971a:	4b15      	ldr	r3, [pc, #84]	@ (8009770 <FATFS_LinkDriverEx+0x94>)
 800971c:	7a5b      	ldrb	r3, [r3, #9]
 800971e:	b2db      	uxtb	r3, r3
 8009720:	461a      	mov	r2, r3
 8009722:	4b13      	ldr	r3, [pc, #76]	@ (8009770 <FATFS_LinkDriverEx+0x94>)
 8009724:	4413      	add	r3, r2
 8009726:	79fa      	ldrb	r2, [r7, #7]
 8009728:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800972a:	4b11      	ldr	r3, [pc, #68]	@ (8009770 <FATFS_LinkDriverEx+0x94>)
 800972c:	7a5b      	ldrb	r3, [r3, #9]
 800972e:	b2db      	uxtb	r3, r3
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	b2d1      	uxtb	r1, r2
 8009734:	4a0e      	ldr	r2, [pc, #56]	@ (8009770 <FATFS_LinkDriverEx+0x94>)
 8009736:	7251      	strb	r1, [r2, #9]
 8009738:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800973a:	7dbb      	ldrb	r3, [r7, #22]
 800973c:	3330      	adds	r3, #48	@ 0x30
 800973e:	b2da      	uxtb	r2, r3
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	3301      	adds	r3, #1
 8009748:	223a      	movs	r2, #58	@ 0x3a
 800974a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	3302      	adds	r3, #2
 8009750:	222f      	movs	r2, #47	@ 0x2f
 8009752:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	3303      	adds	r3, #3
 8009758:	2200      	movs	r2, #0
 800975a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009760:	7dfb      	ldrb	r3, [r7, #23]
}
 8009762:	4618      	mov	r0, r3
 8009764:	371c      	adds	r7, #28
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	2000027c 	.word	0x2000027c

08009774 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800977e:	2200      	movs	r2, #0
 8009780:	6839      	ldr	r1, [r7, #0]
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7ff ffaa 	bl	80096dc <FATFS_LinkDriverEx>
 8009788:	4603      	mov	r3, r0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009792:	b480      	push	{r7}
 8009794:	b085      	sub	sp, #20
 8009796:	af00      	add	r7, sp, #0
 8009798:	4603      	mov	r3, r0
 800979a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800979c:	2300      	movs	r3, #0
 800979e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80097a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097a4:	2b84      	cmp	r3, #132	@ 0x84
 80097a6:	d005      	beq.n	80097b4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80097a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4413      	add	r3, r2
 80097b0:	3303      	adds	r3, #3
 80097b2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80097b4:	68fb      	ldr	r3, [r7, #12]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80097c6:	f000 ff25 	bl	800a614 <vTaskStartScheduler>
  
  return osOK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80097d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685c      	ldr	r4, [r3, #4]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097e6:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff ffcf 	bl	8009792 <makeFreeRtosPriority>
 80097f4:	4602      	mov	r2, r0
 80097f6:	f107 030c 	add.w	r3, r7, #12
 80097fa:	9301      	str	r3, [sp, #4]
 80097fc:	9200      	str	r2, [sp, #0]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	4632      	mov	r2, r6
 8009802:	4629      	mov	r1, r5
 8009804:	4620      	mov	r0, r4
 8009806:	f000 fd83 	bl	800a310 <xTaskCreate>
 800980a:	4603      	mov	r3, r0
 800980c:	2b01      	cmp	r3, #1
 800980e:	d001      	beq.n	8009814 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009810:	2300      	movs	r3, #0
 8009812:	e000      	b.n	8009816 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009814:	68fb      	ldr	r3, [r7, #12]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800981e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <osDelay+0x16>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	e000      	b.n	8009836 <osDelay+0x18>
 8009834:	2301      	movs	r3, #1
 8009836:	4618      	mov	r0, r3
 8009838:	f000 feb6 	bl	800a5a8 <vTaskDelay>
  
  return osOK;
 800983c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f103 0208 	add.w	r2, r3, #8
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f04f 32ff 	mov.w	r2, #4294967295
 800985e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f103 0208 	add.w	r2, r3, #8
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f103 0208 	add.w	r2, r3, #8
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800987a:	bf00      	nop
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009886:	b480      	push	{r7}
 8009888:	b083      	sub	sp, #12
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	689a      	ldr	r2, [r3, #8]
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	601a      	str	r2, [r3, #0]
}
 80098dc:	bf00      	nop
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fe:	d103      	bne.n	8009908 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	60fb      	str	r3, [r7, #12]
 8009906:	e00c      	b.n	8009922 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3308      	adds	r3, #8
 800990c:	60fb      	str	r3, [r7, #12]
 800990e:	e002      	b.n	8009916 <vListInsert+0x2e>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	60fb      	str	r3, [r7, #12]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	429a      	cmp	r2, r3
 8009920:	d2f6      	bcs.n	8009910 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	685a      	ldr	r2, [r3, #4]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	601a      	str	r2, [r3, #0]
}
 800994e:	bf00      	nop
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800995a:	b480      	push	{r7}
 800995c:	b085      	sub	sp, #20
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	6892      	ldr	r2, [r2, #8]
 8009970:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	6852      	ldr	r2, [r2, #4]
 800997a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	429a      	cmp	r2, r3
 8009984:	d103      	bne.n	800998e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	689a      	ldr	r2, [r3, #8]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	1e5a      	subs	r2, r3, #1
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
	...

080099b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10b      	bne.n	80099dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80099d6:	bf00      	nop
 80099d8:	bf00      	nop
 80099da:	e7fd      	b.n	80099d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80099dc:	f001 ff9c 	bl	800b918 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099e8:	68f9      	ldr	r1, [r7, #12]
 80099ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80099ec:	fb01 f303 	mul.w	r3, r1, r3
 80099f0:	441a      	add	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	68f9      	ldr	r1, [r7, #12]
 8009a10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a12:	fb01 f303 	mul.w	r3, r1, r3
 8009a16:	441a      	add	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	22ff      	movs	r2, #255	@ 0xff
 8009a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	22ff      	movs	r2, #255	@ 0xff
 8009a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d114      	bne.n	8009a5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d01a      	beq.n	8009a70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3310      	adds	r3, #16
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f001 f86c 	bl	800ab1c <xTaskRemoveFromEventList>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d012      	beq.n	8009a70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a80 <xQueueGenericReset+0xd0>)
 8009a4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	e009      	b.n	8009a70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3310      	adds	r3, #16
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff fef0 	bl	8009846 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3324      	adds	r3, #36	@ 0x24
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff feeb 	bl	8009846 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a70:	f001 ff84 	bl	800b97c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a74:	2301      	movs	r3, #1
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	e000ed04 	.word	0xe000ed04

08009a84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08a      	sub	sp, #40	@ 0x28
 8009a88:	af02      	add	r7, sp, #8
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10b      	bne.n	8009ab0 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9c:	f383 8811 	msr	BASEPRI, r3
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	613b      	str	r3, [r7, #16]
}
 8009aaa:	bf00      	nop
 8009aac:	bf00      	nop
 8009aae:	e7fd      	b.n	8009aac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	fb02 f303 	mul.w	r3, r2, r3
 8009ab8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	3348      	adds	r3, #72	@ 0x48
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f002 f84c 	bl	800bb5c <pvPortMalloc>
 8009ac4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00d      	beq.n	8009ae8 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	3348      	adds	r3, #72	@ 0x48
 8009ad4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ad6:	79fa      	ldrb	r2, [r7, #7]
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	4613      	mov	r3, r2
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	68b9      	ldr	r1, [r7, #8]
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 f805 	bl	8009af2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ae8:	69bb      	ldr	r3, [r7, #24]
	}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3720      	adds	r7, #32
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b084      	sub	sp, #16
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	60f8      	str	r0, [r7, #12]
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	607a      	str	r2, [r7, #4]
 8009afe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d103      	bne.n	8009b0e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	69ba      	ldr	r2, [r7, #24]
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	e002      	b.n	8009b14 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b20:	2101      	movs	r1, #1
 8009b22:	69b8      	ldr	r0, [r7, #24]
 8009b24:	f7ff ff44 	bl	80099b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b28:	bf00      	nop
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b08e      	sub	sp, #56	@ 0x38
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10b      	bne.n	8009b64 <xQueueGenericSend+0x34>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b5e:	bf00      	nop
 8009b60:	bf00      	nop
 8009b62:	e7fd      	b.n	8009b60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d103      	bne.n	8009b72 <xQueueGenericSend+0x42>
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <xQueueGenericSend+0x46>
 8009b72:	2301      	movs	r3, #1
 8009b74:	e000      	b.n	8009b78 <xQueueGenericSend+0x48>
 8009b76:	2300      	movs	r3, #0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10b      	bne.n	8009b94 <xQueueGenericSend+0x64>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b8e:	bf00      	nop
 8009b90:	bf00      	nop
 8009b92:	e7fd      	b.n	8009b90 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d103      	bne.n	8009ba2 <xQueueGenericSend+0x72>
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d101      	bne.n	8009ba6 <xQueueGenericSend+0x76>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e000      	b.n	8009ba8 <xQueueGenericSend+0x78>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10b      	bne.n	8009bc4 <xQueueGenericSend+0x94>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	623b      	str	r3, [r7, #32]
}
 8009bbe:	bf00      	nop
 8009bc0:	bf00      	nop
 8009bc2:	e7fd      	b.n	8009bc0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bc4:	f001 f950 	bl	800ae68 <xTaskGetSchedulerState>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d102      	bne.n	8009bd4 <xQueueGenericSend+0xa4>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <xQueueGenericSend+0xa8>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e000      	b.n	8009bda <xQueueGenericSend+0xaa>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10b      	bne.n	8009bf6 <xQueueGenericSend+0xc6>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	61fb      	str	r3, [r7, #28]
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	e7fd      	b.n	8009bf2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bf6:	f001 fe8f 	bl	800b918 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d302      	bcc.n	8009c0c <xQueueGenericSend+0xdc>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d129      	bne.n	8009c60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	68b9      	ldr	r1, [r7, #8]
 8009c10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c12:	f000 fa0f 	bl	800a034 <prvCopyDataToQueue>
 8009c16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d010      	beq.n	8009c42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c22:	3324      	adds	r3, #36	@ 0x24
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 ff79 	bl	800ab1c <xTaskRemoveFromEventList>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d013      	beq.n	8009c58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c30:	4b3f      	ldr	r3, [pc, #252]	@ (8009d30 <xQueueGenericSend+0x200>)
 8009c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	e00a      	b.n	8009c58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d007      	beq.n	8009c58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c48:	4b39      	ldr	r3, [pc, #228]	@ (8009d30 <xQueueGenericSend+0x200>)
 8009c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c58:	f001 fe90 	bl	800b97c <vPortExitCritical>
				return pdPASS;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e063      	b.n	8009d28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d103      	bne.n	8009c6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c66:	f001 fe89 	bl	800b97c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	e05c      	b.n	8009d28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d106      	bne.n	8009c82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c74:	f107 0314 	add.w	r3, r7, #20
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 ffb3 	bl	800abe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c82:	f001 fe7b 	bl	800b97c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c86:	f000 fd1d 	bl	800a6c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c8a:	f001 fe45 	bl	800b918 <vPortEnterCritical>
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c94:	b25b      	sxtb	r3, r3
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9a:	d103      	bne.n	8009ca4 <xQueueGenericSend+0x174>
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009caa:	b25b      	sxtb	r3, r3
 8009cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb0:	d103      	bne.n	8009cba <xQueueGenericSend+0x18a>
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cba:	f001 fe5f 	bl	800b97c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cbe:	1d3a      	adds	r2, r7, #4
 8009cc0:	f107 0314 	add.w	r3, r7, #20
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 ffa2 	bl	800ac10 <xTaskCheckForTimeOut>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d124      	bne.n	8009d1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009cd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cd4:	f000 faa6 	bl	800a224 <prvIsQueueFull>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d018      	beq.n	8009d10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce0:	3310      	adds	r3, #16
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 fec6 	bl	800aa78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009cec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cee:	f000 fa31 	bl	800a154 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009cf2:	f000 fcf5 	bl	800a6e0 <xTaskResumeAll>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f47f af7c 	bne.w	8009bf6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8009d30 <xQueueGenericSend+0x200>)
 8009d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	e772      	b.n	8009bf6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d12:	f000 fa1f 	bl	800a154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d16:	f000 fce3 	bl	800a6e0 <xTaskResumeAll>
 8009d1a:	e76c      	b.n	8009bf6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d1e:	f000 fa19 	bl	800a154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d22:	f000 fcdd 	bl	800a6e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009d26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3738      	adds	r7, #56	@ 0x38
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	e000ed04 	.word	0xe000ed04

08009d34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b090      	sub	sp, #64	@ 0x40
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
 8009d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10b      	bne.n	8009d64 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009d5e:	bf00      	nop
 8009d60:	bf00      	nop
 8009d62:	e7fd      	b.n	8009d60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d103      	bne.n	8009d72 <xQueueGenericSendFromISR+0x3e>
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <xQueueGenericSendFromISR+0x42>
 8009d72:	2301      	movs	r3, #1
 8009d74:	e000      	b.n	8009d78 <xQueueGenericSendFromISR+0x44>
 8009d76:	2300      	movs	r3, #0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10b      	bne.n	8009d94 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d8e:	bf00      	nop
 8009d90:	bf00      	nop
 8009d92:	e7fd      	b.n	8009d90 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d103      	bne.n	8009da2 <xQueueGenericSendFromISR+0x6e>
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d101      	bne.n	8009da6 <xQueueGenericSendFromISR+0x72>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <xQueueGenericSendFromISR+0x74>
 8009da6:	2300      	movs	r3, #0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10b      	bne.n	8009dc4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	623b      	str	r3, [r7, #32]
}
 8009dbe:	bf00      	nop
 8009dc0:	bf00      	nop
 8009dc2:	e7fd      	b.n	8009dc0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dc4:	f001 fe88 	bl	800bad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009dc8:	f3ef 8211 	mrs	r2, BASEPRI
 8009dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	61fa      	str	r2, [r7, #28]
 8009dde:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009de0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009de2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d302      	bcc.n	8009df6 <xQueueGenericSendFromISR+0xc2>
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d12f      	bne.n	8009e56 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e0c:	f000 f912 	bl	800a034 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e10:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e18:	d112      	bne.n	8009e40 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d016      	beq.n	8009e50 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e24:	3324      	adds	r3, #36	@ 0x24
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 fe78 	bl	800ab1c <xTaskRemoveFromEventList>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00e      	beq.n	8009e50 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00b      	beq.n	8009e50 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e007      	b.n	8009e50 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009e44:	3301      	adds	r3, #1
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	b25a      	sxtb	r2, r3
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009e50:	2301      	movs	r3, #1
 8009e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009e54:	e001      	b.n	8009e5a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e56:	2300      	movs	r3, #0
 8009e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e5c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3740      	adds	r7, #64	@ 0x40
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08c      	sub	sp, #48	@ 0x30
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10b      	bne.n	8009ea2 <xQueueReceive+0x32>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	623b      	str	r3, [r7, #32]
}
 8009e9c:	bf00      	nop
 8009e9e:	bf00      	nop
 8009ea0:	e7fd      	b.n	8009e9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d103      	bne.n	8009eb0 <xQueueReceive+0x40>
 8009ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <xQueueReceive+0x44>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e000      	b.n	8009eb6 <xQueueReceive+0x46>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10b      	bne.n	8009ed2 <xQueueReceive+0x62>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	61fb      	str	r3, [r7, #28]
}
 8009ecc:	bf00      	nop
 8009ece:	bf00      	nop
 8009ed0:	e7fd      	b.n	8009ece <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ed2:	f000 ffc9 	bl	800ae68 <xTaskGetSchedulerState>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <xQueueReceive+0x72>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <xQueueReceive+0x76>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e000      	b.n	8009ee8 <xQueueReceive+0x78>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10b      	bne.n	8009f04 <xQueueReceive+0x94>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	61bb      	str	r3, [r7, #24]
}
 8009efe:	bf00      	nop
 8009f00:	bf00      	nop
 8009f02:	e7fd      	b.n	8009f00 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f04:	f001 fd08 	bl	800b918 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01f      	beq.n	8009f54 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f14:	68b9      	ldr	r1, [r7, #8]
 8009f16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f18:	f000 f8f6 	bl	800a108 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1e:	1e5a      	subs	r2, r3, #1
 8009f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00f      	beq.n	8009f4c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2e:	3310      	adds	r3, #16
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 fdf3 	bl	800ab1c <xTaskRemoveFromEventList>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d007      	beq.n	8009f4c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f3c:	4b3c      	ldr	r3, [pc, #240]	@ (800a030 <xQueueReceive+0x1c0>)
 8009f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f4c:	f001 fd16 	bl	800b97c <vPortExitCritical>
				return pdPASS;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e069      	b.n	800a028 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d103      	bne.n	8009f62 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f5a:	f001 fd0f 	bl	800b97c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	e062      	b.n	800a028 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d106      	bne.n	8009f76 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f68:	f107 0310 	add.w	r3, r7, #16
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f000 fe39 	bl	800abe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f72:	2301      	movs	r3, #1
 8009f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f76:	f001 fd01 	bl	800b97c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f7a:	f000 fba3 	bl	800a6c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f7e:	f001 fccb 	bl	800b918 <vPortEnterCritical>
 8009f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f88:	b25b      	sxtb	r3, r3
 8009f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8e:	d103      	bne.n	8009f98 <xQueueReceive+0x128>
 8009f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f9e:	b25b      	sxtb	r3, r3
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa4:	d103      	bne.n	8009fae <xQueueReceive+0x13e>
 8009fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009fae:	f001 fce5 	bl	800b97c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fb2:	1d3a      	adds	r2, r7, #4
 8009fb4:	f107 0310 	add.w	r3, r7, #16
 8009fb8:	4611      	mov	r1, r2
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 fe28 	bl	800ac10 <xTaskCheckForTimeOut>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d123      	bne.n	800a00e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fc8:	f000 f916 	bl	800a1f8 <prvIsQueueEmpty>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d017      	beq.n	800a002 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd4:	3324      	adds	r3, #36	@ 0x24
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 fd4c 	bl	800aa78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009fe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fe2:	f000 f8b7 	bl	800a154 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009fe6:	f000 fb7b 	bl	800a6e0 <xTaskResumeAll>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d189      	bne.n	8009f04 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009ff0:	4b0f      	ldr	r3, [pc, #60]	@ (800a030 <xQueueReceive+0x1c0>)
 8009ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ff6:	601a      	str	r2, [r3, #0]
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	e780      	b.n	8009f04 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a004:	f000 f8a6 	bl	800a154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a008:	f000 fb6a 	bl	800a6e0 <xTaskResumeAll>
 800a00c:	e77a      	b.n	8009f04 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a00e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a010:	f000 f8a0 	bl	800a154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a014:	f000 fb64 	bl	800a6e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a01a:	f000 f8ed 	bl	800a1f8 <prvIsQueueEmpty>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	f43f af6f 	beq.w	8009f04 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a026:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3730      	adds	r7, #48	@ 0x30
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	e000ed04 	.word	0xe000ed04

0800a034 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a040:	2300      	movs	r3, #0
 800a042:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a048:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10d      	bne.n	800a06e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d14d      	bne.n	800a0f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 ff20 	bl	800aea4 <xTaskPriorityDisinherit>
 800a064:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	609a      	str	r2, [r3, #8]
 800a06c:	e043      	b.n	800a0f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d119      	bne.n	800a0a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6858      	ldr	r0, [r3, #4]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a07c:	461a      	mov	r2, r3
 800a07e:	68b9      	ldr	r1, [r7, #8]
 800a080:	f002 fda2 	bl	800cbc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	685a      	ldr	r2, [r3, #4]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a08c:	441a      	add	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	685a      	ldr	r2, [r3, #4]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d32b      	bcc.n	800a0f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	605a      	str	r2, [r3, #4]
 800a0a6:	e026      	b.n	800a0f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	68d8      	ldr	r0, [r3, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	68b9      	ldr	r1, [r7, #8]
 800a0b4:	f002 fd88 	bl	800cbc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	68da      	ldr	r2, [r3, #12]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c0:	425b      	negs	r3, r3
 800a0c2:	441a      	add	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	68da      	ldr	r2, [r3, #12]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d207      	bcs.n	800a0e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0dc:	425b      	negs	r3, r3
 800a0de:	441a      	add	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d105      	bne.n	800a0f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a0fe:	697b      	ldr	r3, [r7, #20]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a116:	2b00      	cmp	r3, #0
 800a118:	d018      	beq.n	800a14c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68da      	ldr	r2, [r3, #12]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a122:	441a      	add	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	68da      	ldr	r2, [r3, #12]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	429a      	cmp	r2, r3
 800a132:	d303      	bcc.n	800a13c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	68d9      	ldr	r1, [r3, #12]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a144:	461a      	mov	r2, r3
 800a146:	6838      	ldr	r0, [r7, #0]
 800a148:	f002 fd3e 	bl	800cbc8 <memcpy>
	}
}
 800a14c:	bf00      	nop
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a15c:	f001 fbdc 	bl	800b918 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a166:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a168:	e011      	b.n	800a18e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d012      	beq.n	800a198 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	3324      	adds	r3, #36	@ 0x24
 800a176:	4618      	mov	r0, r3
 800a178:	f000 fcd0 	bl	800ab1c <xTaskRemoveFromEventList>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a182:	f000 fda9 	bl	800acd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	3b01      	subs	r3, #1
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a18e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a192:	2b00      	cmp	r3, #0
 800a194:	dce9      	bgt.n	800a16a <prvUnlockQueue+0x16>
 800a196:	e000      	b.n	800a19a <prvUnlockQueue+0x46>
					break;
 800a198:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	22ff      	movs	r2, #255	@ 0xff
 800a19e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a1a2:	f001 fbeb 	bl	800b97c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a1a6:	f001 fbb7 	bl	800b918 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1b2:	e011      	b.n	800a1d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d012      	beq.n	800a1e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3310      	adds	r3, #16
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f000 fcab 	bl	800ab1c <xTaskRemoveFromEventList>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a1cc:	f000 fd84 	bl	800acd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	dce9      	bgt.n	800a1b4 <prvUnlockQueue+0x60>
 800a1e0:	e000      	b.n	800a1e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a1e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	22ff      	movs	r2, #255	@ 0xff
 800a1e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a1ec:	f001 fbc6 	bl	800b97c <vPortExitCritical>
}
 800a1f0:	bf00      	nop
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a200:	f001 fb8a 	bl	800b918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d102      	bne.n	800a212 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a20c:	2301      	movs	r3, #1
 800a20e:	60fb      	str	r3, [r7, #12]
 800a210:	e001      	b.n	800a216 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a212:	2300      	movs	r3, #0
 800a214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a216:	f001 fbb1 	bl	800b97c <vPortExitCritical>

	return xReturn;
 800a21a:	68fb      	ldr	r3, [r7, #12]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a22c:	f001 fb74 	bl	800b918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a238:	429a      	cmp	r2, r3
 800a23a:	d102      	bne.n	800a242 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a23c:	2301      	movs	r3, #1
 800a23e:	60fb      	str	r3, [r7, #12]
 800a240:	e001      	b.n	800a246 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a242:	2300      	movs	r3, #0
 800a244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a246:	f001 fb99 	bl	800b97c <vPortExitCritical>

	return xReturn;
 800a24a:	68fb      	ldr	r3, [r7, #12]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a25e:	2300      	movs	r3, #0
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	e014      	b.n	800a28e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a264:	4a0f      	ldr	r2, [pc, #60]	@ (800a2a4 <vQueueAddToRegistry+0x50>)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10b      	bne.n	800a288 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a270:	490c      	ldr	r1, [pc, #48]	@ (800a2a4 <vQueueAddToRegistry+0x50>)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a27a:	4a0a      	ldr	r2, [pc, #40]	@ (800a2a4 <vQueueAddToRegistry+0x50>)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	4413      	add	r3, r2
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a286:	e006      	b.n	800a296 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3301      	adds	r3, #1
 800a28c:	60fb      	str	r3, [r7, #12]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2b07      	cmp	r3, #7
 800a292:	d9e7      	bls.n	800a264 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a294:	bf00      	nop
 800a296:	bf00      	nop
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	20000288 	.word	0x20000288

0800a2a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a2b8:	f001 fb2e 	bl	800b918 <vPortEnterCritical>
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a2c2:	b25b      	sxtb	r3, r3
 800a2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c8:	d103      	bne.n	800a2d2 <vQueueWaitForMessageRestricted+0x2a>
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a2d8:	b25b      	sxtb	r3, r3
 800a2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2de:	d103      	bne.n	800a2e8 <vQueueWaitForMessageRestricted+0x40>
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2e8:	f001 fb48 	bl	800b97c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d106      	bne.n	800a302 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	3324      	adds	r3, #36	@ 0x24
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	68b9      	ldr	r1, [r7, #8]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 fbe1 	bl	800aac4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a302:	6978      	ldr	r0, [r7, #20]
 800a304:	f7ff ff26 	bl	800a154 <prvUnlockQueue>
	}
 800a308:	bf00      	nop
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08c      	sub	sp, #48	@ 0x30
 800a314:	af04      	add	r7, sp, #16
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	603b      	str	r3, [r7, #0]
 800a31c:	4613      	mov	r3, r2
 800a31e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a320:	88fb      	ldrh	r3, [r7, #6]
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4618      	mov	r0, r3
 800a326:	f001 fc19 	bl	800bb5c <pvPortMalloc>
 800a32a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00e      	beq.n	800a350 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a332:	20a0      	movs	r0, #160	@ 0xa0
 800a334:	f001 fc12 	bl	800bb5c <pvPortMalloc>
 800a338:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d003      	beq.n	800a348 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	631a      	str	r2, [r3, #48]	@ 0x30
 800a346:	e005      	b.n	800a354 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a348:	6978      	ldr	r0, [r7, #20]
 800a34a:	f001 fcd5 	bl	800bcf8 <vPortFree>
 800a34e:	e001      	b.n	800a354 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a350:	2300      	movs	r3, #0
 800a352:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d013      	beq.n	800a382 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a35a:	88fa      	ldrh	r2, [r7, #6]
 800a35c:	2300      	movs	r3, #0
 800a35e:	9303      	str	r3, [sp, #12]
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	9302      	str	r3, [sp, #8]
 800a364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	68b9      	ldr	r1, [r7, #8]
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 f80f 	bl	800a394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a376:	69f8      	ldr	r0, [r7, #28]
 800a378:	f000 f8ac 	bl	800a4d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a37c:	2301      	movs	r3, #1
 800a37e:	61bb      	str	r3, [r7, #24]
 800a380:	e002      	b.n	800a388 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a382:	f04f 33ff 	mov.w	r3, #4294967295
 800a386:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a388:	69bb      	ldr	r3, [r7, #24]
	}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3720      	adds	r7, #32
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b088      	sub	sp, #32
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	f023 0307 	bic.w	r3, r3, #7
 800a3ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	f003 0307 	and.w	r3, r3, #7
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00b      	beq.n	800a3de <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	617b      	str	r3, [r7, #20]
}
 800a3d8:	bf00      	nop
 800a3da:	bf00      	nop
 800a3dc:	e7fd      	b.n	800a3da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d01f      	beq.n	800a424 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	61fb      	str	r3, [r7, #28]
 800a3e8:	e012      	b.n	800a410 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	7819      	ldrb	r1, [r3, #0]
 800a3f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	3334      	adds	r3, #52	@ 0x34
 800a3fa:	460a      	mov	r2, r1
 800a3fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	4413      	add	r3, r2
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d006      	beq.n	800a418 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	3301      	adds	r3, #1
 800a40e:	61fb      	str	r3, [r7, #28]
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	2b0f      	cmp	r3, #15
 800a414:	d9e9      	bls.n	800a3ea <prvInitialiseNewTask+0x56>
 800a416:	e000      	b.n	800a41a <prvInitialiseNewTask+0x86>
			{
				break;
 800a418:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a422:	e003      	b.n	800a42c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a426:	2200      	movs	r2, #0
 800a428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42e:	2b06      	cmp	r3, #6
 800a430:	d901      	bls.n	800a436 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a432:	2306      	movs	r3, #6
 800a434:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a438:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a43a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a440:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a444:	2200      	movs	r2, #0
 800a446:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44a:	3304      	adds	r3, #4
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff fa1a 	bl	8009886 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a454:	3318      	adds	r3, #24
 800a456:	4618      	mov	r0, r3
 800a458:	f7ff fa15 	bl	8009886 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a460:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a464:	f1c3 0207 	rsb	r2, r3, #7
 800a468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a470:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a474:	2200      	movs	r2, #0
 800a476:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a484:	334c      	adds	r3, #76	@ 0x4c
 800a486:	224c      	movs	r2, #76	@ 0x4c
 800a488:	2100      	movs	r1, #0
 800a48a:	4618      	mov	r0, r3
 800a48c:	f002 fb10 	bl	800cab0 <memset>
 800a490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a492:	4a0d      	ldr	r2, [pc, #52]	@ (800a4c8 <prvInitialiseNewTask+0x134>)
 800a494:	651a      	str	r2, [r3, #80]	@ 0x50
 800a496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a498:	4a0c      	ldr	r2, [pc, #48]	@ (800a4cc <prvInitialiseNewTask+0x138>)
 800a49a:	655a      	str	r2, [r3, #84]	@ 0x54
 800a49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49e:	4a0c      	ldr	r2, [pc, #48]	@ (800a4d0 <prvInitialiseNewTask+0x13c>)
 800a4a0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	68f9      	ldr	r1, [r7, #12]
 800a4a6:	69b8      	ldr	r0, [r7, #24]
 800a4a8:	f001 f908 	bl	800b6bc <pxPortInitialiseStack>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4be:	bf00      	nop
 800a4c0:	3720      	adds	r7, #32
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20010ebc 	.word	0x20010ebc
 800a4cc:	20010f24 	.word	0x20010f24
 800a4d0:	20010f8c 	.word	0x20010f8c

0800a4d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a4dc:	f001 fa1c 	bl	800b918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4e0:	4b2a      	ldr	r3, [pc, #168]	@ (800a58c <prvAddNewTaskToReadyList+0xb8>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	4a29      	ldr	r2, [pc, #164]	@ (800a58c <prvAddNewTaskToReadyList+0xb8>)
 800a4e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4ea:	4b29      	ldr	r3, [pc, #164]	@ (800a590 <prvAddNewTaskToReadyList+0xbc>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d109      	bne.n	800a506 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4f2:	4a27      	ldr	r2, [pc, #156]	@ (800a590 <prvAddNewTaskToReadyList+0xbc>)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4f8:	4b24      	ldr	r3, [pc, #144]	@ (800a58c <prvAddNewTaskToReadyList+0xb8>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d110      	bne.n	800a522 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a500:	f000 fc0e 	bl	800ad20 <prvInitialiseTaskLists>
 800a504:	e00d      	b.n	800a522 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a506:	4b23      	ldr	r3, [pc, #140]	@ (800a594 <prvAddNewTaskToReadyList+0xc0>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d109      	bne.n	800a522 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a50e:	4b20      	ldr	r3, [pc, #128]	@ (800a590 <prvAddNewTaskToReadyList+0xbc>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a518:	429a      	cmp	r2, r3
 800a51a:	d802      	bhi.n	800a522 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a51c:	4a1c      	ldr	r2, [pc, #112]	@ (800a590 <prvAddNewTaskToReadyList+0xbc>)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a522:	4b1d      	ldr	r3, [pc, #116]	@ (800a598 <prvAddNewTaskToReadyList+0xc4>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3301      	adds	r3, #1
 800a528:	4a1b      	ldr	r2, [pc, #108]	@ (800a598 <prvAddNewTaskToReadyList+0xc4>)
 800a52a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a530:	2201      	movs	r2, #1
 800a532:	409a      	lsls	r2, r3
 800a534:	4b19      	ldr	r3, [pc, #100]	@ (800a59c <prvAddNewTaskToReadyList+0xc8>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4313      	orrs	r3, r2
 800a53a:	4a18      	ldr	r2, [pc, #96]	@ (800a59c <prvAddNewTaskToReadyList+0xc8>)
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a542:	4613      	mov	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4413      	add	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4a15      	ldr	r2, [pc, #84]	@ (800a5a0 <prvAddNewTaskToReadyList+0xcc>)
 800a54c:	441a      	add	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3304      	adds	r3, #4
 800a552:	4619      	mov	r1, r3
 800a554:	4610      	mov	r0, r2
 800a556:	f7ff f9a3 	bl	80098a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a55a:	f001 fa0f 	bl	800b97c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a55e:	4b0d      	ldr	r3, [pc, #52]	@ (800a594 <prvAddNewTaskToReadyList+0xc0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00e      	beq.n	800a584 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a566:	4b0a      	ldr	r3, [pc, #40]	@ (800a590 <prvAddNewTaskToReadyList+0xbc>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a570:	429a      	cmp	r2, r3
 800a572:	d207      	bcs.n	800a584 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a574:	4b0b      	ldr	r3, [pc, #44]	@ (800a5a4 <prvAddNewTaskToReadyList+0xd0>)
 800a576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a584:	bf00      	nop
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	200003c8 	.word	0x200003c8
 800a590:	200002c8 	.word	0x200002c8
 800a594:	200003d4 	.word	0x200003d4
 800a598:	200003e4 	.word	0x200003e4
 800a59c:	200003d0 	.word	0x200003d0
 800a5a0:	200002cc 	.word	0x200002cc
 800a5a4:	e000ed04 	.word	0xe000ed04

0800a5a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d018      	beq.n	800a5ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a5ba:	4b14      	ldr	r3, [pc, #80]	@ (800a60c <vTaskDelay+0x64>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00b      	beq.n	800a5da <vTaskDelay+0x32>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	60bb      	str	r3, [r7, #8]
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop
 800a5d8:	e7fd      	b.n	800a5d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a5da:	f000 f873 	bl	800a6c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a5de:	2100      	movs	r1, #0
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 fce7 	bl	800afb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a5e6:	f000 f87b 	bl	800a6e0 <xTaskResumeAll>
 800a5ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d107      	bne.n	800a602 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a5f2:	4b07      	ldr	r3, [pc, #28]	@ (800a610 <vTaskDelay+0x68>)
 800a5f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a602:	bf00      	nop
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	200003f0 	.word	0x200003f0
 800a610:	e000ed04 	.word	0xe000ed04

0800a614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a61a:	4b22      	ldr	r3, [pc, #136]	@ (800a6a4 <vTaskStartScheduler+0x90>)
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	2300      	movs	r3, #0
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	2300      	movs	r3, #0
 800a624:	22c0      	movs	r2, #192	@ 0xc0
 800a626:	4920      	ldr	r1, [pc, #128]	@ (800a6a8 <vTaskStartScheduler+0x94>)
 800a628:	4820      	ldr	r0, [pc, #128]	@ (800a6ac <vTaskStartScheduler+0x98>)
 800a62a:	f7ff fe71 	bl	800a310 <xTaskCreate>
 800a62e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d102      	bne.n	800a63c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800a636:	f000 fd23 	bl	800b080 <xTimerCreateTimerTask>
 800a63a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d11b      	bne.n	800a67a <vTaskStartScheduler+0x66>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	60bb      	str	r3, [r7, #8]
}
 800a654:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a656:	4b16      	ldr	r3, [pc, #88]	@ (800a6b0 <vTaskStartScheduler+0x9c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	334c      	adds	r3, #76	@ 0x4c
 800a65c:	4a15      	ldr	r2, [pc, #84]	@ (800a6b4 <vTaskStartScheduler+0xa0>)
 800a65e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a660:	4b15      	ldr	r3, [pc, #84]	@ (800a6b8 <vTaskStartScheduler+0xa4>)
 800a662:	f04f 32ff 	mov.w	r2, #4294967295
 800a666:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a668:	4b14      	ldr	r3, [pc, #80]	@ (800a6bc <vTaskStartScheduler+0xa8>)
 800a66a:	2201      	movs	r2, #1
 800a66c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a66e:	4b14      	ldr	r3, [pc, #80]	@ (800a6c0 <vTaskStartScheduler+0xac>)
 800a670:	2200      	movs	r2, #0
 800a672:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a674:	f001 f8ac 	bl	800b7d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a678:	e00f      	b.n	800a69a <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a680:	d10b      	bne.n	800a69a <vTaskStartScheduler+0x86>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	607b      	str	r3, [r7, #4]
}
 800a694:	bf00      	nop
 800a696:	bf00      	nop
 800a698:	e7fd      	b.n	800a696 <vTaskStartScheduler+0x82>
}
 800a69a:	bf00      	nop
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	200003ec 	.word	0x200003ec
 800a6a8:	0800ccc8 	.word	0x0800ccc8
 800a6ac:	0800acf1 	.word	0x0800acf1
 800a6b0:	200002c8 	.word	0x200002c8
 800a6b4:	20000184 	.word	0x20000184
 800a6b8:	200003e8 	.word	0x200003e8
 800a6bc:	200003d4 	.word	0x200003d4
 800a6c0:	200003cc 	.word	0x200003cc

0800a6c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a6c8:	4b04      	ldr	r3, [pc, #16]	@ (800a6dc <vTaskSuspendAll+0x18>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	4a03      	ldr	r2, [pc, #12]	@ (800a6dc <vTaskSuspendAll+0x18>)
 800a6d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a6d2:	bf00      	nop
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	200003f0 	.word	0x200003f0

0800a6e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a6ee:	4b42      	ldr	r3, [pc, #264]	@ (800a7f8 <xTaskResumeAll+0x118>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10b      	bne.n	800a70e <xTaskResumeAll+0x2e>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	603b      	str	r3, [r7, #0]
}
 800a708:	bf00      	nop
 800a70a:	bf00      	nop
 800a70c:	e7fd      	b.n	800a70a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a70e:	f001 f903 	bl	800b918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a712:	4b39      	ldr	r3, [pc, #228]	@ (800a7f8 <xTaskResumeAll+0x118>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3b01      	subs	r3, #1
 800a718:	4a37      	ldr	r2, [pc, #220]	@ (800a7f8 <xTaskResumeAll+0x118>)
 800a71a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a71c:	4b36      	ldr	r3, [pc, #216]	@ (800a7f8 <xTaskResumeAll+0x118>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d161      	bne.n	800a7e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a724:	4b35      	ldr	r3, [pc, #212]	@ (800a7fc <xTaskResumeAll+0x11c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d05d      	beq.n	800a7e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a72c:	e02e      	b.n	800a78c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a72e:	4b34      	ldr	r3, [pc, #208]	@ (800a800 <xTaskResumeAll+0x120>)
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3318      	adds	r3, #24
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff f90d 	bl	800995a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	3304      	adds	r3, #4
 800a744:	4618      	mov	r0, r3
 800a746:	f7ff f908 	bl	800995a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a74e:	2201      	movs	r2, #1
 800a750:	409a      	lsls	r2, r3
 800a752:	4b2c      	ldr	r3, [pc, #176]	@ (800a804 <xTaskResumeAll+0x124>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4313      	orrs	r3, r2
 800a758:	4a2a      	ldr	r2, [pc, #168]	@ (800a804 <xTaskResumeAll+0x124>)
 800a75a:	6013      	str	r3, [r2, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4a27      	ldr	r2, [pc, #156]	@ (800a808 <xTaskResumeAll+0x128>)
 800a76a:	441a      	add	r2, r3
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	3304      	adds	r3, #4
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f7ff f894 	bl	80098a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a77c:	4b23      	ldr	r3, [pc, #140]	@ (800a80c <xTaskResumeAll+0x12c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a782:	429a      	cmp	r2, r3
 800a784:	d302      	bcc.n	800a78c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a786:	4b22      	ldr	r3, [pc, #136]	@ (800a810 <xTaskResumeAll+0x130>)
 800a788:	2201      	movs	r2, #1
 800a78a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a78c:	4b1c      	ldr	r3, [pc, #112]	@ (800a800 <xTaskResumeAll+0x120>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1cc      	bne.n	800a72e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a79a:	f000 fb45 	bl	800ae28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a79e:	4b1d      	ldr	r3, [pc, #116]	@ (800a814 <xTaskResumeAll+0x134>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d010      	beq.n	800a7cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a7aa:	f000 f847 	bl	800a83c <xTaskIncrementTick>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d002      	beq.n	800a7ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a7b4:	4b16      	ldr	r3, [pc, #88]	@ (800a810 <xTaskResumeAll+0x130>)
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1f1      	bne.n	800a7aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a7c6:	4b13      	ldr	r3, [pc, #76]	@ (800a814 <xTaskResumeAll+0x134>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a7cc:	4b10      	ldr	r3, [pc, #64]	@ (800a810 <xTaskResumeAll+0x130>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d009      	beq.n	800a7e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a7d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a818 <xTaskResumeAll+0x138>)
 800a7da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7de:	601a      	str	r2, [r3, #0]
 800a7e0:	f3bf 8f4f 	dsb	sy
 800a7e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7e8:	f001 f8c8 	bl	800b97c <vPortExitCritical>

	return xAlreadyYielded;
 800a7ec:	68bb      	ldr	r3, [r7, #8]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	200003f0 	.word	0x200003f0
 800a7fc:	200003c8 	.word	0x200003c8
 800a800:	20000388 	.word	0x20000388
 800a804:	200003d0 	.word	0x200003d0
 800a808:	200002cc 	.word	0x200002cc
 800a80c:	200002c8 	.word	0x200002c8
 800a810:	200003dc 	.word	0x200003dc
 800a814:	200003d8 	.word	0x200003d8
 800a818:	e000ed04 	.word	0xe000ed04

0800a81c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a822:	4b05      	ldr	r3, [pc, #20]	@ (800a838 <xTaskGetTickCount+0x1c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a828:	687b      	ldr	r3, [r7, #4]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	200003cc 	.word	0x200003cc

0800a83c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a846:	4b4f      	ldr	r3, [pc, #316]	@ (800a984 <xTaskIncrementTick+0x148>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f040 808f 	bne.w	800a96e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a850:	4b4d      	ldr	r3, [pc, #308]	@ (800a988 <xTaskIncrementTick+0x14c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3301      	adds	r3, #1
 800a856:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a858:	4a4b      	ldr	r2, [pc, #300]	@ (800a988 <xTaskIncrementTick+0x14c>)
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d121      	bne.n	800a8a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a864:	4b49      	ldr	r3, [pc, #292]	@ (800a98c <xTaskIncrementTick+0x150>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00b      	beq.n	800a886 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	603b      	str	r3, [r7, #0]
}
 800a880:	bf00      	nop
 800a882:	bf00      	nop
 800a884:	e7fd      	b.n	800a882 <xTaskIncrementTick+0x46>
 800a886:	4b41      	ldr	r3, [pc, #260]	@ (800a98c <xTaskIncrementTick+0x150>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	4b40      	ldr	r3, [pc, #256]	@ (800a990 <xTaskIncrementTick+0x154>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a3e      	ldr	r2, [pc, #248]	@ (800a98c <xTaskIncrementTick+0x150>)
 800a892:	6013      	str	r3, [r2, #0]
 800a894:	4a3e      	ldr	r2, [pc, #248]	@ (800a990 <xTaskIncrementTick+0x154>)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	4b3e      	ldr	r3, [pc, #248]	@ (800a994 <xTaskIncrementTick+0x158>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	4a3c      	ldr	r2, [pc, #240]	@ (800a994 <xTaskIncrementTick+0x158>)
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	f000 fac0 	bl	800ae28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a8a8:	4b3b      	ldr	r3, [pc, #236]	@ (800a998 <xTaskIncrementTick+0x15c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d348      	bcc.n	800a944 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8b2:	4b36      	ldr	r3, [pc, #216]	@ (800a98c <xTaskIncrementTick+0x150>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d104      	bne.n	800a8c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8bc:	4b36      	ldr	r3, [pc, #216]	@ (800a998 <xTaskIncrementTick+0x15c>)
 800a8be:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c2:	601a      	str	r2, [r3, #0]
					break;
 800a8c4:	e03e      	b.n	800a944 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8c6:	4b31      	ldr	r3, [pc, #196]	@ (800a98c <xTaskIncrementTick+0x150>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d203      	bcs.n	800a8e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a8de:	4a2e      	ldr	r2, [pc, #184]	@ (800a998 <xTaskIncrementTick+0x15c>)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a8e4:	e02e      	b.n	800a944 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7ff f835 	bl	800995a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d004      	beq.n	800a902 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	3318      	adds	r3, #24
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7ff f82c 	bl	800995a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a906:	2201      	movs	r2, #1
 800a908:	409a      	lsls	r2, r3
 800a90a:	4b24      	ldr	r3, [pc, #144]	@ (800a99c <xTaskIncrementTick+0x160>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4313      	orrs	r3, r2
 800a910:	4a22      	ldr	r2, [pc, #136]	@ (800a99c <xTaskIncrementTick+0x160>)
 800a912:	6013      	str	r3, [r2, #0]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a918:	4613      	mov	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4a1f      	ldr	r2, [pc, #124]	@ (800a9a0 <xTaskIncrementTick+0x164>)
 800a922:	441a      	add	r2, r3
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	3304      	adds	r3, #4
 800a928:	4619      	mov	r1, r3
 800a92a:	4610      	mov	r0, r2
 800a92c:	f7fe ffb8 	bl	80098a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a934:	4b1b      	ldr	r3, [pc, #108]	@ (800a9a4 <xTaskIncrementTick+0x168>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d3b9      	bcc.n	800a8b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a93e:	2301      	movs	r3, #1
 800a940:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a942:	e7b6      	b.n	800a8b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a944:	4b17      	ldr	r3, [pc, #92]	@ (800a9a4 <xTaskIncrementTick+0x168>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a94a:	4915      	ldr	r1, [pc, #84]	@ (800a9a0 <xTaskIncrementTick+0x164>)
 800a94c:	4613      	mov	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	440b      	add	r3, r1
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d901      	bls.n	800a960 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a95c:	2301      	movs	r3, #1
 800a95e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a960:	4b11      	ldr	r3, [pc, #68]	@ (800a9a8 <xTaskIncrementTick+0x16c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d007      	beq.n	800a978 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a968:	2301      	movs	r3, #1
 800a96a:	617b      	str	r3, [r7, #20]
 800a96c:	e004      	b.n	800a978 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a96e:	4b0f      	ldr	r3, [pc, #60]	@ (800a9ac <xTaskIncrementTick+0x170>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	4a0d      	ldr	r2, [pc, #52]	@ (800a9ac <xTaskIncrementTick+0x170>)
 800a976:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a978:	697b      	ldr	r3, [r7, #20]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	200003f0 	.word	0x200003f0
 800a988:	200003cc 	.word	0x200003cc
 800a98c:	20000380 	.word	0x20000380
 800a990:	20000384 	.word	0x20000384
 800a994:	200003e0 	.word	0x200003e0
 800a998:	200003e8 	.word	0x200003e8
 800a99c:	200003d0 	.word	0x200003d0
 800a9a0:	200002cc 	.word	0x200002cc
 800a9a4:	200002c8 	.word	0x200002c8
 800a9a8:	200003dc 	.word	0x200003dc
 800a9ac:	200003d8 	.word	0x200003d8

0800a9b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a9b6:	4b2a      	ldr	r3, [pc, #168]	@ (800aa60 <vTaskSwitchContext+0xb0>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d003      	beq.n	800a9c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a9be:	4b29      	ldr	r3, [pc, #164]	@ (800aa64 <vTaskSwitchContext+0xb4>)
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a9c4:	e045      	b.n	800aa52 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800a9c6:	4b27      	ldr	r3, [pc, #156]	@ (800aa64 <vTaskSwitchContext+0xb4>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9cc:	4b26      	ldr	r3, [pc, #152]	@ (800aa68 <vTaskSwitchContext+0xb8>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	fab3 f383 	clz	r3, r3
 800a9d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a9da:	7afb      	ldrb	r3, [r7, #11]
 800a9dc:	f1c3 031f 	rsb	r3, r3, #31
 800a9e0:	617b      	str	r3, [r7, #20]
 800a9e2:	4922      	ldr	r1, [pc, #136]	@ (800aa6c <vTaskSwitchContext+0xbc>)
 800a9e4:	697a      	ldr	r2, [r7, #20]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	440b      	add	r3, r1
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10b      	bne.n	800aa0e <vTaskSwitchContext+0x5e>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	607b      	str	r3, [r7, #4]
}
 800aa08:	bf00      	nop
 800aa0a:	bf00      	nop
 800aa0c:	e7fd      	b.n	800aa0a <vTaskSwitchContext+0x5a>
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	4613      	mov	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4a14      	ldr	r2, [pc, #80]	@ (800aa6c <vTaskSwitchContext+0xbc>)
 800aa1a:	4413      	add	r3, r2
 800aa1c:	613b      	str	r3, [r7, #16]
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	605a      	str	r2, [r3, #4]
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	3308      	adds	r3, #8
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d104      	bne.n	800aa3e <vTaskSwitchContext+0x8e>
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	605a      	str	r2, [r3, #4]
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	4a0a      	ldr	r2, [pc, #40]	@ (800aa70 <vTaskSwitchContext+0xc0>)
 800aa46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa48:	4b09      	ldr	r3, [pc, #36]	@ (800aa70 <vTaskSwitchContext+0xc0>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	334c      	adds	r3, #76	@ 0x4c
 800aa4e:	4a09      	ldr	r2, [pc, #36]	@ (800aa74 <vTaskSwitchContext+0xc4>)
 800aa50:	6013      	str	r3, [r2, #0]
}
 800aa52:	bf00      	nop
 800aa54:	371c      	adds	r7, #28
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	200003f0 	.word	0x200003f0
 800aa64:	200003dc 	.word	0x200003dc
 800aa68:	200003d0 	.word	0x200003d0
 800aa6c:	200002cc 	.word	0x200002cc
 800aa70:	200002c8 	.word	0x200002c8
 800aa74:	20000184 	.word	0x20000184

0800aa78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10b      	bne.n	800aaa0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	60fb      	str	r3, [r7, #12]
}
 800aa9a:	bf00      	nop
 800aa9c:	bf00      	nop
 800aa9e:	e7fd      	b.n	800aa9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aaa0:	4b07      	ldr	r3, [pc, #28]	@ (800aac0 <vTaskPlaceOnEventList+0x48>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3318      	adds	r3, #24
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7fe ff1d 	bl	80098e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aaae:	2101      	movs	r1, #1
 800aab0:	6838      	ldr	r0, [r7, #0]
 800aab2:	f000 fa7f 	bl	800afb4 <prvAddCurrentTaskToDelayedList>
}
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	200002c8 	.word	0x200002c8

0800aac4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10b      	bne.n	800aaee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	617b      	str	r3, [r7, #20]
}
 800aae8:	bf00      	nop
 800aaea:	bf00      	nop
 800aaec:	e7fd      	b.n	800aaea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aaee:	4b0a      	ldr	r3, [pc, #40]	@ (800ab18 <vTaskPlaceOnEventListRestricted+0x54>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	3318      	adds	r3, #24
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f7fe fed2 	bl	80098a0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ab02:	f04f 33ff 	mov.w	r3, #4294967295
 800ab06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab08:	6879      	ldr	r1, [r7, #4]
 800ab0a:	68b8      	ldr	r0, [r7, #8]
 800ab0c:	f000 fa52 	bl	800afb4 <prvAddCurrentTaskToDelayedList>
	}
 800ab10:	bf00      	nop
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	200002c8 	.word	0x200002c8

0800ab1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b086      	sub	sp, #24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10b      	bne.n	800ab4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ab32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab36:	f383 8811 	msr	BASEPRI, r3
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	60fb      	str	r3, [r7, #12]
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop
 800ab48:	e7fd      	b.n	800ab46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	3318      	adds	r3, #24
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe ff03 	bl	800995a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab54:	4b1d      	ldr	r3, [pc, #116]	@ (800abcc <xTaskRemoveFromEventList+0xb0>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d11c      	bne.n	800ab96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe fefa 	bl	800995a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	409a      	lsls	r2, r3
 800ab6e:	4b18      	ldr	r3, [pc, #96]	@ (800abd0 <xTaskRemoveFromEventList+0xb4>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	4a16      	ldr	r2, [pc, #88]	@ (800abd0 <xTaskRemoveFromEventList+0xb4>)
 800ab76:	6013      	str	r3, [r2, #0]
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	4413      	add	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4a13      	ldr	r2, [pc, #76]	@ (800abd4 <xTaskRemoveFromEventList+0xb8>)
 800ab86:	441a      	add	r2, r3
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	f7fe fe86 	bl	80098a0 <vListInsertEnd>
 800ab94:	e005      	b.n	800aba2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	3318      	adds	r3, #24
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	480e      	ldr	r0, [pc, #56]	@ (800abd8 <xTaskRemoveFromEventList+0xbc>)
 800ab9e:	f7fe fe7f 	bl	80098a0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aba6:	4b0d      	ldr	r3, [pc, #52]	@ (800abdc <xTaskRemoveFromEventList+0xc0>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abac:	429a      	cmp	r2, r3
 800abae:	d905      	bls.n	800abbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800abb0:	2301      	movs	r3, #1
 800abb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800abb4:	4b0a      	ldr	r3, [pc, #40]	@ (800abe0 <xTaskRemoveFromEventList+0xc4>)
 800abb6:	2201      	movs	r2, #1
 800abb8:	601a      	str	r2, [r3, #0]
 800abba:	e001      	b.n	800abc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800abbc:	2300      	movs	r3, #0
 800abbe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800abc0:	697b      	ldr	r3, [r7, #20]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	200003f0 	.word	0x200003f0
 800abd0:	200003d0 	.word	0x200003d0
 800abd4:	200002cc 	.word	0x200002cc
 800abd8:	20000388 	.word	0x20000388
 800abdc:	200002c8 	.word	0x200002c8
 800abe0:	200003dc 	.word	0x200003dc

0800abe4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800abec:	4b06      	ldr	r3, [pc, #24]	@ (800ac08 <vTaskInternalSetTimeOutState+0x24>)
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800abf4:	4b05      	ldr	r3, [pc, #20]	@ (800ac0c <vTaskInternalSetTimeOutState+0x28>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	605a      	str	r2, [r3, #4]
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	200003e0 	.word	0x200003e0
 800ac0c:	200003cc 	.word	0x200003cc

0800ac10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b088      	sub	sp, #32
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10b      	bne.n	800ac38 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	613b      	str	r3, [r7, #16]
}
 800ac32:	bf00      	nop
 800ac34:	bf00      	nop
 800ac36:	e7fd      	b.n	800ac34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10b      	bne.n	800ac56 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	60fb      	str	r3, [r7, #12]
}
 800ac50:	bf00      	nop
 800ac52:	bf00      	nop
 800ac54:	e7fd      	b.n	800ac52 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ac56:	f000 fe5f 	bl	800b918 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac5a:	4b1d      	ldr	r3, [pc, #116]	@ (800acd0 <xTaskCheckForTimeOut+0xc0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	69ba      	ldr	r2, [r7, #24]
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac72:	d102      	bne.n	800ac7a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac74:	2300      	movs	r3, #0
 800ac76:	61fb      	str	r3, [r7, #28]
 800ac78:	e023      	b.n	800acc2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	4b15      	ldr	r3, [pc, #84]	@ (800acd4 <xTaskCheckForTimeOut+0xc4>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d007      	beq.n	800ac96 <xTaskCheckForTimeOut+0x86>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	69ba      	ldr	r2, [r7, #24]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d302      	bcc.n	800ac96 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac90:	2301      	movs	r3, #1
 800ac92:	61fb      	str	r3, [r7, #28]
 800ac94:	e015      	b.n	800acc2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d20b      	bcs.n	800acb8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	1ad2      	subs	r2, r2, r3
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7ff ff99 	bl	800abe4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800acb2:	2300      	movs	r3, #0
 800acb4:	61fb      	str	r3, [r7, #28]
 800acb6:	e004      	b.n	800acc2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	2200      	movs	r2, #0
 800acbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800acbe:	2301      	movs	r3, #1
 800acc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800acc2:	f000 fe5b 	bl	800b97c <vPortExitCritical>

	return xReturn;
 800acc6:	69fb      	ldr	r3, [r7, #28]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3720      	adds	r7, #32
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	200003cc 	.word	0x200003cc
 800acd4:	200003e0 	.word	0x200003e0

0800acd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800acd8:	b480      	push	{r7}
 800acda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800acdc:	4b03      	ldr	r3, [pc, #12]	@ (800acec <vTaskMissedYield+0x14>)
 800acde:	2201      	movs	r2, #1
 800ace0:	601a      	str	r2, [r3, #0]
}
 800ace2:	bf00      	nop
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	200003dc 	.word	0x200003dc

0800acf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800acf8:	f000 f852 	bl	800ada0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800acfc:	4b06      	ldr	r3, [pc, #24]	@ (800ad18 <prvIdleTask+0x28>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d9f9      	bls.n	800acf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad04:	4b05      	ldr	r3, [pc, #20]	@ (800ad1c <prvIdleTask+0x2c>)
 800ad06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad0a:	601a      	str	r2, [r3, #0]
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad14:	e7f0      	b.n	800acf8 <prvIdleTask+0x8>
 800ad16:	bf00      	nop
 800ad18:	200002cc 	.word	0x200002cc
 800ad1c:	e000ed04 	.word	0xe000ed04

0800ad20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad26:	2300      	movs	r3, #0
 800ad28:	607b      	str	r3, [r7, #4]
 800ad2a:	e00c      	b.n	800ad46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4a12      	ldr	r2, [pc, #72]	@ (800ad80 <prvInitialiseTaskLists+0x60>)
 800ad38:	4413      	add	r3, r2
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7fe fd83 	bl	8009846 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3301      	adds	r3, #1
 800ad44:	607b      	str	r3, [r7, #4]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b06      	cmp	r3, #6
 800ad4a:	d9ef      	bls.n	800ad2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad4c:	480d      	ldr	r0, [pc, #52]	@ (800ad84 <prvInitialiseTaskLists+0x64>)
 800ad4e:	f7fe fd7a 	bl	8009846 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad52:	480d      	ldr	r0, [pc, #52]	@ (800ad88 <prvInitialiseTaskLists+0x68>)
 800ad54:	f7fe fd77 	bl	8009846 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad58:	480c      	ldr	r0, [pc, #48]	@ (800ad8c <prvInitialiseTaskLists+0x6c>)
 800ad5a:	f7fe fd74 	bl	8009846 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad5e:	480c      	ldr	r0, [pc, #48]	@ (800ad90 <prvInitialiseTaskLists+0x70>)
 800ad60:	f7fe fd71 	bl	8009846 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad64:	480b      	ldr	r0, [pc, #44]	@ (800ad94 <prvInitialiseTaskLists+0x74>)
 800ad66:	f7fe fd6e 	bl	8009846 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad98 <prvInitialiseTaskLists+0x78>)
 800ad6c:	4a05      	ldr	r2, [pc, #20]	@ (800ad84 <prvInitialiseTaskLists+0x64>)
 800ad6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad70:	4b0a      	ldr	r3, [pc, #40]	@ (800ad9c <prvInitialiseTaskLists+0x7c>)
 800ad72:	4a05      	ldr	r2, [pc, #20]	@ (800ad88 <prvInitialiseTaskLists+0x68>)
 800ad74:	601a      	str	r2, [r3, #0]
}
 800ad76:	bf00      	nop
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	200002cc 	.word	0x200002cc
 800ad84:	20000358 	.word	0x20000358
 800ad88:	2000036c 	.word	0x2000036c
 800ad8c:	20000388 	.word	0x20000388
 800ad90:	2000039c 	.word	0x2000039c
 800ad94:	200003b4 	.word	0x200003b4
 800ad98:	20000380 	.word	0x20000380
 800ad9c:	20000384 	.word	0x20000384

0800ada0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ada6:	e019      	b.n	800addc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ada8:	f000 fdb6 	bl	800b918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adac:	4b10      	ldr	r3, [pc, #64]	@ (800adf0 <prvCheckTasksWaitingTermination+0x50>)
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3304      	adds	r3, #4
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fe fdce 	bl	800995a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800adbe:	4b0d      	ldr	r3, [pc, #52]	@ (800adf4 <prvCheckTasksWaitingTermination+0x54>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3b01      	subs	r3, #1
 800adc4:	4a0b      	ldr	r2, [pc, #44]	@ (800adf4 <prvCheckTasksWaitingTermination+0x54>)
 800adc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800adc8:	4b0b      	ldr	r3, [pc, #44]	@ (800adf8 <prvCheckTasksWaitingTermination+0x58>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	3b01      	subs	r3, #1
 800adce:	4a0a      	ldr	r2, [pc, #40]	@ (800adf8 <prvCheckTasksWaitingTermination+0x58>)
 800add0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800add2:	f000 fdd3 	bl	800b97c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f810 	bl	800adfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800addc:	4b06      	ldr	r3, [pc, #24]	@ (800adf8 <prvCheckTasksWaitingTermination+0x58>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1e1      	bne.n	800ada8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ade4:	bf00      	nop
 800ade6:	bf00      	nop
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	2000039c 	.word	0x2000039c
 800adf4:	200003c8 	.word	0x200003c8
 800adf8:	200003b0 	.word	0x200003b0

0800adfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	334c      	adds	r3, #76	@ 0x4c
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f001 fe59 	bl	800cac0 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae12:	4618      	mov	r0, r3
 800ae14:	f000 ff70 	bl	800bcf8 <vPortFree>
			vPortFree( pxTCB );
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 ff6d 	bl	800bcf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae1e:	bf00      	nop
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae60 <prvResetNextTaskUnblockTime+0x38>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d104      	bne.n	800ae42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae38:	4b0a      	ldr	r3, [pc, #40]	@ (800ae64 <prvResetNextTaskUnblockTime+0x3c>)
 800ae3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae40:	e008      	b.n	800ae54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae42:	4b07      	ldr	r3, [pc, #28]	@ (800ae60 <prvResetNextTaskUnblockTime+0x38>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	4a04      	ldr	r2, [pc, #16]	@ (800ae64 <prvResetNextTaskUnblockTime+0x3c>)
 800ae52:	6013      	str	r3, [r2, #0]
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr
 800ae60:	20000380 	.word	0x20000380
 800ae64:	200003e8 	.word	0x200003e8

0800ae68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae9c <xTaskGetSchedulerState+0x34>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d102      	bne.n	800ae7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae76:	2301      	movs	r3, #1
 800ae78:	607b      	str	r3, [r7, #4]
 800ae7a:	e008      	b.n	800ae8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae7c:	4b08      	ldr	r3, [pc, #32]	@ (800aea0 <xTaskGetSchedulerState+0x38>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d102      	bne.n	800ae8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae84:	2302      	movs	r3, #2
 800ae86:	607b      	str	r3, [r7, #4]
 800ae88:	e001      	b.n	800ae8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae8e:	687b      	ldr	r3, [r7, #4]
	}
 800ae90:	4618      	mov	r0, r3
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	200003d4 	.word	0x200003d4
 800aea0:	200003f0 	.word	0x200003f0

0800aea4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d070      	beq.n	800af9c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aeba:	4b3b      	ldr	r3, [pc, #236]	@ (800afa8 <xTaskPriorityDisinherit+0x104>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d00b      	beq.n	800aedc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec8:	f383 8811 	msr	BASEPRI, r3
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	60fb      	str	r3, [r7, #12]
}
 800aed6:	bf00      	nop
 800aed8:	bf00      	nop
 800aeda:	e7fd      	b.n	800aed8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10b      	bne.n	800aefc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	60bb      	str	r3, [r7, #8]
}
 800aef6:	bf00      	nop
 800aef8:	bf00      	nop
 800aefa:	e7fd      	b.n	800aef8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af00:	1e5a      	subs	r2, r3, #1
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af0e:	429a      	cmp	r2, r3
 800af10:	d044      	beq.n	800af9c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af16:	2b00      	cmp	r3, #0
 800af18:	d140      	bne.n	800af9c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	3304      	adds	r3, #4
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fe fd1b 	bl	800995a <uxListRemove>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d115      	bne.n	800af56 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af2e:	491f      	ldr	r1, [pc, #124]	@ (800afac <xTaskPriorityDisinherit+0x108>)
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	440b      	add	r3, r1
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10a      	bne.n	800af56 <xTaskPriorityDisinherit+0xb2>
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af44:	2201      	movs	r2, #1
 800af46:	fa02 f303 	lsl.w	r3, r2, r3
 800af4a:	43da      	mvns	r2, r3
 800af4c:	4b18      	ldr	r3, [pc, #96]	@ (800afb0 <xTaskPriorityDisinherit+0x10c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4013      	ands	r3, r2
 800af52:	4a17      	ldr	r2, [pc, #92]	@ (800afb0 <xTaskPriorityDisinherit+0x10c>)
 800af54:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af62:	f1c3 0207 	rsb	r2, r3, #7
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6e:	2201      	movs	r2, #1
 800af70:	409a      	lsls	r2, r3
 800af72:	4b0f      	ldr	r3, [pc, #60]	@ (800afb0 <xTaskPriorityDisinherit+0x10c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4313      	orrs	r3, r2
 800af78:	4a0d      	ldr	r2, [pc, #52]	@ (800afb0 <xTaskPriorityDisinherit+0x10c>)
 800af7a:	6013      	str	r3, [r2, #0]
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af80:	4613      	mov	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4a08      	ldr	r2, [pc, #32]	@ (800afac <xTaskPriorityDisinherit+0x108>)
 800af8a:	441a      	add	r2, r3
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	3304      	adds	r3, #4
 800af90:	4619      	mov	r1, r3
 800af92:	4610      	mov	r0, r2
 800af94:	f7fe fc84 	bl	80098a0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af98:	2301      	movs	r3, #1
 800af9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af9c:	697b      	ldr	r3, [r7, #20]
	}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3718      	adds	r7, #24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	200002c8 	.word	0x200002c8
 800afac:	200002cc 	.word	0x200002cc
 800afb0:	200003d0 	.word	0x200003d0

0800afb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800afbe:	4b29      	ldr	r3, [pc, #164]	@ (800b064 <prvAddCurrentTaskToDelayedList+0xb0>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afc4:	4b28      	ldr	r3, [pc, #160]	@ (800b068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3304      	adds	r3, #4
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fe fcc5 	bl	800995a <uxListRemove>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10b      	bne.n	800afee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800afd6:	4b24      	ldr	r3, [pc, #144]	@ (800b068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afdc:	2201      	movs	r2, #1
 800afde:	fa02 f303 	lsl.w	r3, r2, r3
 800afe2:	43da      	mvns	r2, r3
 800afe4:	4b21      	ldr	r3, [pc, #132]	@ (800b06c <prvAddCurrentTaskToDelayedList+0xb8>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4013      	ands	r3, r2
 800afea:	4a20      	ldr	r2, [pc, #128]	@ (800b06c <prvAddCurrentTaskToDelayedList+0xb8>)
 800afec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff4:	d10a      	bne.n	800b00c <prvAddCurrentTaskToDelayedList+0x58>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d007      	beq.n	800b00c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800affc:	4b1a      	ldr	r3, [pc, #104]	@ (800b068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3304      	adds	r3, #4
 800b002:	4619      	mov	r1, r3
 800b004:	481a      	ldr	r0, [pc, #104]	@ (800b070 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b006:	f7fe fc4b 	bl	80098a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b00a:	e026      	b.n	800b05a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4413      	add	r3, r2
 800b012:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b014:	4b14      	ldr	r3, [pc, #80]	@ (800b068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	429a      	cmp	r2, r3
 800b022:	d209      	bcs.n	800b038 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b024:	4b13      	ldr	r3, [pc, #76]	@ (800b074 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	4b0f      	ldr	r3, [pc, #60]	@ (800b068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3304      	adds	r3, #4
 800b02e:	4619      	mov	r1, r3
 800b030:	4610      	mov	r0, r2
 800b032:	f7fe fc59 	bl	80098e8 <vListInsert>
}
 800b036:	e010      	b.n	800b05a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b038:	4b0f      	ldr	r3, [pc, #60]	@ (800b078 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	4b0a      	ldr	r3, [pc, #40]	@ (800b068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	3304      	adds	r3, #4
 800b042:	4619      	mov	r1, r3
 800b044:	4610      	mov	r0, r2
 800b046:	f7fe fc4f 	bl	80098e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b04a:	4b0c      	ldr	r3, [pc, #48]	@ (800b07c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	429a      	cmp	r2, r3
 800b052:	d202      	bcs.n	800b05a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b054:	4a09      	ldr	r2, [pc, #36]	@ (800b07c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	6013      	str	r3, [r2, #0]
}
 800b05a:	bf00      	nop
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	200003cc 	.word	0x200003cc
 800b068:	200002c8 	.word	0x200002c8
 800b06c:	200003d0 	.word	0x200003d0
 800b070:	200003b4 	.word	0x200003b4
 800b074:	20000384 	.word	0x20000384
 800b078:	20000380 	.word	0x20000380
 800b07c:	200003e8 	.word	0x200003e8

0800b080 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800b086:	2300      	movs	r3, #0
 800b088:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b08a:	f000 fae1 	bl	800b650 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b08e:	4b12      	ldr	r3, [pc, #72]	@ (800b0d8 <xTimerCreateTimerTask+0x58>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00b      	beq.n	800b0ae <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800b096:	4b11      	ldr	r3, [pc, #68]	@ (800b0dc <xTimerCreateTimerTask+0x5c>)
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	2302      	movs	r3, #2
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	2300      	movs	r3, #0
 800b0a0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800b0a4:	490e      	ldr	r1, [pc, #56]	@ (800b0e0 <xTimerCreateTimerTask+0x60>)
 800b0a6:	480f      	ldr	r0, [pc, #60]	@ (800b0e4 <xTimerCreateTimerTask+0x64>)
 800b0a8:	f7ff f932 	bl	800a310 <xTaskCreate>
 800b0ac:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10b      	bne.n	800b0cc <xTimerCreateTimerTask+0x4c>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	603b      	str	r3, [r7, #0]
}
 800b0c6:	bf00      	nop
 800b0c8:	bf00      	nop
 800b0ca:	e7fd      	b.n	800b0c8 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800b0cc:	687b      	ldr	r3, [r7, #4]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	20000424 	.word	0x20000424
 800b0dc:	20000428 	.word	0x20000428
 800b0e0:	0800ccd0 	.word	0x0800ccd0
 800b0e4:	0800b221 	.word	0x0800b221

0800b0e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08a      	sub	sp, #40	@ 0x28
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
 800b0f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10b      	bne.n	800b118 <xTimerGenericCommand+0x30>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	623b      	str	r3, [r7, #32]
}
 800b112:	bf00      	nop
 800b114:	bf00      	nop
 800b116:	e7fd      	b.n	800b114 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b118:	4b19      	ldr	r3, [pc, #100]	@ (800b180 <xTimerGenericCommand+0x98>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d02a      	beq.n	800b176 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2b05      	cmp	r3, #5
 800b130:	dc18      	bgt.n	800b164 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b132:	f7ff fe99 	bl	800ae68 <xTaskGetSchedulerState>
 800b136:	4603      	mov	r3, r0
 800b138:	2b02      	cmp	r3, #2
 800b13a:	d109      	bne.n	800b150 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b13c:	4b10      	ldr	r3, [pc, #64]	@ (800b180 <xTimerGenericCommand+0x98>)
 800b13e:	6818      	ldr	r0, [r3, #0]
 800b140:	f107 0114 	add.w	r1, r7, #20
 800b144:	2300      	movs	r3, #0
 800b146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b148:	f7fe fcf2 	bl	8009b30 <xQueueGenericSend>
 800b14c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b14e:	e012      	b.n	800b176 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b150:	4b0b      	ldr	r3, [pc, #44]	@ (800b180 <xTimerGenericCommand+0x98>)
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	f107 0114 	add.w	r1, r7, #20
 800b158:	2300      	movs	r3, #0
 800b15a:	2200      	movs	r2, #0
 800b15c:	f7fe fce8 	bl	8009b30 <xQueueGenericSend>
 800b160:	6278      	str	r0, [r7, #36]	@ 0x24
 800b162:	e008      	b.n	800b176 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b164:	4b06      	ldr	r3, [pc, #24]	@ (800b180 <xTimerGenericCommand+0x98>)
 800b166:	6818      	ldr	r0, [r3, #0]
 800b168:	f107 0114 	add.w	r1, r7, #20
 800b16c:	2300      	movs	r3, #0
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	f7fe fde0 	bl	8009d34 <xQueueGenericSendFromISR>
 800b174:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3728      	adds	r7, #40	@ 0x28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	20000424 	.word	0x20000424

0800b184 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af02      	add	r7, sp, #8
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b18e:	4b23      	ldr	r3, [pc, #140]	@ (800b21c <prvProcessExpiredTimer+0x98>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	3304      	adds	r3, #4
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fe fbdc 	bl	800995a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d023      	beq.n	800b1f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	699a      	ldr	r2, [r3, #24]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	18d1      	adds	r1, r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	6978      	ldr	r0, [r7, #20]
 800b1be:	f000 f8d5 	bl	800b36c <prvInsertTimerInActiveList>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d020      	beq.n	800b20a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	6978      	ldr	r0, [r7, #20]
 800b1d4:	f7ff ff88 	bl	800b0e8 <xTimerGenericCommand>
 800b1d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d114      	bne.n	800b20a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	60fb      	str	r3, [r7, #12]
}
 800b1f2:	bf00      	nop
 800b1f4:	bf00      	nop
 800b1f6:	e7fd      	b.n	800b1f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b1fe:	f023 0301 	bic.w	r3, r3, #1
 800b202:	b2da      	uxtb	r2, r3
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	6978      	ldr	r0, [r7, #20]
 800b210:	4798      	blx	r3
}
 800b212:	bf00      	nop
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	2000041c 	.word	0x2000041c

0800b220 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b228:	f107 0308 	add.w	r3, r7, #8
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 f859 	bl	800b2e4 <prvGetNextExpireTime>
 800b232:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	4619      	mov	r1, r3
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 f805 	bl	800b248 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b23e:	f000 f8d7 	bl	800b3f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b242:	bf00      	nop
 800b244:	e7f0      	b.n	800b228 <prvTimerTask+0x8>
	...

0800b248 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b252:	f7ff fa37 	bl	800a6c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b256:	f107 0308 	add.w	r3, r7, #8
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 f866 	bl	800b32c <prvSampleTimeNow>
 800b260:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d130      	bne.n	800b2ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10a      	bne.n	800b284 <prvProcessTimerOrBlockTask+0x3c>
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	429a      	cmp	r2, r3
 800b274:	d806      	bhi.n	800b284 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b276:	f7ff fa33 	bl	800a6e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b27a:	68f9      	ldr	r1, [r7, #12]
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f7ff ff81 	bl	800b184 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b282:	e024      	b.n	800b2ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d008      	beq.n	800b29c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b28a:	4b13      	ldr	r3, [pc, #76]	@ (800b2d8 <prvProcessTimerOrBlockTask+0x90>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <prvProcessTimerOrBlockTask+0x50>
 800b294:	2301      	movs	r3, #1
 800b296:	e000      	b.n	800b29a <prvProcessTimerOrBlockTask+0x52>
 800b298:	2300      	movs	r3, #0
 800b29a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b29c:	4b0f      	ldr	r3, [pc, #60]	@ (800b2dc <prvProcessTimerOrBlockTask+0x94>)
 800b29e:	6818      	ldr	r0, [r3, #0]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	f7fe fffd 	bl	800a2a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b2ae:	f7ff fa17 	bl	800a6e0 <xTaskResumeAll>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10a      	bne.n	800b2ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b2b8:	4b09      	ldr	r3, [pc, #36]	@ (800b2e0 <prvProcessTimerOrBlockTask+0x98>)
 800b2ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2be:	601a      	str	r2, [r3, #0]
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	f3bf 8f6f 	isb	sy
}
 800b2c8:	e001      	b.n	800b2ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b2ca:	f7ff fa09 	bl	800a6e0 <xTaskResumeAll>
}
 800b2ce:	bf00      	nop
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	20000420 	.word	0x20000420
 800b2dc:	20000424 	.word	0x20000424
 800b2e0:	e000ed04 	.word	0xe000ed04

0800b2e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b2ec:	4b0e      	ldr	r3, [pc, #56]	@ (800b328 <prvGetNextExpireTime+0x44>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <prvGetNextExpireTime+0x16>
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	e000      	b.n	800b2fc <prvGetNextExpireTime+0x18>
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d105      	bne.n	800b314 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b308:	4b07      	ldr	r3, [pc, #28]	@ (800b328 <prvGetNextExpireTime+0x44>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	60fb      	str	r3, [r7, #12]
 800b312:	e001      	b.n	800b318 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b314:	2300      	movs	r3, #0
 800b316:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b318:	68fb      	ldr	r3, [r7, #12]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	2000041c 	.word	0x2000041c

0800b32c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b334:	f7ff fa72 	bl	800a81c <xTaskGetTickCount>
 800b338:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b33a:	4b0b      	ldr	r3, [pc, #44]	@ (800b368 <prvSampleTimeNow+0x3c>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	429a      	cmp	r2, r3
 800b342:	d205      	bcs.n	800b350 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b344:	f000 f91e 	bl	800b584 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	e002      	b.n	800b356 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b356:	4a04      	ldr	r2, [pc, #16]	@ (800b368 <prvSampleTimeNow+0x3c>)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b35c:	68fb      	ldr	r3, [r7, #12]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	2000042c 	.word	0x2000042c

0800b36c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
 800b378:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b37a:	2300      	movs	r3, #0
 800b37c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d812      	bhi.n	800b3b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	1ad2      	subs	r2, r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d302      	bcc.n	800b3a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	617b      	str	r3, [r7, #20]
 800b3a4:	e01b      	b.n	800b3de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b3a6:	4b10      	ldr	r3, [pc, #64]	@ (800b3e8 <prvInsertTimerInActiveList+0x7c>)
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	f7fe fa99 	bl	80098e8 <vListInsert>
 800b3b6:	e012      	b.n	800b3de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d206      	bcs.n	800b3ce <prvInsertTimerInActiveList+0x62>
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d302      	bcc.n	800b3ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	617b      	str	r3, [r7, #20]
 800b3cc:	e007      	b.n	800b3de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3ce:	4b07      	ldr	r3, [pc, #28]	@ (800b3ec <prvInsertTimerInActiveList+0x80>)
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	3304      	adds	r3, #4
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	4610      	mov	r0, r2
 800b3da:	f7fe fa85 	bl	80098e8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b3de:	697b      	ldr	r3, [r7, #20]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	20000420 	.word	0x20000420
 800b3ec:	2000041c 	.word	0x2000041c

0800b3f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b08c      	sub	sp, #48	@ 0x30
 800b3f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b3f6:	e0b2      	b.n	800b55e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f2c0 80af 	blt.w	800b55e <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d004      	beq.n	800b416 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40e:	3304      	adds	r3, #4
 800b410:	4618      	mov	r0, r3
 800b412:	f7fe faa2 	bl	800995a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b416:	1d3b      	adds	r3, r7, #4
 800b418:	4618      	mov	r0, r3
 800b41a:	f7ff ff87 	bl	800b32c <prvSampleTimeNow>
 800b41e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2b09      	cmp	r3, #9
 800b424:	f200 8098 	bhi.w	800b558 <prvProcessReceivedCommands+0x168>
 800b428:	a201      	add	r2, pc, #4	@ (adr r2, 800b430 <prvProcessReceivedCommands+0x40>)
 800b42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42e:	bf00      	nop
 800b430:	0800b459 	.word	0x0800b459
 800b434:	0800b459 	.word	0x0800b459
 800b438:	0800b459 	.word	0x0800b459
 800b43c:	0800b4cf 	.word	0x0800b4cf
 800b440:	0800b4e3 	.word	0x0800b4e3
 800b444:	0800b52f 	.word	0x0800b52f
 800b448:	0800b459 	.word	0x0800b459
 800b44c:	0800b459 	.word	0x0800b459
 800b450:	0800b4cf 	.word	0x0800b4cf
 800b454:	0800b4e3 	.word	0x0800b4e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b45e:	f043 0301 	orr.w	r3, r3, #1
 800b462:	b2da      	uxtb	r2, r3
 800b464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b466:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	18d1      	adds	r1, r2, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6a3a      	ldr	r2, [r7, #32]
 800b476:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b478:	f7ff ff78 	bl	800b36c <prvInsertTimerInActiveList>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d06c      	beq.n	800b55c <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b488:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b490:	f003 0304 	and.w	r3, r3, #4
 800b494:	2b00      	cmp	r3, #0
 800b496:	d061      	beq.n	800b55c <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49c:	699b      	ldr	r3, [r3, #24]
 800b49e:	441a      	add	r2, r3
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b4aa:	f7ff fe1d 	bl	800b0e8 <xTimerGenericCommand>
 800b4ae:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d152      	bne.n	800b55c <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800b4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ba:	f383 8811 	msr	BASEPRI, r3
 800b4be:	f3bf 8f6f 	isb	sy
 800b4c2:	f3bf 8f4f 	dsb	sy
 800b4c6:	61bb      	str	r3, [r7, #24]
}
 800b4c8:	bf00      	nop
 800b4ca:	bf00      	nop
 800b4cc:	e7fd      	b.n	800b4ca <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b4d4:	f023 0301 	bic.w	r3, r3, #1
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800b4e0:	e03d      	b.n	800b55e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b4e8:	f043 0301 	orr.w	r3, r3, #1
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10b      	bne.n	800b51a <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	617b      	str	r3, [r7, #20]
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	e7fd      	b.n	800b516 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51c:	699a      	ldr	r2, [r3, #24]
 800b51e:	6a3b      	ldr	r3, [r7, #32]
 800b520:	18d1      	adds	r1, r2, r3
 800b522:	6a3b      	ldr	r3, [r7, #32]
 800b524:	6a3a      	ldr	r2, [r7, #32]
 800b526:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b528:	f7ff ff20 	bl	800b36c <prvInsertTimerInActiveList>
					break;
 800b52c:	e017      	b.n	800b55e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b530:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b534:	f003 0302 	and.w	r3, r3, #2
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d103      	bne.n	800b544 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800b53c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b53e:	f000 fbdb 	bl	800bcf8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b542:	e00c      	b.n	800b55e <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b546:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b54a:	f023 0301 	bic.w	r3, r3, #1
 800b54e:	b2da      	uxtb	r2, r3
 800b550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b552:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800b556:	e002      	b.n	800b55e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800b558:	bf00      	nop
 800b55a:	e000      	b.n	800b55e <prvProcessReceivedCommands+0x16e>
					break;
 800b55c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b55e:	4b08      	ldr	r3, [pc, #32]	@ (800b580 <prvProcessReceivedCommands+0x190>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f107 0108 	add.w	r1, r7, #8
 800b566:	2200      	movs	r2, #0
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fe fc81 	bl	8009e70 <xQueueReceive>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	f47f af41 	bne.w	800b3f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b576:	bf00      	nop
 800b578:	bf00      	nop
 800b57a:	3728      	adds	r7, #40	@ 0x28
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	20000424 	.word	0x20000424

0800b584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b088      	sub	sp, #32
 800b588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b58a:	e049      	b.n	800b620 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b58c:	4b2e      	ldr	r3, [pc, #184]	@ (800b648 <prvSwitchTimerLists+0xc4>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b596:	4b2c      	ldr	r3, [pc, #176]	@ (800b648 <prvSwitchTimerLists+0xc4>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fe f9d8 	bl	800995a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b5b8:	f003 0304 	and.w	r3, r3, #4
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d02f      	beq.n	800b620 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d90e      	bls.n	800b5f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5de:	4b1a      	ldr	r3, [pc, #104]	@ (800b648 <prvSwitchTimerLists+0xc4>)
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	f7fe f97d 	bl	80098e8 <vListInsert>
 800b5ee:	e017      	b.n	800b620 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	693a      	ldr	r2, [r7, #16]
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f7ff fd74 	bl	800b0e8 <xTimerGenericCommand>
 800b600:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10b      	bne.n	800b620 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b60c:	f383 8811 	msr	BASEPRI, r3
 800b610:	f3bf 8f6f 	isb	sy
 800b614:	f3bf 8f4f 	dsb	sy
 800b618:	603b      	str	r3, [r7, #0]
}
 800b61a:	bf00      	nop
 800b61c:	bf00      	nop
 800b61e:	e7fd      	b.n	800b61c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b620:	4b09      	ldr	r3, [pc, #36]	@ (800b648 <prvSwitchTimerLists+0xc4>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1b0      	bne.n	800b58c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b62a:	4b07      	ldr	r3, [pc, #28]	@ (800b648 <prvSwitchTimerLists+0xc4>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b630:	4b06      	ldr	r3, [pc, #24]	@ (800b64c <prvSwitchTimerLists+0xc8>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a04      	ldr	r2, [pc, #16]	@ (800b648 <prvSwitchTimerLists+0xc4>)
 800b636:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b638:	4a04      	ldr	r2, [pc, #16]	@ (800b64c <prvSwitchTimerLists+0xc8>)
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	6013      	str	r3, [r2, #0]
}
 800b63e:	bf00      	nop
 800b640:	3718      	adds	r7, #24
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	2000041c 	.word	0x2000041c
 800b64c:	20000420 	.word	0x20000420

0800b650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b654:	f000 f960 	bl	800b918 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b658:	4b12      	ldr	r3, [pc, #72]	@ (800b6a4 <prvCheckForValidListAndQueue+0x54>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d11d      	bne.n	800b69c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800b660:	4811      	ldr	r0, [pc, #68]	@ (800b6a8 <prvCheckForValidListAndQueue+0x58>)
 800b662:	f7fe f8f0 	bl	8009846 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b666:	4811      	ldr	r0, [pc, #68]	@ (800b6ac <prvCheckForValidListAndQueue+0x5c>)
 800b668:	f7fe f8ed 	bl	8009846 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b66c:	4b10      	ldr	r3, [pc, #64]	@ (800b6b0 <prvCheckForValidListAndQueue+0x60>)
 800b66e:	4a0e      	ldr	r2, [pc, #56]	@ (800b6a8 <prvCheckForValidListAndQueue+0x58>)
 800b670:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b672:	4b10      	ldr	r3, [pc, #64]	@ (800b6b4 <prvCheckForValidListAndQueue+0x64>)
 800b674:	4a0d      	ldr	r2, [pc, #52]	@ (800b6ac <prvCheckForValidListAndQueue+0x5c>)
 800b676:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b678:	2200      	movs	r2, #0
 800b67a:	210c      	movs	r1, #12
 800b67c:	200a      	movs	r0, #10
 800b67e:	f7fe fa01 	bl	8009a84 <xQueueGenericCreate>
 800b682:	4603      	mov	r3, r0
 800b684:	4a07      	ldr	r2, [pc, #28]	@ (800b6a4 <prvCheckForValidListAndQueue+0x54>)
 800b686:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b688:	4b06      	ldr	r3, [pc, #24]	@ (800b6a4 <prvCheckForValidListAndQueue+0x54>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d005      	beq.n	800b69c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b690:	4b04      	ldr	r3, [pc, #16]	@ (800b6a4 <prvCheckForValidListAndQueue+0x54>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4908      	ldr	r1, [pc, #32]	@ (800b6b8 <prvCheckForValidListAndQueue+0x68>)
 800b696:	4618      	mov	r0, r3
 800b698:	f7fe fddc 	bl	800a254 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b69c:	f000 f96e 	bl	800b97c <vPortExitCritical>
}
 800b6a0:	bf00      	nop
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	20000424 	.word	0x20000424
 800b6a8:	200003f4 	.word	0x200003f4
 800b6ac:	20000408 	.word	0x20000408
 800b6b0:	2000041c 	.word	0x2000041c
 800b6b4:	20000420 	.word	0x20000420
 800b6b8:	0800ccd8 	.word	0x0800ccd8

0800b6bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	3b04      	subs	r3, #4
 800b6cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b6d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3b04      	subs	r3, #4
 800b6da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f023 0201 	bic.w	r2, r3, #1
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3b04      	subs	r3, #4
 800b6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b6ec:	4a0c      	ldr	r2, [pc, #48]	@ (800b720 <pxPortInitialiseStack+0x64>)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	3b14      	subs	r3, #20
 800b6f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	3b04      	subs	r3, #4
 800b702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f06f 0202 	mvn.w	r2, #2
 800b70a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	3b20      	subs	r3, #32
 800b710:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b712:	68fb      	ldr	r3, [r7, #12]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3714      	adds	r7, #20
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr
 800b720:	0800b725 	.word	0x0800b725

0800b724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b72a:	2300      	movs	r3, #0
 800b72c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b72e:	4b13      	ldr	r3, [pc, #76]	@ (800b77c <prvTaskExitError+0x58>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b736:	d00b      	beq.n	800b750 <prvTaskExitError+0x2c>
	__asm volatile
 800b738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	60fb      	str	r3, [r7, #12]
}
 800b74a:	bf00      	nop
 800b74c:	bf00      	nop
 800b74e:	e7fd      	b.n	800b74c <prvTaskExitError+0x28>
	__asm volatile
 800b750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	60bb      	str	r3, [r7, #8]
}
 800b762:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b764:	bf00      	nop
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d0fc      	beq.n	800b766 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b76c:	bf00      	nop
 800b76e:	bf00      	nop
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	2000010c 	.word	0x2000010c

0800b780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b780:	4b07      	ldr	r3, [pc, #28]	@ (800b7a0 <pxCurrentTCBConst2>)
 800b782:	6819      	ldr	r1, [r3, #0]
 800b784:	6808      	ldr	r0, [r1, #0]
 800b786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78a:	f380 8809 	msr	PSP, r0
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f04f 0000 	mov.w	r0, #0
 800b796:	f380 8811 	msr	BASEPRI, r0
 800b79a:	4770      	bx	lr
 800b79c:	f3af 8000 	nop.w

0800b7a0 <pxCurrentTCBConst2>:
 800b7a0:	200002c8 	.word	0x200002c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop

0800b7a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b7a8:	4808      	ldr	r0, [pc, #32]	@ (800b7cc <prvPortStartFirstTask+0x24>)
 800b7aa:	6800      	ldr	r0, [r0, #0]
 800b7ac:	6800      	ldr	r0, [r0, #0]
 800b7ae:	f380 8808 	msr	MSP, r0
 800b7b2:	f04f 0000 	mov.w	r0, #0
 800b7b6:	f380 8814 	msr	CONTROL, r0
 800b7ba:	b662      	cpsie	i
 800b7bc:	b661      	cpsie	f
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	df00      	svc	0
 800b7c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b7ca:	bf00      	nop
 800b7cc:	e000ed08 	.word	0xe000ed08

0800b7d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b7d6:	4b47      	ldr	r3, [pc, #284]	@ (800b8f4 <xPortStartScheduler+0x124>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a47      	ldr	r2, [pc, #284]	@ (800b8f8 <xPortStartScheduler+0x128>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d10b      	bne.n	800b7f8 <xPortStartScheduler+0x28>
	__asm volatile
 800b7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	60fb      	str	r3, [r7, #12]
}
 800b7f2:	bf00      	nop
 800b7f4:	bf00      	nop
 800b7f6:	e7fd      	b.n	800b7f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b7f8:	4b3e      	ldr	r3, [pc, #248]	@ (800b8f4 <xPortStartScheduler+0x124>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a3f      	ldr	r2, [pc, #252]	@ (800b8fc <xPortStartScheduler+0x12c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d10b      	bne.n	800b81a <xPortStartScheduler+0x4a>
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	613b      	str	r3, [r7, #16]
}
 800b814:	bf00      	nop
 800b816:	bf00      	nop
 800b818:	e7fd      	b.n	800b816 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b81a:	4b39      	ldr	r3, [pc, #228]	@ (800b900 <xPortStartScheduler+0x130>)
 800b81c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	b2db      	uxtb	r3, r3
 800b824:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	22ff      	movs	r2, #255	@ 0xff
 800b82a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	b2db      	uxtb	r3, r3
 800b832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b834:	78fb      	ldrb	r3, [r7, #3]
 800b836:	b2db      	uxtb	r3, r3
 800b838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	4b31      	ldr	r3, [pc, #196]	@ (800b904 <xPortStartScheduler+0x134>)
 800b840:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b842:	4b31      	ldr	r3, [pc, #196]	@ (800b908 <xPortStartScheduler+0x138>)
 800b844:	2207      	movs	r2, #7
 800b846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b848:	e009      	b.n	800b85e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b84a:	4b2f      	ldr	r3, [pc, #188]	@ (800b908 <xPortStartScheduler+0x138>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	3b01      	subs	r3, #1
 800b850:	4a2d      	ldr	r2, [pc, #180]	@ (800b908 <xPortStartScheduler+0x138>)
 800b852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b854:	78fb      	ldrb	r3, [r7, #3]
 800b856:	b2db      	uxtb	r3, r3
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b85e:	78fb      	ldrb	r3, [r7, #3]
 800b860:	b2db      	uxtb	r3, r3
 800b862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b866:	2b80      	cmp	r3, #128	@ 0x80
 800b868:	d0ef      	beq.n	800b84a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b86a:	4b27      	ldr	r3, [pc, #156]	@ (800b908 <xPortStartScheduler+0x138>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f1c3 0307 	rsb	r3, r3, #7
 800b872:	2b04      	cmp	r3, #4
 800b874:	d00b      	beq.n	800b88e <xPortStartScheduler+0xbe>
	__asm volatile
 800b876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b87a:	f383 8811 	msr	BASEPRI, r3
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f3bf 8f4f 	dsb	sy
 800b886:	60bb      	str	r3, [r7, #8]
}
 800b888:	bf00      	nop
 800b88a:	bf00      	nop
 800b88c:	e7fd      	b.n	800b88a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b88e:	4b1e      	ldr	r3, [pc, #120]	@ (800b908 <xPortStartScheduler+0x138>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	021b      	lsls	r3, r3, #8
 800b894:	4a1c      	ldr	r2, [pc, #112]	@ (800b908 <xPortStartScheduler+0x138>)
 800b896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b898:	4b1b      	ldr	r3, [pc, #108]	@ (800b908 <xPortStartScheduler+0x138>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b8a0:	4a19      	ldr	r2, [pc, #100]	@ (800b908 <xPortStartScheduler+0x138>)
 800b8a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	b2da      	uxtb	r2, r3
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b8ac:	4b17      	ldr	r3, [pc, #92]	@ (800b90c <xPortStartScheduler+0x13c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a16      	ldr	r2, [pc, #88]	@ (800b90c <xPortStartScheduler+0x13c>)
 800b8b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b8b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b8b8:	4b14      	ldr	r3, [pc, #80]	@ (800b90c <xPortStartScheduler+0x13c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a13      	ldr	r2, [pc, #76]	@ (800b90c <xPortStartScheduler+0x13c>)
 800b8be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b8c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b8c4:	f000 f8da 	bl	800ba7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b8c8:	4b11      	ldr	r3, [pc, #68]	@ (800b910 <xPortStartScheduler+0x140>)
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b8ce:	f000 f8f9 	bl	800bac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b8d2:	4b10      	ldr	r3, [pc, #64]	@ (800b914 <xPortStartScheduler+0x144>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a0f      	ldr	r2, [pc, #60]	@ (800b914 <xPortStartScheduler+0x144>)
 800b8d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b8dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b8de:	f7ff ff63 	bl	800b7a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b8e2:	f7ff f865 	bl	800a9b0 <vTaskSwitchContext>
	prvTaskExitError();
 800b8e6:	f7ff ff1d 	bl	800b724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3718      	adds	r7, #24
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	e000ed00 	.word	0xe000ed00
 800b8f8:	410fc271 	.word	0x410fc271
 800b8fc:	410fc270 	.word	0x410fc270
 800b900:	e000e400 	.word	0xe000e400
 800b904:	20000430 	.word	0x20000430
 800b908:	20000434 	.word	0x20000434
 800b90c:	e000ed20 	.word	0xe000ed20
 800b910:	2000010c 	.word	0x2000010c
 800b914:	e000ef34 	.word	0xe000ef34

0800b918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
	__asm volatile
 800b91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b922:	f383 8811 	msr	BASEPRI, r3
 800b926:	f3bf 8f6f 	isb	sy
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	607b      	str	r3, [r7, #4]
}
 800b930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b932:	4b10      	ldr	r3, [pc, #64]	@ (800b974 <vPortEnterCritical+0x5c>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	3301      	adds	r3, #1
 800b938:	4a0e      	ldr	r2, [pc, #56]	@ (800b974 <vPortEnterCritical+0x5c>)
 800b93a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b93c:	4b0d      	ldr	r3, [pc, #52]	@ (800b974 <vPortEnterCritical+0x5c>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d110      	bne.n	800b966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b944:	4b0c      	ldr	r3, [pc, #48]	@ (800b978 <vPortEnterCritical+0x60>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00b      	beq.n	800b966 <vPortEnterCritical+0x4e>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	603b      	str	r3, [r7, #0]
}
 800b960:	bf00      	nop
 800b962:	bf00      	nop
 800b964:	e7fd      	b.n	800b962 <vPortEnterCritical+0x4a>
	}
}
 800b966:	bf00      	nop
 800b968:	370c      	adds	r7, #12
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	2000010c 	.word	0x2000010c
 800b978:	e000ed04 	.word	0xe000ed04

0800b97c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b982:	4b12      	ldr	r3, [pc, #72]	@ (800b9cc <vPortExitCritical+0x50>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10b      	bne.n	800b9a2 <vPortExitCritical+0x26>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	607b      	str	r3, [r7, #4]
}
 800b99c:	bf00      	nop
 800b99e:	bf00      	nop
 800b9a0:	e7fd      	b.n	800b99e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b9cc <vPortExitCritical+0x50>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	4a08      	ldr	r2, [pc, #32]	@ (800b9cc <vPortExitCritical+0x50>)
 800b9aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b9ac:	4b07      	ldr	r3, [pc, #28]	@ (800b9cc <vPortExitCritical+0x50>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d105      	bne.n	800b9c0 <vPortExitCritical+0x44>
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	f383 8811 	msr	BASEPRI, r3
}
 800b9be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b9c0:	bf00      	nop
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	2000010c 	.word	0x2000010c

0800b9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b9d0:	f3ef 8009 	mrs	r0, PSP
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	4b15      	ldr	r3, [pc, #84]	@ (800ba30 <pxCurrentTCBConst>)
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	f01e 0f10 	tst.w	lr, #16
 800b9e0:	bf08      	it	eq
 800b9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ea:	6010      	str	r0, [r2, #0]
 800b9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b9f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b9f4:	f380 8811 	msr	BASEPRI, r0
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f7fe ffd6 	bl	800a9b0 <vTaskSwitchContext>
 800ba04:	f04f 0000 	mov.w	r0, #0
 800ba08:	f380 8811 	msr	BASEPRI, r0
 800ba0c:	bc09      	pop	{r0, r3}
 800ba0e:	6819      	ldr	r1, [r3, #0]
 800ba10:	6808      	ldr	r0, [r1, #0]
 800ba12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba16:	f01e 0f10 	tst.w	lr, #16
 800ba1a:	bf08      	it	eq
 800ba1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ba20:	f380 8809 	msr	PSP, r0
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	f3af 8000 	nop.w

0800ba30 <pxCurrentTCBConst>:
 800ba30:	200002c8 	.word	0x200002c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ba34:	bf00      	nop
 800ba36:	bf00      	nop

0800ba38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	607b      	str	r3, [r7, #4]
}
 800ba50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba52:	f7fe fef3 	bl	800a83c <xTaskIncrementTick>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d003      	beq.n	800ba64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba5c:	4b06      	ldr	r3, [pc, #24]	@ (800ba78 <SysTick_Handler+0x40>)
 800ba5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	2300      	movs	r3, #0
 800ba66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	f383 8811 	msr	BASEPRI, r3
}
 800ba6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba70:	bf00      	nop
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	e000ed04 	.word	0xe000ed04

0800ba7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba80:	4b0b      	ldr	r3, [pc, #44]	@ (800bab0 <vPortSetupTimerInterrupt+0x34>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba86:	4b0b      	ldr	r3, [pc, #44]	@ (800bab4 <vPortSetupTimerInterrupt+0x38>)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba8c:	4b0a      	ldr	r3, [pc, #40]	@ (800bab8 <vPortSetupTimerInterrupt+0x3c>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a0a      	ldr	r2, [pc, #40]	@ (800babc <vPortSetupTimerInterrupt+0x40>)
 800ba92:	fba2 2303 	umull	r2, r3, r2, r3
 800ba96:	099b      	lsrs	r3, r3, #6
 800ba98:	4a09      	ldr	r2, [pc, #36]	@ (800bac0 <vPortSetupTimerInterrupt+0x44>)
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba9e:	4b04      	ldr	r3, [pc, #16]	@ (800bab0 <vPortSetupTimerInterrupt+0x34>)
 800baa0:	2207      	movs	r2, #7
 800baa2:	601a      	str	r2, [r3, #0]
}
 800baa4:	bf00      	nop
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	e000e010 	.word	0xe000e010
 800bab4:	e000e018 	.word	0xe000e018
 800bab8:	20000000 	.word	0x20000000
 800babc:	10624dd3 	.word	0x10624dd3
 800bac0:	e000e014 	.word	0xe000e014

0800bac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bad4 <vPortEnableVFP+0x10>
 800bac8:	6801      	ldr	r1, [r0, #0]
 800baca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bace:	6001      	str	r1, [r0, #0]
 800bad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bad2:	bf00      	nop
 800bad4:	e000ed88 	.word	0xe000ed88

0800bad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bade:	f3ef 8305 	mrs	r3, IPSR
 800bae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b0f      	cmp	r3, #15
 800bae8:	d915      	bls.n	800bb16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800baea:	4a18      	ldr	r2, [pc, #96]	@ (800bb4c <vPortValidateInterruptPriority+0x74>)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	4413      	add	r3, r2
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800baf4:	4b16      	ldr	r3, [pc, #88]	@ (800bb50 <vPortValidateInterruptPriority+0x78>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	7afa      	ldrb	r2, [r7, #11]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d20b      	bcs.n	800bb16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb02:	f383 8811 	msr	BASEPRI, r3
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	607b      	str	r3, [r7, #4]
}
 800bb10:	bf00      	nop
 800bb12:	bf00      	nop
 800bb14:	e7fd      	b.n	800bb12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb16:	4b0f      	ldr	r3, [pc, #60]	@ (800bb54 <vPortValidateInterruptPriority+0x7c>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bb1e:	4b0e      	ldr	r3, [pc, #56]	@ (800bb58 <vPortValidateInterruptPriority+0x80>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d90b      	bls.n	800bb3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	603b      	str	r3, [r7, #0]
}
 800bb38:	bf00      	nop
 800bb3a:	bf00      	nop
 800bb3c:	e7fd      	b.n	800bb3a <vPortValidateInterruptPriority+0x62>
	}
 800bb3e:	bf00      	nop
 800bb40:	3714      	adds	r7, #20
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	e000e3f0 	.word	0xe000e3f0
 800bb50:	20000430 	.word	0x20000430
 800bb54:	e000ed0c 	.word	0xe000ed0c
 800bb58:	20000434 	.word	0x20000434

0800bb5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	@ 0x28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb64:	2300      	movs	r3, #0
 800bb66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb68:	f7fe fdac 	bl	800a6c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb6c:	4b5c      	ldr	r3, [pc, #368]	@ (800bce0 <pvPortMalloc+0x184>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb74:	f000 f924 	bl	800bdc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb78:	4b5a      	ldr	r3, [pc, #360]	@ (800bce4 <pvPortMalloc+0x188>)
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4013      	ands	r3, r2
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f040 8095 	bne.w	800bcb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d01e      	beq.n	800bbca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bb8c:	2208      	movs	r2, #8
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4413      	add	r3, r2
 800bb92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f003 0307 	and.w	r3, r3, #7
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d015      	beq.n	800bbca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f023 0307 	bic.w	r3, r3, #7
 800bba4:	3308      	adds	r3, #8
 800bba6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f003 0307 	and.w	r3, r3, #7
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00b      	beq.n	800bbca <pvPortMalloc+0x6e>
	__asm volatile
 800bbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	617b      	str	r3, [r7, #20]
}
 800bbc4:	bf00      	nop
 800bbc6:	bf00      	nop
 800bbc8:	e7fd      	b.n	800bbc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d06f      	beq.n	800bcb0 <pvPortMalloc+0x154>
 800bbd0:	4b45      	ldr	r3, [pc, #276]	@ (800bce8 <pvPortMalloc+0x18c>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d86a      	bhi.n	800bcb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bbda:	4b44      	ldr	r3, [pc, #272]	@ (800bcec <pvPortMalloc+0x190>)
 800bbdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bbde:	4b43      	ldr	r3, [pc, #268]	@ (800bcec <pvPortMalloc+0x190>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbe4:	e004      	b.n	800bbf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d903      	bls.n	800bc02 <pvPortMalloc+0xa6>
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1f1      	bne.n	800bbe6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc02:	4b37      	ldr	r3, [pc, #220]	@ (800bce0 <pvPortMalloc+0x184>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d051      	beq.n	800bcb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc0c:	6a3b      	ldr	r3, [r7, #32]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2208      	movs	r2, #8
 800bc12:	4413      	add	r3, r2
 800bc14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	6a3b      	ldr	r3, [r7, #32]
 800bc1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc20:	685a      	ldr	r2, [r3, #4]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	1ad2      	subs	r2, r2, r3
 800bc26:	2308      	movs	r3, #8
 800bc28:	005b      	lsls	r3, r3, #1
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d920      	bls.n	800bc70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4413      	add	r3, r2
 800bc34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	f003 0307 	and.w	r3, r3, #7
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00b      	beq.n	800bc58 <pvPortMalloc+0xfc>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	613b      	str	r3, [r7, #16]
}
 800bc52:	bf00      	nop
 800bc54:	bf00      	nop
 800bc56:	e7fd      	b.n	800bc54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	1ad2      	subs	r2, r2, r3
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc6a:	69b8      	ldr	r0, [r7, #24]
 800bc6c:	f000 f90a 	bl	800be84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc70:	4b1d      	ldr	r3, [pc, #116]	@ (800bce8 <pvPortMalloc+0x18c>)
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	4a1b      	ldr	r2, [pc, #108]	@ (800bce8 <pvPortMalloc+0x18c>)
 800bc7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc7e:	4b1a      	ldr	r3, [pc, #104]	@ (800bce8 <pvPortMalloc+0x18c>)
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	4b1b      	ldr	r3, [pc, #108]	@ (800bcf0 <pvPortMalloc+0x194>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d203      	bcs.n	800bc92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc8a:	4b17      	ldr	r3, [pc, #92]	@ (800bce8 <pvPortMalloc+0x18c>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a18      	ldr	r2, [pc, #96]	@ (800bcf0 <pvPortMalloc+0x194>)
 800bc90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc94:	685a      	ldr	r2, [r3, #4]
 800bc96:	4b13      	ldr	r3, [pc, #76]	@ (800bce4 <pvPortMalloc+0x188>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	431a      	orrs	r2, r3
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca2:	2200      	movs	r2, #0
 800bca4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bca6:	4b13      	ldr	r3, [pc, #76]	@ (800bcf4 <pvPortMalloc+0x198>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	4a11      	ldr	r2, [pc, #68]	@ (800bcf4 <pvPortMalloc+0x198>)
 800bcae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bcb0:	f7fe fd16 	bl	800a6e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	f003 0307 	and.w	r3, r3, #7
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00b      	beq.n	800bcd6 <pvPortMalloc+0x17a>
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	60fb      	str	r3, [r7, #12]
}
 800bcd0:	bf00      	nop
 800bcd2:	bf00      	nop
 800bcd4:	e7fd      	b.n	800bcd2 <pvPortMalloc+0x176>
	return pvReturn;
 800bcd6:	69fb      	ldr	r3, [r7, #28]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3728      	adds	r7, #40	@ 0x28
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	2000a080 	.word	0x2000a080
 800bce4:	2000a094 	.word	0x2000a094
 800bce8:	2000a084 	.word	0x2000a084
 800bcec:	2000a078 	.word	0x2000a078
 800bcf0:	2000a088 	.word	0x2000a088
 800bcf4:	2000a08c 	.word	0x2000a08c

0800bcf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d04f      	beq.n	800bdaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bd0a:	2308      	movs	r3, #8
 800bd0c:	425b      	negs	r3, r3
 800bd0e:	697a      	ldr	r2, [r7, #20]
 800bd10:	4413      	add	r3, r2
 800bd12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	4b25      	ldr	r3, [pc, #148]	@ (800bdb4 <vPortFree+0xbc>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4013      	ands	r3, r2
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10b      	bne.n	800bd3e <vPortFree+0x46>
	__asm volatile
 800bd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	60fb      	str	r3, [r7, #12]
}
 800bd38:	bf00      	nop
 800bd3a:	bf00      	nop
 800bd3c:	e7fd      	b.n	800bd3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00b      	beq.n	800bd5e <vPortFree+0x66>
	__asm volatile
 800bd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd4a:	f383 8811 	msr	BASEPRI, r3
 800bd4e:	f3bf 8f6f 	isb	sy
 800bd52:	f3bf 8f4f 	dsb	sy
 800bd56:	60bb      	str	r3, [r7, #8]
}
 800bd58:	bf00      	nop
 800bd5a:	bf00      	nop
 800bd5c:	e7fd      	b.n	800bd5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	685a      	ldr	r2, [r3, #4]
 800bd62:	4b14      	ldr	r3, [pc, #80]	@ (800bdb4 <vPortFree+0xbc>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4013      	ands	r3, r2
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d01e      	beq.n	800bdaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d11a      	bne.n	800bdaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	4b0e      	ldr	r3, [pc, #56]	@ (800bdb4 <vPortFree+0xbc>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	43db      	mvns	r3, r3
 800bd7e:	401a      	ands	r2, r3
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd84:	f7fe fc9e 	bl	800a6c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	685a      	ldr	r2, [r3, #4]
 800bd8c:	4b0a      	ldr	r3, [pc, #40]	@ (800bdb8 <vPortFree+0xc0>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4413      	add	r3, r2
 800bd92:	4a09      	ldr	r2, [pc, #36]	@ (800bdb8 <vPortFree+0xc0>)
 800bd94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd96:	6938      	ldr	r0, [r7, #16]
 800bd98:	f000 f874 	bl	800be84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd9c:	4b07      	ldr	r3, [pc, #28]	@ (800bdbc <vPortFree+0xc4>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	3301      	adds	r3, #1
 800bda2:	4a06      	ldr	r2, [pc, #24]	@ (800bdbc <vPortFree+0xc4>)
 800bda4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bda6:	f7fe fc9b 	bl	800a6e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bdaa:	bf00      	nop
 800bdac:	3718      	adds	r7, #24
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	2000a094 	.word	0x2000a094
 800bdb8:	2000a084 	.word	0x2000a084
 800bdbc:	2000a090 	.word	0x2000a090

0800bdc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bdc6:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800bdca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bdcc:	4b27      	ldr	r3, [pc, #156]	@ (800be6c <prvHeapInit+0xac>)
 800bdce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f003 0307 	and.w	r3, r3, #7
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00c      	beq.n	800bdf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	3307      	adds	r3, #7
 800bdde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f023 0307 	bic.w	r3, r3, #7
 800bde6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bde8:	68ba      	ldr	r2, [r7, #8]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	4a1f      	ldr	r2, [pc, #124]	@ (800be6c <prvHeapInit+0xac>)
 800bdf0:	4413      	add	r3, r2
 800bdf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bdf8:	4a1d      	ldr	r2, [pc, #116]	@ (800be70 <prvHeapInit+0xb0>)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bdfe:	4b1c      	ldr	r3, [pc, #112]	@ (800be70 <prvHeapInit+0xb0>)
 800be00:	2200      	movs	r2, #0
 800be02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	68ba      	ldr	r2, [r7, #8]
 800be08:	4413      	add	r3, r2
 800be0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800be0c:	2208      	movs	r2, #8
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	1a9b      	subs	r3, r3, r2
 800be12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f023 0307 	bic.w	r3, r3, #7
 800be1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	4a15      	ldr	r2, [pc, #84]	@ (800be74 <prvHeapInit+0xb4>)
 800be20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be22:	4b14      	ldr	r3, [pc, #80]	@ (800be74 <prvHeapInit+0xb4>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2200      	movs	r2, #0
 800be28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be2a:	4b12      	ldr	r3, [pc, #72]	@ (800be74 <prvHeapInit+0xb4>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2200      	movs	r2, #0
 800be30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	1ad2      	subs	r2, r2, r3
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be40:	4b0c      	ldr	r3, [pc, #48]	@ (800be74 <prvHeapInit+0xb4>)
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	4a0a      	ldr	r2, [pc, #40]	@ (800be78 <prvHeapInit+0xb8>)
 800be4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	4a09      	ldr	r2, [pc, #36]	@ (800be7c <prvHeapInit+0xbc>)
 800be56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be58:	4b09      	ldr	r3, [pc, #36]	@ (800be80 <prvHeapInit+0xc0>)
 800be5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800be5e:	601a      	str	r2, [r3, #0]
}
 800be60:	bf00      	nop
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr
 800be6c:	20000438 	.word	0x20000438
 800be70:	2000a078 	.word	0x2000a078
 800be74:	2000a080 	.word	0x2000a080
 800be78:	2000a088 	.word	0x2000a088
 800be7c:	2000a084 	.word	0x2000a084
 800be80:	2000a094 	.word	0x2000a094

0800be84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be8c:	4b28      	ldr	r3, [pc, #160]	@ (800bf30 <prvInsertBlockIntoFreeList+0xac>)
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	e002      	b.n	800be98 <prvInsertBlockIntoFreeList+0x14>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	60fb      	str	r3, [r7, #12]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d8f7      	bhi.n	800be92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	4413      	add	r3, r2
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d108      	bne.n	800bec6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	685a      	ldr	r2, [r3, #4]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	441a      	add	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	441a      	add	r2, r3
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d118      	bne.n	800bf0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	4b15      	ldr	r3, [pc, #84]	@ (800bf34 <prvInsertBlockIntoFreeList+0xb0>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d00d      	beq.n	800bf02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	685a      	ldr	r2, [r3, #4]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	441a      	add	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	601a      	str	r2, [r3, #0]
 800bf00:	e008      	b.n	800bf14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bf02:	4b0c      	ldr	r3, [pc, #48]	@ (800bf34 <prvInsertBlockIntoFreeList+0xb0>)
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	601a      	str	r2, [r3, #0]
 800bf0a:	e003      	b.n	800bf14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d002      	beq.n	800bf22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf22:	bf00      	nop
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	2000a078 	.word	0x2000a078
 800bf34:	2000a080 	.word	0x2000a080

0800bf38 <LL_USART_IsActiveFlag_PE>:
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	69db      	ldr	r3, [r3, #28]
 800bf44:	f003 0301 	and.w	r3, r3, #1
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d101      	bne.n	800bf50 <LL_USART_IsActiveFlag_PE+0x18>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e000      	b.n	800bf52 <LL_USART_IsActiveFlag_PE+0x1a>
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	370c      	adds	r7, #12
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <LL_USART_IsActiveFlag_FE>:
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b083      	sub	sp, #12
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	69db      	ldr	r3, [r3, #28]
 800bf6a:	f003 0302 	and.w	r3, r3, #2
 800bf6e:	2b02      	cmp	r3, #2
 800bf70:	d101      	bne.n	800bf76 <LL_USART_IsActiveFlag_FE+0x18>
 800bf72:	2301      	movs	r3, #1
 800bf74:	e000      	b.n	800bf78 <LL_USART_IsActiveFlag_FE+0x1a>
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <LL_USART_IsActiveFlag_NE>:
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	69db      	ldr	r3, [r3, #28]
 800bf90:	f003 0304 	and.w	r3, r3, #4
 800bf94:	2b04      	cmp	r3, #4
 800bf96:	d101      	bne.n	800bf9c <LL_USART_IsActiveFlag_NE+0x18>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e000      	b.n	800bf9e <LL_USART_IsActiveFlag_NE+0x1a>
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr

0800bfaa <LL_USART_IsActiveFlag_ORE>:
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b083      	sub	sp, #12
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	69db      	ldr	r3, [r3, #28]
 800bfb6:	f003 0308 	and.w	r3, r3, #8
 800bfba:	2b08      	cmp	r3, #8
 800bfbc:	d101      	bne.n	800bfc2 <LL_USART_IsActiveFlag_ORE+0x18>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e000      	b.n	800bfc4 <LL_USART_IsActiveFlag_ORE+0x1a>
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	f003 0320 	and.w	r3, r3, #32
 800bfe0:	2b20      	cmp	r3, #32
 800bfe2:	d101      	bne.n	800bfe8 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e000      	b.n	800bfea <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 800bfe8:	2300      	movs	r3, #0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	370c      	adds	r7, #12
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr

0800bff6 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800bff6:	b480      	push	{r7}
 800bff8:	b083      	sub	sp, #12
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c002:	b2db      	uxtb	r3, r3
}
 800c004:	4618      	mov	r0, r3
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <_ZN10UARTDriver11GetRxErrorsEv>:
/**
 * @brief Checks UART Rx error flags, if any are set returns true
 * @return true if any error flags are set, false otherwise
 */
bool UARTDriver::GetRxErrors()
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
    bool hasErrors = false;
 800c018:	2300      	movs	r3, #0
 800c01a:	73fb      	strb	r3, [r7, #15]

    if (LL_USART_IsActiveFlag_ORE(kUart_)) {
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4618      	mov	r0, r3
 800c022:	f7ff ffc2 	bl	800bfaa <LL_USART_IsActiveFlag_ORE>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	bf14      	ite	ne
 800c02c:	2301      	movne	r3, #1
 800c02e:	2300      	moveq	r3, #0
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b00      	cmp	r3, #0
 800c034:	d002      	beq.n	800c03c <_ZN10UARTDriver11GetRxErrorsEv+0x2c>
        hasErrors = true;
 800c036:	2301      	movs	r3, #1
 800c038:	73fb      	strb	r3, [r7, #15]
 800c03a:	e02e      	b.n	800c09a <_ZN10UARTDriver11GetRxErrorsEv+0x8a>
    }
    else if (LL_USART_IsActiveFlag_NE(kUart_)) {
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4618      	mov	r0, r3
 800c042:	f7ff ff9f 	bl	800bf84 <LL_USART_IsActiveFlag_NE>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	bf14      	ite	ne
 800c04c:	2301      	movne	r3, #1
 800c04e:	2300      	moveq	r3, #0
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d002      	beq.n	800c05c <_ZN10UARTDriver11GetRxErrorsEv+0x4c>
        hasErrors = true;
 800c056:	2301      	movs	r3, #1
 800c058:	73fb      	strb	r3, [r7, #15]
 800c05a:	e01e      	b.n	800c09a <_ZN10UARTDriver11GetRxErrorsEv+0x8a>
    }
    else if(LL_USART_IsActiveFlag_FE(kUart_)) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4618      	mov	r0, r3
 800c062:	f7ff ff7c 	bl	800bf5e <LL_USART_IsActiveFlag_FE>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	bf14      	ite	ne
 800c06c:	2301      	movne	r3, #1
 800c06e:	2300      	moveq	r3, #0
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b00      	cmp	r3, #0
 800c074:	d002      	beq.n	800c07c <_ZN10UARTDriver11GetRxErrorsEv+0x6c>
        hasErrors = true;
 800c076:	2301      	movs	r3, #1
 800c078:	73fb      	strb	r3, [r7, #15]
 800c07a:	e00e      	b.n	800c09a <_ZN10UARTDriver11GetRxErrorsEv+0x8a>
    }
    else if(LL_USART_IsActiveFlag_PE(kUart_)) {
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4618      	mov	r0, r3
 800c082:	f7ff ff59 	bl	800bf38 <LL_USART_IsActiveFlag_PE>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	bf14      	ite	ne
 800c08c:	2301      	movne	r3, #1
 800c08e:	2300      	moveq	r3, #0
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <_ZN10UARTDriver11GetRxErrorsEv+0x8a>
        hasErrors = true;
 800c096:	2301      	movs	r3, #1
 800c098:	73fb      	strb	r3, [r7, #15]
    }

    return hasErrors;
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <_ZN10UARTDriver14HandleIRQ_UARTEv>:
/**
 * @brief Handles an interrupt for the UART
 * @attention MUST be called inside USARTx_IRQHandler
 */
void UARTDriver::HandleIRQ_UART()
{
 800c0a4:	b5b0      	push	{r4, r5, r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
    // Call the callback if RXNE is set
    if (LL_USART_IsActiveFlag_RXNE(kUart_)) {
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7ff ff8d 	bl	800bfd0 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	bf14      	ite	ne
 800c0bc:	2301      	movne	r3, #1
 800c0be:	2300      	moveq	r3, #0
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d01d      	beq.n	800c102 <_ZN10UARTDriver14HandleIRQ_UARTEv+0x5e>
        // Read the data from the data register
        if (rxCharBuf_ != nullptr) {
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d008      	beq.n	800c0e0 <_ZN10UARTDriver14HandleIRQ_UARTEv+0x3c>
            *rxCharBuf_ = LL_USART_ReceiveData8(kUart_);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	685c      	ldr	r4, [r3, #4]
 800c0d6:	4610      	mov	r0, r2
 800c0d8:	f7ff ff8d 	bl	800bff6 <LL_USART_ReceiveData8>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	7023      	strb	r3, [r4, #0]
        }

        // Call the receiver interrupt
        if(rxReceiver_ != nullptr) {
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00c      	beq.n	800c102 <_ZN10UARTDriver14HandleIRQ_UARTEv+0x5e>
            rxReceiver_->InterruptRxData(GetRxErrors());
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681c      	ldr	r4, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	689d      	ldr	r5, [r3, #8]
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7ff ff8b 	bl	800c010 <_ZN10UARTDriver11GetRxErrorsEv>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4628      	mov	r0, r5
 800c100:	47a0      	blx	r4
        }
    }
}
 800c102:	bf00      	nop
 800c104:	3708      	adds	r7, #8
 800c106:	46bd      	mov	sp, r7
 800c108:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c10c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &MSC_Desc, DEVICE_FS) != USBD_OK) {
 800c110:	2200      	movs	r2, #0
 800c112:	4912      	ldr	r1, [pc, #72]	@ (800c15c <MX_USB_Device_Init+0x50>)
 800c114:	4812      	ldr	r0, [pc, #72]	@ (800c160 <MX_USB_Device_Init+0x54>)
 800c116:	f7fc f9de 	bl	80084d6 <USBD_Init>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c120:	f7f4 fb79 	bl	8000816 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK) {
 800c124:	490f      	ldr	r1, [pc, #60]	@ (800c164 <MX_USB_Device_Init+0x58>)
 800c126:	480e      	ldr	r0, [pc, #56]	@ (800c160 <MX_USB_Device_Init+0x54>)
 800c128:	f7fc fa05 	bl	8008536 <USBD_RegisterClass>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d001      	beq.n	800c136 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c132:	f7f4 fb70 	bl	8000816 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK) {
 800c136:	490c      	ldr	r1, [pc, #48]	@ (800c168 <MX_USB_Device_Init+0x5c>)
 800c138:	4809      	ldr	r0, [pc, #36]	@ (800c160 <MX_USB_Device_Init+0x54>)
 800c13a:	f7fa fdb5 	bl	8006ca8 <USBD_MSC_RegisterStorage>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d001      	beq.n	800c148 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c144:	f7f4 fb67 	bl	8000816 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c148:	4805      	ldr	r0, [pc, #20]	@ (800c160 <MX_USB_Device_Init+0x54>)
 800c14a:	f7fc fa1b 	bl	8008584 <USBD_Start>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d001      	beq.n	800c158 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c154:	f7f4 fb5f 	bl	8000816 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c158:	bf00      	nop
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	20000110 	.word	0x20000110
 800c160:	2000a098 	.word	0x2000a098
 800c164:	20000024 	.word	0x20000024
 800c168:	20000164 	.word	0x20000164

0800c16c <USBD_MSC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	4603      	mov	r3, r0
 800c174:	6039      	str	r1, [r7, #0]
 800c176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_MSC_DeviceDesc);
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	2212      	movs	r2, #18
 800c17c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceDesc;
 800c17e:	4b03      	ldr	r3, [pc, #12]	@ (800c18c <USBD_MSC_DeviceDescriptor+0x20>)
}
 800c180:	4618      	mov	r0, r3
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr
 800c18c:	20000130 	.word	0x20000130

0800c190 <USBD_MSC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	4603      	mov	r3, r0
 800c198:	6039      	str	r1, [r7, #0]
 800c19a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	2204      	movs	r2, #4
 800c1a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c1a2:	4b03      	ldr	r3, [pc, #12]	@ (800c1b0 <USBD_MSC_LangIDStrDescriptor+0x20>)
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	20000144 	.word	0x20000144

0800c1b4 <USBD_MSC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	6039      	str	r1, [r7, #0]
 800c1be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d105      	bne.n	800c1d2 <USBD_MSC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	4907      	ldr	r1, [pc, #28]	@ (800c1e8 <USBD_MSC_ProductStrDescriptor+0x34>)
 800c1ca:	4808      	ldr	r0, [pc, #32]	@ (800c1ec <USBD_MSC_ProductStrDescriptor+0x38>)
 800c1cc:	f7fd f9c3 	bl	8009556 <USBD_GetString>
 800c1d0:	e004      	b.n	800c1dc <USBD_MSC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	4904      	ldr	r1, [pc, #16]	@ (800c1e8 <USBD_MSC_ProductStrDescriptor+0x34>)
 800c1d6:	4805      	ldr	r0, [pc, #20]	@ (800c1ec <USBD_MSC_ProductStrDescriptor+0x38>)
 800c1d8:	f7fd f9bd 	bl	8009556 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1dc:	4b02      	ldr	r3, [pc, #8]	@ (800c1e8 <USBD_MSC_ProductStrDescriptor+0x34>)
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	2000a368 	.word	0x2000a368
 800c1ec:	0800cce0 	.word	0x0800cce0

0800c1f0 <USBD_MSC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	6039      	str	r1, [r7, #0]
 800c1fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1fc:	683a      	ldr	r2, [r7, #0]
 800c1fe:	4904      	ldr	r1, [pc, #16]	@ (800c210 <USBD_MSC_ManufacturerStrDescriptor+0x20>)
 800c200:	4804      	ldr	r0, [pc, #16]	@ (800c214 <USBD_MSC_ManufacturerStrDescriptor+0x24>)
 800c202:	f7fd f9a8 	bl	8009556 <USBD_GetString>
  return USBD_StrDesc;
 800c206:	4b02      	ldr	r3, [pc, #8]	@ (800c210 <USBD_MSC_ManufacturerStrDescriptor+0x20>)
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	2000a368 	.word	0x2000a368
 800c214:	0800ccf4 	.word	0x0800ccf4

0800c218 <USBD_MSC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	4603      	mov	r3, r0
 800c220:	6039      	str	r1, [r7, #0]
 800c222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	221a      	movs	r2, #26
 800c228:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c22a:	f000 f843 	bl	800c2b4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_MSC_SerialStrDescriptor */

  /* USER CODE END USBD_MSC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c22e:	4b02      	ldr	r3, [pc, #8]	@ (800c238 <USBD_MSC_SerialStrDescriptor+0x20>)
}
 800c230:	4618      	mov	r0, r3
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	20000148 	.word	0x20000148

0800c23c <USBD_MSC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	4603      	mov	r3, r0
 800c244:	6039      	str	r1, [r7, #0]
 800c246:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c248:	79fb      	ldrb	r3, [r7, #7]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d105      	bne.n	800c25a <USBD_MSC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	4907      	ldr	r1, [pc, #28]	@ (800c270 <USBD_MSC_ConfigStrDescriptor+0x34>)
 800c252:	4808      	ldr	r0, [pc, #32]	@ (800c274 <USBD_MSC_ConfigStrDescriptor+0x38>)
 800c254:	f7fd f97f 	bl	8009556 <USBD_GetString>
 800c258:	e004      	b.n	800c264 <USBD_MSC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c25a:	683a      	ldr	r2, [r7, #0]
 800c25c:	4904      	ldr	r1, [pc, #16]	@ (800c270 <USBD_MSC_ConfigStrDescriptor+0x34>)
 800c25e:	4805      	ldr	r0, [pc, #20]	@ (800c274 <USBD_MSC_ConfigStrDescriptor+0x38>)
 800c260:	f7fd f979 	bl	8009556 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c264:	4b02      	ldr	r3, [pc, #8]	@ (800c270 <USBD_MSC_ConfigStrDescriptor+0x34>)
}
 800c266:	4618      	mov	r0, r3
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	2000a368 	.word	0x2000a368
 800c274:	0800cd08 	.word	0x0800cd08

0800c278 <USBD_MSC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_MSC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	4603      	mov	r3, r0
 800c280:	6039      	str	r1, [r7, #0]
 800c282:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c284:	79fb      	ldrb	r3, [r7, #7]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d105      	bne.n	800c296 <USBD_MSC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	4907      	ldr	r1, [pc, #28]	@ (800c2ac <USBD_MSC_InterfaceStrDescriptor+0x34>)
 800c28e:	4808      	ldr	r0, [pc, #32]	@ (800c2b0 <USBD_MSC_InterfaceStrDescriptor+0x38>)
 800c290:	f7fd f961 	bl	8009556 <USBD_GetString>
 800c294:	e004      	b.n	800c2a0 <USBD_MSC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	4904      	ldr	r1, [pc, #16]	@ (800c2ac <USBD_MSC_InterfaceStrDescriptor+0x34>)
 800c29a:	4805      	ldr	r0, [pc, #20]	@ (800c2b0 <USBD_MSC_InterfaceStrDescriptor+0x38>)
 800c29c:	f7fd f95b 	bl	8009556 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2a0:	4b02      	ldr	r3, [pc, #8]	@ (800c2ac <USBD_MSC_InterfaceStrDescriptor+0x34>)
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	2000a368 	.word	0x2000a368
 800c2b0:	0800cd14 	.word	0x0800cd14

0800c2b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c2ba:	4b0f      	ldr	r3, [pc, #60]	@ (800c2f8 <Get_SerialNum+0x44>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c2c0:	4b0e      	ldr	r3, [pc, #56]	@ (800c2fc <Get_SerialNum+0x48>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c2c6:	4b0e      	ldr	r3, [pc, #56]	@ (800c300 <Get_SerialNum+0x4c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d009      	beq.n	800c2ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c2da:	2208      	movs	r2, #8
 800c2dc:	4909      	ldr	r1, [pc, #36]	@ (800c304 <Get_SerialNum+0x50>)
 800c2de:	68f8      	ldr	r0, [r7, #12]
 800c2e0:	f000 f814 	bl	800c30c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c2e4:	2204      	movs	r2, #4
 800c2e6:	4908      	ldr	r1, [pc, #32]	@ (800c308 <Get_SerialNum+0x54>)
 800c2e8:	68b8      	ldr	r0, [r7, #8]
 800c2ea:	f000 f80f 	bl	800c30c <IntToUnicode>
  }
}
 800c2ee:	bf00      	nop
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	1fff7590 	.word	0x1fff7590
 800c2fc:	1fff7594 	.word	0x1fff7594
 800c300:	1fff7598 	.word	0x1fff7598
 800c304:	2000014a 	.word	0x2000014a
 800c308:	2000015a 	.word	0x2000015a

0800c30c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b087      	sub	sp, #28
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	4613      	mov	r3, r2
 800c318:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c31e:	2300      	movs	r3, #0
 800c320:	75fb      	strb	r3, [r7, #23]
 800c322:	e027      	b.n	800c374 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	0f1b      	lsrs	r3, r3, #28
 800c328:	2b09      	cmp	r3, #9
 800c32a:	d80b      	bhi.n	800c344 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	0f1b      	lsrs	r3, r3, #28
 800c330:	b2da      	uxtb	r2, r3
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	005b      	lsls	r3, r3, #1
 800c336:	4619      	mov	r1, r3
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	440b      	add	r3, r1
 800c33c:	3230      	adds	r2, #48	@ 0x30
 800c33e:	b2d2      	uxtb	r2, r2
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	e00a      	b.n	800c35a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	0f1b      	lsrs	r3, r3, #28
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	7dfb      	ldrb	r3, [r7, #23]
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	4619      	mov	r1, r3
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	440b      	add	r3, r1
 800c354:	3237      	adds	r2, #55	@ 0x37
 800c356:	b2d2      	uxtb	r2, r2
 800c358:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	011b      	lsls	r3, r3, #4
 800c35e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c360:	7dfb      	ldrb	r3, [r7, #23]
 800c362:	005b      	lsls	r3, r3, #1
 800c364:	3301      	adds	r3, #1
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	4413      	add	r3, r2
 800c36a:	2200      	movs	r2, #0
 800c36c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c36e:	7dfb      	ldrb	r3, [r7, #23]
 800c370:	3301      	adds	r3, #1
 800c372:	75fb      	strb	r3, [r7, #23]
 800c374:	7dfa      	ldrb	r2, [r7, #23]
 800c376:	79fb      	ldrb	r3, [r7, #7]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d3d3      	bcc.n	800c324 <IntToUnicode+0x18>
  }
}
 800c37c:	bf00      	nop
 800c37e:	bf00      	nop
 800c380:	371c      	adds	r7, #28
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c38a:	b480      	push	{r7}
 800c38c:	b083      	sub	sp, #12
 800c38e:	af00      	add	r7, sp, #0
 800c390:	4603      	mov	r3, r0
 800c392:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800c394:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c396:	4618      	mov	r0, r3
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr

0800c3a2 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c3a2:	b480      	push	{r7}
 800c3a4:	b085      	sub	sp, #20
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	60b9      	str	r1, [r7, #8]
 800c3ac:	607a      	str	r2, [r7, #4]
 800c3ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	2264      	movs	r2, #100	@ 0x64
 800c3b4:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c3bc:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c3be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3714      	adds	r7, #20
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c3d6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c3ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	60b9      	str	r1, [r7, #8]
 800c404:	607a      	str	r2, [r7, #4]
 800c406:	461a      	mov	r2, r3
 800c408:	4603      	mov	r3, r0
 800c40a:	73fb      	strb	r3, [r7, #15]
 800c40c:	4613      	mov	r3, r2
 800c40e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

  memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	021b      	lsls	r3, r3, #8
 800c414:	4a06      	ldr	r2, [pc, #24]	@ (800c430 <STORAGE_Read_FS+0x34>)
 800c416:	1899      	adds	r1, r3, r2
 800c418:	89bb      	ldrh	r3, [r7, #12]
 800c41a:	021b      	lsls	r3, r3, #8
 800c41c:	461a      	mov	r2, r3
 800c41e:	68b8      	ldr	r0, [r7, #8]
 800c420:	f000 fbd2 	bl	800cbc8 <memcpy>

  /* USER CODE END 6 */
}
 800c424:	bf00      	nop
 800c426:	4618      	mov	r0, r3
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	2000a568 	.word	0x2000a568

0800c434 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60b9      	str	r1, [r7, #8]
 800c43c:	607a      	str	r2, [r7, #4]
 800c43e:	461a      	mov	r2, r3
 800c440:	4603      	mov	r3, r0
 800c442:	73fb      	strb	r3, [r7, #15]
 800c444:	4613      	mov	r3, r2
 800c446:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */

  memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	021b      	lsls	r3, r3, #8
 800c44c:	4a06      	ldr	r2, [pc, #24]	@ (800c468 <STORAGE_Write_FS+0x34>)
 800c44e:	1898      	adds	r0, r3, r2
 800c450:	89bb      	ldrh	r3, [r7, #12]
 800c452:	021b      	lsls	r3, r3, #8
 800c454:	461a      	mov	r2, r3
 800c456:	68b9      	ldr	r1, [r7, #8]
 800c458:	f000 fbb6 	bl	800cbc8 <memcpy>

  /* USER CODE END 7 */
}
 800c45c:	bf00      	nop
 800c45e:	4618      	mov	r0, r3
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	2000a568 	.word	0x2000a568

0800c46c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c46c:	b480      	push	{r7}
 800c46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c470:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c472:	4618      	mov	r0, r3
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b098      	sub	sp, #96	@ 0x60
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c484:	f107 0310 	add.w	r3, r7, #16
 800c488:	2250      	movs	r2, #80	@ 0x50
 800c48a:	2100      	movs	r1, #0
 800c48c:	4618      	mov	r0, r3
 800c48e:	f000 fb0f 	bl	800cab0 <memset>
  if(pcdHandle->Instance==USB)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a15      	ldr	r2, [pc, #84]	@ (800c4ec <HAL_PCD_MspInit+0x70>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d122      	bne.n	800c4e2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c49c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c4a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c4a6:	f107 0310 	add.w	r3, r7, #16
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7f7 f816 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800c4b6:	f7f4 f9ae 	bl	8000816 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f0 <HAL_PCD_MspInit+0x74>)
 800c4bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4be:	4a0c      	ldr	r2, [pc, #48]	@ (800c4f0 <HAL_PCD_MspInit+0x74>)
 800c4c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c4c4:	6593      	str	r3, [r2, #88]	@ 0x58
 800c4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f0 <HAL_PCD_MspInit+0x74>)
 800c4c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4ce:	60fb      	str	r3, [r7, #12]
 800c4d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	2105      	movs	r1, #5
 800c4d6:	2014      	movs	r0, #20
 800c4d8:	f7f4 fbba 	bl	8000c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c4dc:	2014      	movs	r0, #20
 800c4de:	f7f4 fbd1 	bl	8000c84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c4e2:	bf00      	nop
 800c4e4:	3760      	adds	r7, #96	@ 0x60
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	40005c00 	.word	0x40005c00
 800c4f0:	40021000 	.word	0x40021000

0800c4f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c508:	4619      	mov	r1, r3
 800c50a:	4610      	mov	r0, r2
 800c50c:	f7fc f885 	bl	800861a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c510:	bf00      	nop
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	460b      	mov	r3, r1
 800c522:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c52a:	78fa      	ldrb	r2, [r7, #3]
 800c52c:	6879      	ldr	r1, [r7, #4]
 800c52e:	4613      	mov	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4413      	add	r3, r2
 800c534:	00db      	lsls	r3, r3, #3
 800c536:	440b      	add	r3, r1
 800c538:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	78fb      	ldrb	r3, [r7, #3]
 800c540:	4619      	mov	r1, r3
 800c542:	f7fc f8bf 	bl	80086c4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c546:	bf00      	nop
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b082      	sub	sp, #8
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
 800c556:	460b      	mov	r3, r1
 800c558:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c560:	78fa      	ldrb	r2, [r7, #3]
 800c562:	6879      	ldr	r1, [r7, #4]
 800c564:	4613      	mov	r3, r2
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	4413      	add	r3, r2
 800c56a:	00db      	lsls	r3, r3, #3
 800c56c:	440b      	add	r3, r1
 800c56e:	3324      	adds	r3, #36	@ 0x24
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	78fb      	ldrb	r3, [r7, #3]
 800c574:	4619      	mov	r1, r3
 800c576:	f7fc f908 	bl	800878a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c57a:	bf00      	nop
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b082      	sub	sp, #8
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c590:	4618      	mov	r0, r3
 800c592:	f7fc fa1c 	bl	80089ce <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c596:	bf00      	nop
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b084      	sub	sp, #16
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	795b      	ldrb	r3, [r3, #5]
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d001      	beq.n	800c5b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c5b2:	f7f4 f930 	bl	8000816 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c5bc:	7bfa      	ldrb	r2, [r7, #15]
 800c5be:	4611      	mov	r1, r2
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fc f9c6 	bl	8008952 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fc f972 	bl	80088b6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c5d2:	bf00      	nop
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
	...

0800c5dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fc f9c1 	bl	8008972 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	7a5b      	ldrb	r3, [r3, #9]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d005      	beq.n	800c604 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5f8:	4b04      	ldr	r3, [pc, #16]	@ (800c60c <HAL_PCD_SuspendCallback+0x30>)
 800c5fa:	691b      	ldr	r3, [r3, #16]
 800c5fc:	4a03      	ldr	r2, [pc, #12]	@ (800c60c <HAL_PCD_SuspendCallback+0x30>)
 800c5fe:	f043 0306 	orr.w	r3, r3, #6
 800c602:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c604:	bf00      	nop
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	e000ed00 	.word	0xe000ed00

0800c610 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7a5b      	ldrb	r3, [r3, #9]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d007      	beq.n	800c630 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c620:	4b08      	ldr	r3, [pc, #32]	@ (800c644 <HAL_PCD_ResumeCallback+0x34>)
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	4a07      	ldr	r2, [pc, #28]	@ (800c644 <HAL_PCD_ResumeCallback+0x34>)
 800c626:	f023 0306 	bic.w	r3, r3, #6
 800c62a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c62c:	f000 fa0e 	bl	800ca4c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c636:	4618      	mov	r0, r3
 800c638:	f7fc f9b1 	bl	800899e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c63c:	bf00      	nop
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	e000ed00 	.word	0xe000ed00

0800c648 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c650:	4a26      	ldr	r2, [pc, #152]	@ (800c6ec <USBD_LL_Init+0xa4>)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a24      	ldr	r2, [pc, #144]	@ (800c6ec <USBD_LL_Init+0xa4>)
 800c65c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c660:	4b22      	ldr	r3, [pc, #136]	@ (800c6ec <USBD_LL_Init+0xa4>)
 800c662:	4a23      	ldr	r2, [pc, #140]	@ (800c6f0 <USBD_LL_Init+0xa8>)
 800c664:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c666:	4b21      	ldr	r3, [pc, #132]	@ (800c6ec <USBD_LL_Init+0xa4>)
 800c668:	2208      	movs	r2, #8
 800c66a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c66c:	4b1f      	ldr	r3, [pc, #124]	@ (800c6ec <USBD_LL_Init+0xa4>)
 800c66e:	2202      	movs	r2, #2
 800c670:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c672:	4b1e      	ldr	r3, [pc, #120]	@ (800c6ec <USBD_LL_Init+0xa4>)
 800c674:	2202      	movs	r2, #2
 800c676:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c678:	4b1c      	ldr	r3, [pc, #112]	@ (800c6ec <USBD_LL_Init+0xa4>)
 800c67a:	2200      	movs	r2, #0
 800c67c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c67e:	4b1b      	ldr	r3, [pc, #108]	@ (800c6ec <USBD_LL_Init+0xa4>)
 800c680:	2200      	movs	r2, #0
 800c682:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c684:	4b19      	ldr	r3, [pc, #100]	@ (800c6ec <USBD_LL_Init+0xa4>)
 800c686:	2200      	movs	r2, #0
 800c688:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c68a:	4b18      	ldr	r3, [pc, #96]	@ (800c6ec <USBD_LL_Init+0xa4>)
 800c68c:	2200      	movs	r2, #0
 800c68e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c690:	4816      	ldr	r0, [pc, #88]	@ (800c6ec <USBD_LL_Init+0xa4>)
 800c692:	f7f4 fbf7 	bl	8000e84 <HAL_PCD_Init>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c69c:	f7f4 f8bb 	bl	8000816 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c6a6:	2318      	movs	r3, #24
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	f7f6 f8ab 	bl	8002806 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c6b6:	2358      	movs	r3, #88	@ 0x58
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	2180      	movs	r1, #128	@ 0x80
 800c6bc:	f7f6 f8a3 	bl	8002806 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c6c6:	2398      	movs	r3, #152	@ 0x98
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	2181      	movs	r1, #129	@ 0x81
 800c6cc:	f7f6 f89b 	bl	8002806 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c6d6:	23d8      	movs	r3, #216	@ 0xd8
 800c6d8:	2200      	movs	r2, #0
 800c6da:	2101      	movs	r1, #1
 800c6dc:	f7f6 f893 	bl	8002806 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	20010968 	.word	0x20010968
 800c6f0:	40005c00 	.word	0x40005c00

0800c6f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c700:	2300      	movs	r3, #0
 800c702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7f4 fc88 	bl	8001020 <HAL_PCD_Start>
 800c710:	4603      	mov	r3, r0
 800c712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c714:	7bfb      	ldrb	r3, [r7, #15]
 800c716:	4618      	mov	r0, r3
 800c718:	f000 f99e 	bl	800ca58 <USBD_Get_USB_Status>
 800c71c:	4603      	mov	r3, r0
 800c71e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c720:	7bbb      	ldrb	r3, [r7, #14]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b084      	sub	sp, #16
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	4608      	mov	r0, r1
 800c734:	4611      	mov	r1, r2
 800c736:	461a      	mov	r2, r3
 800c738:	4603      	mov	r3, r0
 800c73a:	70fb      	strb	r3, [r7, #3]
 800c73c:	460b      	mov	r3, r1
 800c73e:	70bb      	strb	r3, [r7, #2]
 800c740:	4613      	mov	r3, r2
 800c742:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c744:	2300      	movs	r3, #0
 800c746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c748:	2300      	movs	r3, #0
 800c74a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c752:	78bb      	ldrb	r3, [r7, #2]
 800c754:	883a      	ldrh	r2, [r7, #0]
 800c756:	78f9      	ldrb	r1, [r7, #3]
 800c758:	f7f4 fdcf 	bl	80012fa <HAL_PCD_EP_Open>
 800c75c:	4603      	mov	r3, r0
 800c75e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c760:	7bfb      	ldrb	r3, [r7, #15]
 800c762:	4618      	mov	r0, r3
 800c764:	f000 f978 	bl	800ca58 <USBD_Get_USB_Status>
 800c768:	4603      	mov	r3, r0
 800c76a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c76c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b084      	sub	sp, #16
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	460b      	mov	r3, r1
 800c780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c786:	2300      	movs	r3, #0
 800c788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c790:	78fa      	ldrb	r2, [r7, #3]
 800c792:	4611      	mov	r1, r2
 800c794:	4618      	mov	r0, r3
 800c796:	f7f4 fe0f 	bl	80013b8 <HAL_PCD_EP_Close>
 800c79a:	4603      	mov	r3, r0
 800c79c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c79e:	7bfb      	ldrb	r3, [r7, #15]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 f959 	bl	800ca58 <USBD_Get_USB_Status>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	460b      	mov	r3, r1
 800c7be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c7ce:	78fa      	ldrb	r2, [r7, #3]
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7f4 ff5e 	bl	8001694 <HAL_PCD_EP_Flush>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7dc:	7bfb      	ldrb	r3, [r7, #15]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f000 f93a 	bl	800ca58 <USBD_Get_USB_Status>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b084      	sub	sp, #16
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c80c:	78fa      	ldrb	r2, [r7, #3]
 800c80e:	4611      	mov	r1, r2
 800c810:	4618      	mov	r0, r3
 800c812:	f7f4 fe99 	bl	8001548 <HAL_PCD_EP_SetStall>
 800c816:	4603      	mov	r3, r0
 800c818:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f000 f91b 	bl	800ca58 <USBD_Get_USB_Status>
 800c822:	4603      	mov	r3, r0
 800c824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c826:	7bbb      	ldrb	r3, [r7, #14]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	460b      	mov	r3, r1
 800c83a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c840:	2300      	movs	r3, #0
 800c842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c84a:	78fa      	ldrb	r2, [r7, #3]
 800c84c:	4611      	mov	r1, r2
 800c84e:	4618      	mov	r0, r3
 800c850:	f7f4 fecc 	bl	80015ec <HAL_PCD_EP_ClrStall>
 800c854:	4603      	mov	r3, r0
 800c856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c858:	7bfb      	ldrb	r3, [r7, #15]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f000 f8fc 	bl	800ca58 <USBD_Get_USB_Status>
 800c860:	4603      	mov	r3, r0
 800c862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c864:	7bbb      	ldrb	r3, [r7, #14]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c86e:	b480      	push	{r7}
 800c870:	b085      	sub	sp, #20
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	460b      	mov	r3, r1
 800c878:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c880:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c886:	2b00      	cmp	r3, #0
 800c888:	da0b      	bge.n	800c8a2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c88a:	78fb      	ldrb	r3, [r7, #3]
 800c88c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c890:	68f9      	ldr	r1, [r7, #12]
 800c892:	4613      	mov	r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	4413      	add	r3, r2
 800c898:	00db      	lsls	r3, r3, #3
 800c89a:	440b      	add	r3, r1
 800c89c:	3312      	adds	r3, #18
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	e00b      	b.n	800c8ba <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c8a2:	78fb      	ldrb	r3, [r7, #3]
 800c8a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8a8:	68f9      	ldr	r1, [r7, #12]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	00db      	lsls	r3, r3, #3
 800c8b2:	440b      	add	r3, r1
 800c8b4:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c8b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3714      	adds	r7, #20
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr

0800c8c6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c8e0:	78fa      	ldrb	r2, [r7, #3]
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7f4 fce4 	bl	80012b2 <HAL_PCD_SetAddress>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 f8b1 	bl	800ca58 <USBD_Get_USB_Status>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	607a      	str	r2, [r7, #4]
 800c90e:	603b      	str	r3, [r7, #0]
 800c910:	460b      	mov	r3, r1
 800c912:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c914:	2300      	movs	r3, #0
 800c916:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c918:	2300      	movs	r3, #0
 800c91a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c922:	7af9      	ldrb	r1, [r7, #11]
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	f7f4 fdd7 	bl	80014da <HAL_PCD_EP_Transmit>
 800c92c:	4603      	mov	r3, r0
 800c92e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c930:	7dfb      	ldrb	r3, [r7, #23]
 800c932:	4618      	mov	r0, r3
 800c934:	f000 f890 	bl	800ca58 <USBD_Get_USB_Status>
 800c938:	4603      	mov	r3, r0
 800c93a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c93c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b086      	sub	sp, #24
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	60f8      	str	r0, [r7, #12]
 800c94e:	607a      	str	r2, [r7, #4]
 800c950:	603b      	str	r3, [r7, #0]
 800c952:	460b      	mov	r3, r1
 800c954:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c956:	2300      	movs	r3, #0
 800c958:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c95a:	2300      	movs	r3, #0
 800c95c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c964:	7af9      	ldrb	r1, [r7, #11]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	f7f4 fd6d 	bl	8001448 <HAL_PCD_EP_Receive>
 800c96e:	4603      	mov	r3, r0
 800c970:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c972:	7dfb      	ldrb	r3, [r7, #23]
 800c974:	4618      	mov	r0, r3
 800c976:	f000 f86f 	bl	800ca58 <USBD_Get_USB_Status>
 800c97a:	4603      	mov	r3, r0
 800c97c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c97e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c980:	4618      	mov	r0, r3
 800c982:	3718      	adds	r7, #24
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	460b      	mov	r3, r1
 800c992:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c99a:	78fa      	ldrb	r2, [r7, #3]
 800c99c:	4611      	mov	r1, r2
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7f4 fd83 	bl	80014aa <HAL_PCD_EP_GetRxCount>
 800c9a4:	4603      	mov	r3, r0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
	...

0800c9b0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c9bc:	78fb      	ldrb	r3, [r7, #3]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d002      	beq.n	800c9c8 <HAL_PCDEx_LPM_Callback+0x18>
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d013      	beq.n	800c9ee <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c9c6:	e023      	b.n	800ca10 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	7a5b      	ldrb	r3, [r3, #9]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d007      	beq.n	800c9e0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c9d0:	f000 f83c 	bl	800ca4c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9d4:	4b10      	ldr	r3, [pc, #64]	@ (800ca18 <HAL_PCDEx_LPM_Callback+0x68>)
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	4a0f      	ldr	r2, [pc, #60]	@ (800ca18 <HAL_PCDEx_LPM_Callback+0x68>)
 800c9da:	f023 0306 	bic.w	r3, r3, #6
 800c9de:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fb ffd9 	bl	800899e <USBD_LL_Resume>
    break;
 800c9ec:	e010      	b.n	800ca10 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fb ffbc 	bl	8008972 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	7a5b      	ldrb	r3, [r3, #9]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d005      	beq.n	800ca0e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca02:	4b05      	ldr	r3, [pc, #20]	@ (800ca18 <HAL_PCDEx_LPM_Callback+0x68>)
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	4a04      	ldr	r2, [pc, #16]	@ (800ca18 <HAL_PCDEx_LPM_Callback+0x68>)
 800ca08:	f043 0306 	orr.w	r3, r3, #6
 800ca0c:	6113      	str	r3, [r2, #16]
    break;
 800ca0e:	bf00      	nop
}
 800ca10:	bf00      	nop
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	e000ed00 	.word	0xe000ed00

0800ca1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ca24:	4b03      	ldr	r3, [pc, #12]	@ (800ca34 <USBD_static_malloc+0x18>)
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	370c      	adds	r7, #12
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	20010c44 	.word	0x20010c44

0800ca38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]

}
 800ca40:	bf00      	nop
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ca50:	f7f3 fdaa 	bl	80005a8 <SystemClock_Config>
}
 800ca54:	bf00      	nop
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca62:	2300      	movs	r3, #0
 800ca64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca66:	79fb      	ldrb	r3, [r7, #7]
 800ca68:	2b03      	cmp	r3, #3
 800ca6a:	d817      	bhi.n	800ca9c <USBD_Get_USB_Status+0x44>
 800ca6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ca74 <USBD_Get_USB_Status+0x1c>)
 800ca6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca72:	bf00      	nop
 800ca74:	0800ca85 	.word	0x0800ca85
 800ca78:	0800ca8b 	.word	0x0800ca8b
 800ca7c:	0800ca91 	.word	0x0800ca91
 800ca80:	0800ca97 	.word	0x0800ca97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca84:	2300      	movs	r3, #0
 800ca86:	73fb      	strb	r3, [r7, #15]
    break;
 800ca88:	e00b      	b.n	800caa2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ca8e:	e008      	b.n	800caa2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca90:	2301      	movs	r3, #1
 800ca92:	73fb      	strb	r3, [r7, #15]
    break;
 800ca94:	e005      	b.n	800caa2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca96:	2303      	movs	r3, #3
 800ca98:	73fb      	strb	r3, [r7, #15]
    break;
 800ca9a:	e002      	b.n	800caa2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	73fb      	strb	r3, [r7, #15]
    break;
 800caa0:	bf00      	nop
  }
  return usb_status;
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <memset>:
 800cab0:	4402      	add	r2, r0
 800cab2:	4603      	mov	r3, r0
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d100      	bne.n	800caba <memset+0xa>
 800cab8:	4770      	bx	lr
 800caba:	f803 1b01 	strb.w	r1, [r3], #1
 800cabe:	e7f9      	b.n	800cab4 <memset+0x4>

0800cac0 <_reclaim_reent>:
 800cac0:	4b2d      	ldr	r3, [pc, #180]	@ (800cb78 <_reclaim_reent+0xb8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4283      	cmp	r3, r0
 800cac6:	b570      	push	{r4, r5, r6, lr}
 800cac8:	4604      	mov	r4, r0
 800caca:	d053      	beq.n	800cb74 <_reclaim_reent+0xb4>
 800cacc:	69c3      	ldr	r3, [r0, #28]
 800cace:	b31b      	cbz	r3, 800cb18 <_reclaim_reent+0x58>
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	b163      	cbz	r3, 800caee <_reclaim_reent+0x2e>
 800cad4:	2500      	movs	r5, #0
 800cad6:	69e3      	ldr	r3, [r4, #28]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	5959      	ldr	r1, [r3, r5]
 800cadc:	b9b1      	cbnz	r1, 800cb0c <_reclaim_reent+0x4c>
 800cade:	3504      	adds	r5, #4
 800cae0:	2d80      	cmp	r5, #128	@ 0x80
 800cae2:	d1f8      	bne.n	800cad6 <_reclaim_reent+0x16>
 800cae4:	69e3      	ldr	r3, [r4, #28]
 800cae6:	4620      	mov	r0, r4
 800cae8:	68d9      	ldr	r1, [r3, #12]
 800caea:	f000 f87b 	bl	800cbe4 <_free_r>
 800caee:	69e3      	ldr	r3, [r4, #28]
 800caf0:	6819      	ldr	r1, [r3, #0]
 800caf2:	b111      	cbz	r1, 800cafa <_reclaim_reent+0x3a>
 800caf4:	4620      	mov	r0, r4
 800caf6:	f000 f875 	bl	800cbe4 <_free_r>
 800cafa:	69e3      	ldr	r3, [r4, #28]
 800cafc:	689d      	ldr	r5, [r3, #8]
 800cafe:	b15d      	cbz	r5, 800cb18 <_reclaim_reent+0x58>
 800cb00:	4629      	mov	r1, r5
 800cb02:	4620      	mov	r0, r4
 800cb04:	682d      	ldr	r5, [r5, #0]
 800cb06:	f000 f86d 	bl	800cbe4 <_free_r>
 800cb0a:	e7f8      	b.n	800cafe <_reclaim_reent+0x3e>
 800cb0c:	680e      	ldr	r6, [r1, #0]
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f000 f868 	bl	800cbe4 <_free_r>
 800cb14:	4631      	mov	r1, r6
 800cb16:	e7e1      	b.n	800cadc <_reclaim_reent+0x1c>
 800cb18:	6961      	ldr	r1, [r4, #20]
 800cb1a:	b111      	cbz	r1, 800cb22 <_reclaim_reent+0x62>
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f000 f861 	bl	800cbe4 <_free_r>
 800cb22:	69e1      	ldr	r1, [r4, #28]
 800cb24:	b111      	cbz	r1, 800cb2c <_reclaim_reent+0x6c>
 800cb26:	4620      	mov	r0, r4
 800cb28:	f000 f85c 	bl	800cbe4 <_free_r>
 800cb2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cb2e:	b111      	cbz	r1, 800cb36 <_reclaim_reent+0x76>
 800cb30:	4620      	mov	r0, r4
 800cb32:	f000 f857 	bl	800cbe4 <_free_r>
 800cb36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb38:	b111      	cbz	r1, 800cb40 <_reclaim_reent+0x80>
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f000 f852 	bl	800cbe4 <_free_r>
 800cb40:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cb42:	b111      	cbz	r1, 800cb4a <_reclaim_reent+0x8a>
 800cb44:	4620      	mov	r0, r4
 800cb46:	f000 f84d 	bl	800cbe4 <_free_r>
 800cb4a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cb4c:	b111      	cbz	r1, 800cb54 <_reclaim_reent+0x94>
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f000 f848 	bl	800cbe4 <_free_r>
 800cb54:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cb56:	b111      	cbz	r1, 800cb5e <_reclaim_reent+0x9e>
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 f843 	bl	800cbe4 <_free_r>
 800cb5e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cb60:	b111      	cbz	r1, 800cb68 <_reclaim_reent+0xa8>
 800cb62:	4620      	mov	r0, r4
 800cb64:	f000 f83e 	bl	800cbe4 <_free_r>
 800cb68:	6a23      	ldr	r3, [r4, #32]
 800cb6a:	b11b      	cbz	r3, 800cb74 <_reclaim_reent+0xb4>
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb72:	4718      	bx	r3
 800cb74:	bd70      	pop	{r4, r5, r6, pc}
 800cb76:	bf00      	nop
 800cb78:	20000184 	.word	0x20000184

0800cb7c <__libc_init_array>:
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	4d0d      	ldr	r5, [pc, #52]	@ (800cbb4 <__libc_init_array+0x38>)
 800cb80:	4c0d      	ldr	r4, [pc, #52]	@ (800cbb8 <__libc_init_array+0x3c>)
 800cb82:	1b64      	subs	r4, r4, r5
 800cb84:	10a4      	asrs	r4, r4, #2
 800cb86:	2600      	movs	r6, #0
 800cb88:	42a6      	cmp	r6, r4
 800cb8a:	d109      	bne.n	800cba0 <__libc_init_array+0x24>
 800cb8c:	4d0b      	ldr	r5, [pc, #44]	@ (800cbbc <__libc_init_array+0x40>)
 800cb8e:	4c0c      	ldr	r4, [pc, #48]	@ (800cbc0 <__libc_init_array+0x44>)
 800cb90:	f000 f87e 	bl	800cc90 <_init>
 800cb94:	1b64      	subs	r4, r4, r5
 800cb96:	10a4      	asrs	r4, r4, #2
 800cb98:	2600      	movs	r6, #0
 800cb9a:	42a6      	cmp	r6, r4
 800cb9c:	d105      	bne.n	800cbaa <__libc_init_array+0x2e>
 800cb9e:	bd70      	pop	{r4, r5, r6, pc}
 800cba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cba4:	4798      	blx	r3
 800cba6:	3601      	adds	r6, #1
 800cba8:	e7ee      	b.n	800cb88 <__libc_init_array+0xc>
 800cbaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbae:	4798      	blx	r3
 800cbb0:	3601      	adds	r6, #1
 800cbb2:	e7f2      	b.n	800cb9a <__libc_init_array+0x1e>
 800cbb4:	0800cd90 	.word	0x0800cd90
 800cbb8:	0800cd90 	.word	0x0800cd90
 800cbbc:	0800cd90 	.word	0x0800cd90
 800cbc0:	0800cd98 	.word	0x0800cd98

0800cbc4 <__retarget_lock_acquire_recursive>:
 800cbc4:	4770      	bx	lr

0800cbc6 <__retarget_lock_release_recursive>:
 800cbc6:	4770      	bx	lr

0800cbc8 <memcpy>:
 800cbc8:	440a      	add	r2, r1
 800cbca:	4291      	cmp	r1, r2
 800cbcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbd0:	d100      	bne.n	800cbd4 <memcpy+0xc>
 800cbd2:	4770      	bx	lr
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbde:	4291      	cmp	r1, r2
 800cbe0:	d1f9      	bne.n	800cbd6 <memcpy+0xe>
 800cbe2:	bd10      	pop	{r4, pc}

0800cbe4 <_free_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	2900      	cmp	r1, #0
 800cbea:	d041      	beq.n	800cc70 <_free_r+0x8c>
 800cbec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbf0:	1f0c      	subs	r4, r1, #4
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	bfb8      	it	lt
 800cbf6:	18e4      	addlt	r4, r4, r3
 800cbf8:	f000 f83e 	bl	800cc78 <__malloc_lock>
 800cbfc:	4a1d      	ldr	r2, [pc, #116]	@ (800cc74 <_free_r+0x90>)
 800cbfe:	6813      	ldr	r3, [r2, #0]
 800cc00:	b933      	cbnz	r3, 800cc10 <_free_r+0x2c>
 800cc02:	6063      	str	r3, [r4, #4]
 800cc04:	6014      	str	r4, [r2, #0]
 800cc06:	4628      	mov	r0, r5
 800cc08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc0c:	f000 b83a 	b.w	800cc84 <__malloc_unlock>
 800cc10:	42a3      	cmp	r3, r4
 800cc12:	d908      	bls.n	800cc26 <_free_r+0x42>
 800cc14:	6820      	ldr	r0, [r4, #0]
 800cc16:	1821      	adds	r1, r4, r0
 800cc18:	428b      	cmp	r3, r1
 800cc1a:	bf01      	itttt	eq
 800cc1c:	6819      	ldreq	r1, [r3, #0]
 800cc1e:	685b      	ldreq	r3, [r3, #4]
 800cc20:	1809      	addeq	r1, r1, r0
 800cc22:	6021      	streq	r1, [r4, #0]
 800cc24:	e7ed      	b.n	800cc02 <_free_r+0x1e>
 800cc26:	461a      	mov	r2, r3
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	b10b      	cbz	r3, 800cc30 <_free_r+0x4c>
 800cc2c:	42a3      	cmp	r3, r4
 800cc2e:	d9fa      	bls.n	800cc26 <_free_r+0x42>
 800cc30:	6811      	ldr	r1, [r2, #0]
 800cc32:	1850      	adds	r0, r2, r1
 800cc34:	42a0      	cmp	r0, r4
 800cc36:	d10b      	bne.n	800cc50 <_free_r+0x6c>
 800cc38:	6820      	ldr	r0, [r4, #0]
 800cc3a:	4401      	add	r1, r0
 800cc3c:	1850      	adds	r0, r2, r1
 800cc3e:	4283      	cmp	r3, r0
 800cc40:	6011      	str	r1, [r2, #0]
 800cc42:	d1e0      	bne.n	800cc06 <_free_r+0x22>
 800cc44:	6818      	ldr	r0, [r3, #0]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	6053      	str	r3, [r2, #4]
 800cc4a:	4408      	add	r0, r1
 800cc4c:	6010      	str	r0, [r2, #0]
 800cc4e:	e7da      	b.n	800cc06 <_free_r+0x22>
 800cc50:	d902      	bls.n	800cc58 <_free_r+0x74>
 800cc52:	230c      	movs	r3, #12
 800cc54:	602b      	str	r3, [r5, #0]
 800cc56:	e7d6      	b.n	800cc06 <_free_r+0x22>
 800cc58:	6820      	ldr	r0, [r4, #0]
 800cc5a:	1821      	adds	r1, r4, r0
 800cc5c:	428b      	cmp	r3, r1
 800cc5e:	bf04      	itt	eq
 800cc60:	6819      	ldreq	r1, [r3, #0]
 800cc62:	685b      	ldreq	r3, [r3, #4]
 800cc64:	6063      	str	r3, [r4, #4]
 800cc66:	bf04      	itt	eq
 800cc68:	1809      	addeq	r1, r1, r0
 800cc6a:	6021      	streq	r1, [r4, #0]
 800cc6c:	6054      	str	r4, [r2, #4]
 800cc6e:	e7ca      	b.n	800cc06 <_free_r+0x22>
 800cc70:	bd38      	pop	{r3, r4, r5, pc}
 800cc72:	bf00      	nop
 800cc74:	20010ff8 	.word	0x20010ff8

0800cc78 <__malloc_lock>:
 800cc78:	4801      	ldr	r0, [pc, #4]	@ (800cc80 <__malloc_lock+0x8>)
 800cc7a:	f7ff bfa3 	b.w	800cbc4 <__retarget_lock_acquire_recursive>
 800cc7e:	bf00      	nop
 800cc80:	20010ff4 	.word	0x20010ff4

0800cc84 <__malloc_unlock>:
 800cc84:	4801      	ldr	r0, [pc, #4]	@ (800cc8c <__malloc_unlock+0x8>)
 800cc86:	f7ff bf9e 	b.w	800cbc6 <__retarget_lock_release_recursive>
 800cc8a:	bf00      	nop
 800cc8c:	20010ff4 	.word	0x20010ff4

0800cc90 <_init>:
 800cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc92:	bf00      	nop
 800cc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc96:	bc08      	pop	{r3}
 800cc98:	469e      	mov	lr, r3
 800cc9a:	4770      	bx	lr

0800cc9c <_fini>:
 800cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9e:	bf00      	nop
 800cca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cca2:	bc08      	pop	{r3}
 800cca4:	469e      	mov	lr, r3
 800cca6:	4770      	bx	lr
